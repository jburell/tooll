{
  "Name": "CSVToList2 (2)",
  "_id": "bbe4d09b-6ab2-441a-8eef-42bfd744298f",
  "Namespace": "examples.barChart.helpers",
  "Description": "",
  "Inputs": [
    {
      "Name": "CSVText",
      "MetaInstanceID": "e7fbfbf1-45a9-4a6f-9b32-23c88ecca4d3",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rows.Count",
      "MetaInstanceID": "d0102432-f138-49af-9a66-9fea11d0c9e5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Columns.First",
      "MetaInstanceID": "57712936-7c44-4ab9-9151-341218aec86d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Columns.Count",
      "MetaInstanceID": "96269294-6604-4fe0-97b7-4010177cb161",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SplitCharacter",
      "MetaInstanceID": "dfce674f-9bb1-4a8b-978b-32f8360ebb67",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Dynamic",
      "MetaInstanceID": "4d0b0731-5ef0-4ebc-8164-ac4db0feb2d0",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "9386b4a4-76cb-4abd-8362-a6a7707d1767",
      "MetaID": "35f7d983-a566-4022-9f98-a9258cb55a6b",
      "Name": "CSVToList2 (2)Func",
      "Version": "176c6182-e941-454e-99b4-2a7e15fb938c",
      "Type": "Dynamic",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.Net;",
        "using System.IO;",
        "",
        "using System.Threading;",
        "using System.Threading.Tasks;",
        "//using System.Runtime.Serialization.Json;",
        "using System.Collections.Specialized;",
        "",
        "namespace Framefield.Core.ID35f7d983_a566_4022_9f98_a9258cb55a6b",
        "{",
        "    public class Class_CSV2List : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            CSVText = 0,",
        "            RowsCount = 1,",
        "            ColumnsFirst = 2,",
        "            ColumnsCount = 3,",
        "            SplitCharacter = 4",
        "        }",
        "        //<<< _inputids",
        "",
        "        List<List<string>> _tmpList = new List<List<string>>();",
        "        String _csvText;",
        "        List<String> _resultList = new List<String>();",
        "        ",
        "        int _rowsFirst;",
        "        int _rowsCount;",
        "        int _columnsFirst;",
        "        int _columnsCount;",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var CSVText = inputs[(int)InputId.CSVText].Eval(context).Text;",
        "            var RowsCount = inputs[(int)InputId.RowsCount].Eval(context).Value;",
        "            var ColumnsFirst = inputs[(int)InputId.ColumnsFirst].Eval(context).Value;",
        "            var ColumnsCount = inputs[(int)InputId.ColumnsCount].Eval(context).Value;",
        "            var Columns = new Vector2(ColumnsFirst, ColumnsCount);",
        "            var SplitCharacter = inputs[(int)InputId.SplitCharacter].Eval(context).Text;",
        "            //<<< _params",
        "/*            ",
        "            if( _rowsFirst != (int)RowsFirst ",
        "                ||_rowsCount != (int)RowsCount",
        "                || _columnsFirst != (int)ColumnsFirst",
        "                || _columnsCount != (int)ColumnsCount",
        "            ) {",
        "                Changed = true;",
        "                _rowsFirst = (int)RowsFirst;",
        "                _rowsCount = (int)RowsCount;",
        "                _columnsFirst = (int)ColumnsFirst;",
        "                _columnsCount = (int)ColumnsCount;",
        "            }",
        "            ",
        "            if( Changed) {",
        "            ",
        "",
        "                if(SplitCharacter.Length != 1) {",
        "                    Logger.Warn(this,\"Invalid split-character : {0}\", SplitCharacter);",
        "                    _splitter = ',';",
        "                }",
        "                else {",
        "                    _splitter= SplitCharacter[0];",
        "                }",
        "            ",
        "            ",
        "                if( CSVText != _csvText) {            ",
        "                    _csvText = CSVText;",
        "                    //_tmpList = SplitCSVLine( _csvText);",
        "                }                ",
        "                ",
        "                ",
        "                RowsCount = Math.Max( RowsCount, 1);",
        "                ColumnsCount = Math.Max( ColumnsCount, 1);",
        "                RowsFirst = Math.Max( RowsFirst, 0);",
        "                ColumnsFirst = Math.Max( ColumnsFirst, 1);",
        "                _resultList.Clear();",
        "                ",
        "                if(_tmpList.Count > 0) {",
        "                    for(int r = (int)RowsFirst; r < (int)RowsFirst + (int)RowsCount; ++r) {",
        "                        for(int c = (int)ColumnsFirst; c < (int)ColumnsFirst + (int)ColumnsCount; ++c) {",
        "                            if(_tmpList.Count > r && _tmpList[r].Count > c) {",
        "                                _resultList.Add( _tmpList[r][c]);",
        "                            }",
        "                        }",
        "                    }                ",
        "                }",
        "                Changed = false;",
        "            }",
        "            ",
        "            context.Dynamic = _resultList;",
        "            context.Text= \"\";",
        "            context.Value=1;",
        "*/            ",
        "            return context;",
        "        }",
        "        ",
        "        char _splitter= ',';",
        "        ",
        "        List<List<string>> SplitCSVLine(string lines)",
        "        {",
        "            var line = lines.Replace(\"<br>\\n\",\"\");",
        "            bool escapeActive = false;",
        "            bool quoteActive = false;",
        "            List<List<string>> result = new List<List<string>>();",
        "            var lineStrings = new List<string>();",
        "            string token = \"\";",
        "            foreach (char c in line)",
        "            {",
        "                if (c == '\\\\') {",
        "                    if (escapeActive) {",
        "                        token += c; ",
        "                    }",
        "                    else {",
        "                        escapeActive = true;",
        "                    }",
        "                } ",
        "                else if (c == '\"') {",
        "                    if (escapeActive) {",
        "                        token += c;",
        "                    } else if (quoteActive) {",
        "                        quoteActive = false;",
        "                    } else {",
        "                        quoteActive = true;",
        "                    }",
        "                } else if (c == _splitter) {",
        "                    if (quoteActive) {",
        "                        token += c;",
        "                    } else {",
        "                        lineStrings.Add(token);",
        "                        token = \"\";",
        "                    }",
        "                }",
        "                else if (c == '\\n') {",
        "                    if (quoteActive) {",
        "                        token += c;",
        "                    }",
        "                    else {",
        "                        lineStrings.Add(token);",
        "                        token = String.Empty;",
        "                        result.Add(lineStrings);",
        "                        lineStrings = new List<string>();",
        "                    }",
        "                }",
        "                else {",
        "                    token += c;",
        "                }",
        "            }",
        "            if (!String.IsNullOrEmpty(token)) {",
        "                lineStrings.Add(token);",
        "                result.Add(lineStrings);",
        "            }",
        "            return result;",
        "        }",
        "",
        "",
        "        Dictionary<string, int> KeysFromHeadline(List<string> headlineStrings) {",
        "            int id = 0;",
        "            Dictionary<string, int> result = new Dictionary<string, int>();",
        "            foreach (var s in headlineStrings) {",
        "                result[s] = id++;",
        "            }",
        "            return result;",
        "        }",
        "/*",
        "        public void UpdateWinnersFromCSV(string csv) {",
        "            return;",
        "            if(csv != _keepCategoriesCSV) {",
        "                InvalidData = false;",
        "                _keepCategoriesCSV = csv;",
        "                Logger.Info(this,\"Updateing winners from CSV\");",
        "",
        "                if (csv != \"\") {",
        "                    var lineStrings = SplitCSV(csv);",
        "                    var keyIds = KeysFromHeadline(lineStrings[0]);",
        "                    if (!keyIds.ContainsKey(\"CategoryID\") || !keyIds.ContainsKey(\"WinnerID\")) {",
        "                        Logger.Warn(this,\"Invalid category csv fileformat. CategoryID or WinnerID not found\");",
        "                        InvalidData = true;",
        "                    }",
        "                    else {",
        "",
        "                        Dictionary<string, string> categoryWinnerIds = new Dictionary<string, string>();",
        "",
        "                        for (int i = 1; i < lineStrings.Count; i++) {",
        "                            var ls = lineStrings[i];",
        "                            string catId = ls[keyIds[\"CategoryID\"]];",
        "                            string winnerId = ls[keyIds[\"WinnerID\"]];",
        "                            categoryWinnerIds[catId] = winnerId;",
        "                        }",
        "",
        "                        foreach (var c in CategoriesAndNominees) {",
        "                            if (categoryWinnerIds.ContainsKey(c.FileName)) {",
        "                                int id = 0;",
        "                                foreach (var n in c.Nominees) {",
        "                                    if (n.FileName == categoryWinnerIds[c.FileName]) {",
        "                                        break;",
        "                                    }",
        "                                    else {",
        "                                        id++; ",
        "                                    }",
        "                                }",
        "                                if (id < c.Nominees.Count) {",
        "                                    c.Winner = id;",
        "                                }",
        "                                else {",
        "                                    Logger.Warn(this,String.Format(\"WinnerID {0} not found in Category {1}\", categoryWinnerIds[c.FileName], c.FileName));",
        "                                    InvalidData = true;",
        "                                }",
        "                            }",
        "                        }",
        "                    }",
        "                }",
        "                Logger.Info(this,\"...completed\");",
        "            }",
        "        }",
        "        */",
        "        ",
        "        string _oldURL = \"\"; ",
        "        string _content =\"bla\";",
        "        float _lastUpdate = 0;",
        "    }",
        "    ",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9386b4a4-76cb-4abd-8362-a6a7707d1767",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4d0b0731-5ef0-4ebc-8164-ac4db0feb2d0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e7fbfbf1-45a9-4a6f-9b32-23c88ecca4d3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9386b4a4-76cb-4abd-8362-a6a7707d1767"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d0102432-f138-49af-9a66-9fea11d0c9e5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9386b4a4-76cb-4abd-8362-a6a7707d1767"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "57712936-7c44-4ab9-9151-341218aec86d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9386b4a4-76cb-4abd-8362-a6a7707d1767"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96269294-6604-4fe0-97b7-4010177cb161",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9386b4a4-76cb-4abd-8362-a6a7707d1767"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dfce674f-9bb1-4a8b-978b-32f8360ebb67",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9386b4a4-76cb-4abd-8362-a6a7707d1767"
    }
  ]
}