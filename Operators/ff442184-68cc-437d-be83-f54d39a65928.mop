{
  "Name": "ReplicateWithMidiNote",
  "_id": "ff442184-68cc-437d-be83-f54d39a65928",
  "Namespace": "projects.parnassum.research",
  "Description": "Create dummy geometry to visualice note events in a midi-file.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "772922da-1727-4d4b-a2e5-11a904a26700",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "//>>> _parameters\r",
          "float ScaleY;",
          "//<<< _parameters\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samPoint\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>> VS\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    float4x4 instanceToWorldMatrix = float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "                                                  \r",
          "    uint Width;\r",
          "    uint Height;\r",
          "    //DisplaceMap.GetDimensions(Width, Height);    \r",
          "    float4 worldTPos = mul(float4(0, 0, 0, 1), instanceToWorldMatrix);\r",
          "\r",
          "    //float2 displaceTexCoord = ((worldTPos.xy) / Count / Spacing ) * float2(1,-1) - float2(0.5,0.5);\r",
          "\r",
          "    /* Note: You can't use a simple Sample() call in the vertex shader as\r",
          "       it doesn't know what mipmap level to sample from, so the data coming \r",
          "       back can't really be a float 4.*/\r",
          "    //float4 sample0= DisplaceMap.SampleLevel(samPoint, displaceTexCoord, 0);\r",
          "    \r",
          "\t//float4 displaceSample = sample0;\r",
          "\r",
          "    //float finalRotate = displaceSample.b * 2 * 3.14159265f / 360.0f * DisplaceRotate + InitialRotate * 2 * 3.14159265f / 360.0f;\r",
          "\r",
          "\r",
          "    //float4x4 scaleTransform;\r",
          "    //float2 scale = clamp(InitialScale - InitialScale* DisplaceScale * (displaceSample.rg), Shrinking, 1000 );\r",
          "    \r",
          "\r",
          "    //input.pos = mul(input.pos, scaleTransform);\r",
          "    \r",
          "    //input.pos = mul(input.pos, rotateTransform);\r",
          "    input.pos = mul(input.pos, instanceToWorldMatrix);\r",
          "    input.pos = mul(input.pos, objectToWorldMatrix);\r",
          "    \r",
          "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    \r",
          "    //output.vertexColor =  lerp(input.col, sample0, 0.6);\r",
          "    output.texCoord = mul(float4(input.texCoord.xy, 0, 1), textureMatrix).xy;\r",
          "\r",
          "\r",
          "    output.normal = mul(input.normal, (float3x3)objectToWorldMatrix);\r",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "\r",
          "    return output;    \r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation * baseColor;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    //return input.vertexColor;\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords);\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SceneInput",
      "MetaInstanceID": "616ce23d-ad27-4ad1-a956-d62492df09b0",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleY",
      "MetaInstanceID": "b48a0588-1c46-4c97-84d3-22c71a0c9373",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FilePath",
      "MetaInstanceID": "d3d17d39-2642-42c9-8d4c-d1647fa14800",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeRate",
      "MetaInstanceID": "6838cf95-fffb-4835-a577-a77c97f5fdec",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeOffset",
      "MetaInstanceID": "c7cdb28c-b3c5-4259-be30-ccc68925cfed",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "78cf850b-30f2-4611-87f9-830a6b2bcd84",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "7c9d0f98-f670-4689-a498-32bccc254ac6",
      "MetaID": "47d6c84b-7429-4dc4-9dd4-67147a99a66c",
      "Name": "ReplicateWithMidiNoteFunc",
      "Version": "90b23723-3669-44bb-b9e0-92188af03dc4",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "using NAudio.Midi;",
        "using System.IO;",
        "",
        "namespace Framefield.Core.ID47d6c84b_7429_4dc4_9dd4_67147a99a66c",
        "{",
        "    public class Class_ReplicateWithMidiNote : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_ReplicateWithMidiNote()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            SceneInput = 1,",
        "            ScaleY = 2,",
        "            FilePath = 3,",
        "            TimeRate = 4,",
        "            TimeOffset = 5",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        struct MidiNote",
        "        {",
        "            public double StartTime;",
        "            public double Duration;",
        "            public int NoteNumber;",
        "            public int Channel;",
        "            public int Velocity;",
        "            public int TrackId;",
        "        }",
        "",
        "        private NAudio.Midi.MidiFile _midiFile;",
        "        private double _lastTime;",
        "        private int _track;",
        "        private int _trackCount;",
        "        private bool _firstEval = true;",
        "        private string _filePath;",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "        ",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var SceneInput = inputs[(int)InputId.SceneInput];",
        "            var ScaleY = inputs[(int)InputId.ScaleY].Eval(context).Value;",
        "            var FilePath = inputs[(int)InputId.FilePath].Eval(context).Text;",
        "            var TimeRate = inputs[(int)InputId.TimeRate].Eval(context).Value;",
        "            var TimeOffset = inputs[(int)InputId.TimeOffset].Eval(context).Value;",
        "            //<<< _params        ",
        "",
        "            if (SceneInput.Connections.Count == 0)",
        "            {",
        "                return context;",
        "            }",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "",
        "            //var meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "            _meshCollector.Clear();",
        "            SceneInput.TraverseWithFunction(_meshCollector, null);",
        "            var meshSupplier = _meshCollector.CollectedOpPartFunctions.FirstOrDefault();",
        "            if (meshSupplier == null)",
        "            {",
        "                Logger.Error(this,\"Found no mesh supplier, have you forgotten to add an input?\");",
        "                return context;",
        "            }",
        "            var meshes = new List<Mesh>();",
        "            meshSupplier.AddMeshesTo(meshes);",
        "            if (meshes.Count != 1)",
        "            {",
        "                Logger.Error(this,\"Found more or less than 1 mesh\");",
        "                return context;",
        "            }",
        "            var instancedMesh = meshes[0];",
        "",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            var numInstances = 100;",
        "            ",
        "            // Load midifile",
        "            //if( FilePath == _filePath)",
        "            //    return context;",
        "            ",
        "            _filePath = FilePath;",
        "",
        "            if (!File.Exists(_filePath))",
        "            {",
        "                Logger.Info(\"Can't find midifile {0}\", _filePath);",
        "                return context;",
        "            }",
        "",
        "            _midiFile = new MidiFile(_filePath);",
        "",
        "            _trackCount = _midiFile.Tracks;",
        "",
        "",
        "            var playedNoteEvents = new List<NoteOnEvent>();",
        "",
        "            var notes = new List<MidiNote>();",
        "",
        "            double ppqn = TimeRate;",
        "",
        "            if ( _midiFile != null)",
        "            {",
        "                //Logger.Info(\"Structure of MidiFile...\");",
        "                for (var trackIndex = 0; trackIndex < _trackCount; ++trackIndex)",
        "                {",
        "                    var events = _midiFile.Events.GetTrackEvents(trackIndex);",
        "                    foreach (var e in events)",
        "                    {",
        "                        if (e.CommandCode == MidiCommandCode.NoteOn) {",
        "                            var noteOn = e as NoteOnEvent;",
        "                            notes.Add(new MidiNote()",
        "                            {",
        "                                TrackId = trackIndex,",
        "                                StartTime = (double)e.AbsoluteTime / ppqn,",
        "                                Channel = e.Channel,",
        "                                NoteNumber = noteOn.NoteNumber,",
        "                                Duration = (double)noteOn.NoteLength,",
        "                                Velocity = noteOn.Velocity",
        "                            });",
        "",
        "                            //playedNoteEvents.Add(noteOn);",
        "                        }",
        "                        else if (e.CommandCode == MidiCommandCode.NoteOff) {",
        "                        }",
        "                        else if(e.CommandCode == MidiCommandCode.ControlChange) {",
        "                            //Logger.Info(\"{0}\", e);",
        "                            var t = e.AbsoluteTime;",
        "                            var cce = e as ControlChangeEvent;",
        "                        }",
        "                        else if(e.CommandCode == MidiCommandCode.MetaEvent)",
        "                        {",
        "                            var timeEvent = e as TimeSignatureEvent;",
        "                            if (timeEvent != null)",
        "                            {",
        "                                //Logger.Info(\"Time Event: {0}\", timeEvent);",
        "                                continue;",
        "                            }",
        "",
        "                            var setTempoEvent = e as TempoEvent;",
        "                            if (setTempoEvent != null)",
        "                            {",
        "                                Logger.Info(\"TempoEvent: {0}\", e);",
        "                                ppqn = setTempoEvent.Tempo * 4;",
        "                                //ppqn = setTempoEvent.MicrosecondsPerQuarterNote/1000f*2 ;",
        "                                continue;",
        "                            }",
        "",
        "                            //Logger.Info(\"Command code: {0}\", e);                                            ",
        "                        }",
        "                        else {",
        "                            //Logger.Info(\"more: {0}\", e);",
        "                            continue;",
        "                        }",
        "",
        "                        //var noteTime = (e.AbsoluteTime / TimeRate )-TimeOffset;                        ",
        "                        //Logger.Info(\"\"+noteTime);",
        "                        //if (noteTime < _lastTime || noteTime > context.Time)",
        "                        //    continue;",
        "",
        "                        //Logger.Info(\"here2\");",
        "                        //break;                            ",
        "                    }",
        "                }",
        "            }",
        "",
        "",
        "",
        "            if (notes.Count <= 0) {",
        "                return context;",
        "            }",
        "            numInstances = notes.Count;",
        "            notes.Sort((s1, s2) => s1.StartTime.CompareTo(s2.StartTime));            ",
        "",
        "            var streamSize = numInstances * instanceDataSize;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, instanceDataSize);",
        "            }",
        "",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "                var countInstances = 0;",
        "                for (var index = 0; index < (int)numInstances; ++index)",
        "                {",
        "                    var note = notes[index]; //playedNoteEvents[numInstances-index-1];",
        "                            ",
        "                    Matrix transform;                        ",
        "                    Vector3 t = new Vector3();",
        "",
        "                    //var noteTime = (note.AbsoluteTime / TimeRate )-TimeOffset;",
        "",
        "                    t = new Vector3((float) (note.StartTime),",
        "                                    (float) (ScaleY * note.NoteNumber),",
        "                                    (float) (note.TrackId*2));",
        "                    transform = Matrix.Identity;",
        "                        ",
        "                    var scale =  note.Velocity * (0.05f) + 0.001f;",
        "                    var length = (float)(note.Duration/100f + 0.02f);",
        "                    transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(length, 1, scale), new Vector3(), new Quaternion(), t);",
        "                    transform *= prevTransform; ",
        "",
        "                    instanceDataStream.Write(transform);",
        "                    countInstances ++;",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                }",
        "",
        "                if (context.DepthStencilState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                }",
        "",
        "                if (context.RasterizerState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                }",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { context.Viewport });",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { instancedMesh.Vertices, _instanceDataBuffer}, new [] {76, instanceDataSize}, new [] {0,0} );",
        "",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "                                ",
        "                //_effect.GetVariableByName(\"DisplaceMap\").AsShaderResource().SetResource(DisplaceMapView);",
        "                //var DisplaceMapView = new ShaderResourceView(context.D3DDevice, DisplaceMap);",
        "                //_effect.GetVariableByName(\"InitialScale\").AsVector().Set(new Vector2(InitialScaleX, InitialScaleY));",
        "                    ",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles*3, numInstances, 0, 0);",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this,\"GridWidthDisplace - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "",
        "            return context;",
        "        }",
        "",
        "",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements = new []",
        "                                                                {",
        "                                                                    new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                                                    new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                                                    new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                                                    new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                                                    new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                                                    new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "Libs/NAudio.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "772922da-1727-4d4b-a2e5-11a904a26700",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "616ce23d-ad27-4ad1-a956-d62492df09b0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b48a0588-1c46-4c97-84d3-22c71a0c9373",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d3d17d39-2642-42c9-8d4c-d1647fa14800",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6838cf95-fffb-4835-a577-a77c97f5fdec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c7cdb28c-b3c5-4259-be30-ccc68925cfed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7c9d0f98-f670-4689-a498-32bccc254ac6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "78cf850b-30f2-4611-87f9-830a6b2bcd84"
    }
  ]
}