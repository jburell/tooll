{
  "Name": "GridWithDisplace",
  "_id": "7041b4d2-ee87-4909-b4e8-3866b89b7143",
  "Namespace": "projects.igravity.shaders",
  "Description": "Instanciates the incoming geometry.\r\n\r\nDisplacement ment: Black does nothing; White affects displace scale and rotate.\r\n\r\nImportant! This   uses PhongShading and thus requires at least one [PointLight], otherwise the result wil be a black geometry. ",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "614e0df4-1282-44ff-9193-0af31ebe0e50",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "//>>> _parameters\r",
          "float2 Count;",
          "float2 Spacing;",
          "float2 InitialScale;",
          "float2 DisplaceScale;",
          "float InitialRotate;",
          "float DisplaceRotate;",
          "Texture2D DisplaceMap;",
          "float Pattern;",
          "float Shrinking;",
          "//<<< _parameters\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samPoint\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>> VS\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    float4x4 instanceToWorldMatrix = float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "                                                  \r",
          "    uint Width;\r",
          "    uint Height;\r",
          "    DisplaceMap.GetDimensions(Width, Height);    \r",
          "    float4 worldTPos = mul(float4(0, 0, 0, 1), instanceToWorldMatrix);\r",
          "\r",
          "    float2 displaceTexCoord = ((worldTPos.xy) / Count / Spacing ) * float2(1,-1) - float2(0.5,0.5);\r",
          "\r",
          "    /* Note: You can't use a simple Sample() call in the vertex shader as\r",
          "       it doesn't know what mipmap level to sample from, so the data coming \r",
          "       back can't really be a float 4.*/\r",
          "    float4 sample0= DisplaceMap.SampleLevel(samPoint, displaceTexCoord, 0);\r",
          "    \r",
          "\tfloat4 displaceSample = sample0;\r",
          "\r",
          "    float finalRotate = displaceSample.b * 2 * 3.14159265f / 360.0f * DisplaceRotate + InitialRotate * 2 * 3.14159265f / 360.0f;\r",
          "\r",
          "    float4x4 rotateTransform;\r",
          "    rotateTransform[0].xyzw =  float4(cos(finalRotate), sin(finalRotate), 0, 0);\r",
          "    rotateTransform[1].xyzw =  float4(-sin(finalRotate), cos(finalRotate), 0, 0);\r",
          "    rotateTransform[2].xyzw = float4(0, 0, 1, 0);\r",
          "    rotateTransform[3].xyzw = float4(0, 0, 0, 1);\r",
          "\r",
          "    float4x4 scaleTransform;\r",
          "    float2 scale = clamp(InitialScale - InitialScale* DisplaceScale * (displaceSample.rg), Shrinking, 1000 );\r",
          "    \r",
          "    \r",
          "    scaleTransform[0].xyzw = float4(   scale.x, 0, 0, 0);\r",
          "    scaleTransform[1].xyzw = float4(0, scale.y, 0, 0);\r",
          "    scaleTransform[2].xyzw = float4(0, 0, (scale.x+scale.y)/2, 0);\r",
          "    scaleTransform[3].xyzw = float4(0, 0, 0, 1);\r",
          "\r",
          "    input.pos = mul(input.pos, scaleTransform);\r",
          "    \r",
          "    input.pos = mul(input.pos, rotateTransform);\r",
          "    input.pos = mul(input.pos, instanceToWorldMatrix);\r",
          "    input.pos = mul(input.pos, objectToWorldMatrix);\r",
          "    \r",
          "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    \r",
          "    output.vertexColor =  lerp(input.col, sample0, 0.6);    \r",
          "    output.texCoord = mul(float4(input.texCoord.xy, 0, 1), textureMatrix).xy;\r",
          "\r",
          "\r",
          "    output.normal = mul(input.normal, (float3x3)objectToWorldMatrix);\r",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "\r",
          "    return output;    \r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation * baseColor;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    //return input.vertexColor;\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords);\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SceneInput",
      "MetaInstanceID": "742338d2-9f5c-4191-a3e6-4766f29fbb48",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.Columns",
      "MetaInstanceID": "63769c58-7541-405a-a90e-18527303236d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "1000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.Rows",
      "MetaInstanceID": "e56616fe-e0ba-4e54-8dae-61f8c1759a60",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "1000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spacing.X",
      "MetaInstanceID": "45419efa-5c19-4e7a-a00a-722036fca948",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spacing.Y",
      "MetaInstanceID": "c5897699-c442-4fcc-ae0c-f6ef5e9a0c4d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InitialScale.X",
      "MetaInstanceID": "e9df3d2b-3a76-4379-ade1-3ee344988396",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.02",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InitialScale.Y",
      "MetaInstanceID": "cd3c6d56-d412-4e48-8777-b941b74f04b1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.02",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceScale.X",
      "MetaInstanceID": "422e2bf5-b4a0-4ad6-a6ee-1e98f49e054d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.02",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceScale.Y",
      "MetaInstanceID": "6854d590-f477-4f38-98bd-0f92d75ea61f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.02",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InitialRotate",
      "MetaInstanceID": "850b27da-5138-4357-af7b-21deeca84e5e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceRotate",
      "MetaInstanceID": "d1e8cc32-58b7-4414-beef-b4ddeba543fd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceMap",
      "MetaInstanceID": "f55fefc2-04eb-4a84-9182-88bd1f066174",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pattern",
      "MetaInstanceID": "d388c02c-e784-402e-b616-f4bd99dc84c3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Grid",
          "Value": "0"
        },
        {
          "Name": "Diagonal",
          "Value": "1"
        },
        {
          "Name": "Triangular",
          "Value": "2"
        },
        {
          "Name": "Sunflower",
          "Value": "3"
        }
      ]
    },
    {
      "Name": "Shrinking",
      "MetaInstanceID": "f7accb58-4217-4f61-b1f9-f6ee62959935",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "NoBackFlipping",
          "Value": "0"
        },
        {
          "Name": "AllowFlipping",
          "Value": "-1000"
        }
      ]
    },
    {
      "Name": "Spiral.Offset",
      "MetaInstanceID": "3bd0043d-c080-468a-9256-95fd8a02190c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spiral.Spin",
      "MetaInstanceID": "f3ef59e2-4bcf-4f76-ade3-b51558fda670",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "60e15826-26c2-4467-aa7e-aaecc05cde42",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "4342f106-359d-4cb0-929b-c7ae481f27a4",
      "MetaID": "b2865c6d-64e3-4b32-867c-fcafaefd28e3",
      "Name": "GridWithDisplaceFunc",
      "Version": "9e98539e-10ac-428e-8209-260330933519",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDb2865c6d_64e3_4b32_867c_fcafaefd28e3",
        "{",
        "    public class Class_GridWithDisplace : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_GridWithDisplace()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            SceneInput = 1,",
        "            CountColumns = 2,",
        "            CountRows = 3,",
        "            SpacingX = 4,",
        "            SpacingY = 5,",
        "            InitialScaleX = 6,",
        "            InitialScaleY = 7,",
        "            DisplaceScaleX = 8,",
        "            DisplaceScaleY = 9,",
        "            InitialRotate = 10,",
        "            DisplaceRotate = 11,",
        "            DisplaceMap = 12,",
        "            Pattern = 13,",
        "            Shrinking = 14,",
        "            SpiralOffset = 15,",
        "            SpiralSpin = 16",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "        ",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var SceneInput = inputs[(int)InputId.SceneInput];",
        "            var CountColumns = inputs[(int)InputId.CountColumns].Eval(context).Value;",
        "            var CountRows = inputs[(int)InputId.CountRows].Eval(context).Value;",
        "            var Count = new Vector2(CountColumns, CountRows);",
        "            var SpacingX = inputs[(int)InputId.SpacingX].Eval(context).Value;",
        "            var SpacingY = inputs[(int)InputId.SpacingY].Eval(context).Value;",
        "            var Spacing = new Vector2(SpacingX, SpacingY);",
        "            var InitialScaleX = inputs[(int)InputId.InitialScaleX].Eval(context).Value;",
        "            var InitialScaleY = inputs[(int)InputId.InitialScaleY].Eval(context).Value;",
        "            var InitialScale = new Vector2(InitialScaleX, InitialScaleY);",
        "            var DisplaceScaleX = inputs[(int)InputId.DisplaceScaleX].Eval(context).Value;",
        "            var DisplaceScaleY = inputs[(int)InputId.DisplaceScaleY].Eval(context).Value;",
        "            var DisplaceScale = new Vector2(DisplaceScaleX, DisplaceScaleY);",
        "            var InitialRotate = inputs[(int)InputId.InitialRotate].Eval(context).Value;",
        "            var DisplaceRotate = inputs[(int)InputId.DisplaceRotate].Eval(context).Value;",
        "            var DisplaceMap = inputs[(int)InputId.DisplaceMap].Eval(context).Image; // Needs to be checked for null!",
        "            var Pattern = (int) inputs[(int)InputId.Pattern].Eval(context).Value;",
        "            var Shrinking = (int) inputs[(int)InputId.Shrinking].Eval(context).Value;",
        "            var SpiralOffset = inputs[(int)InputId.SpiralOffset].Eval(context).Value;",
        "            var SpiralSpin = inputs[(int)InputId.SpiralSpin].Eval(context).Value;",
        "            var Spiral = new Vector2(SpiralOffset, SpiralSpin);",
        "            //<<< _params        ",
        "",
        "            if (SceneInput.Connections.Count == 0)",
        "            {",
        "                return context;",
        "            }",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "",
        "            //var meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "            _meshCollector.Clear();",
        "            SceneInput.TraverseWithFunction(_meshCollector, null);",
        "            var meshSupplier = _meshCollector.CollectedOpPartFunctions.FirstOrDefault();",
        "            if (meshSupplier == null)",
        "            {",
        "                Logger.Error(this,\"Found no mesh supplier, have you forgotten to add an input?\");",
        "                return context;",
        "            }",
        "            var meshes = new List<Mesh>();",
        "            meshSupplier.AddMeshesTo(meshes);",
        "            if (meshes.Count != 1)",
        "            {",
        "                Logger.Error(this,\"Found more or less than 1 mesh\");",
        "                return context;",
        "            }",
        "            var instancedMesh = meshes[0];",
        "",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            var numInstances = (int) CountColumns * (int)CountRows;",
        "            ",
        "            if(Pattern == 1) { // Grid",
        "                numInstances = (int) CountColumns * (int)CountRows / 2;",
        "            }",
        "                        ",
        "            if (numInstances <0) {",
        "                return context;",
        "            }            ",
        "            ",
        "            var streamSize = numInstances * instanceDataSize;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, instanceDataSize);",
        "            }",
        "",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "                var countInstances = 0;",
        "                for (var row = 0; row < (int)CountRows; ++row)",
        "                {",
        "                    for (var column = 0; column < (int)CountColumns; ++column) {",
        "                    ",
        "                        bool isOdd = (column + row) %2 >0;",
        "                        if( (isOdd && Pattern == 1) || countInstances >= numInstances ) ",
        "                            continue;",
        "                            ",
        "                        Matrix transform;                        ",
        "                        Vector3 t = new Vector3();",
        "                        ",
        "                        // Triangular-pattern",
        "                        if(Pattern == 2)",
        "                        {",
        "                            var triangleOffset= (Pattern == 2 && isOdd)",
        "                                                ? (float)(0.331 * SpacingY) ",
        "                                                : 0;",
        "                            t = new Vector3((float) ((column - CountColumns/2 + 0.5) * SpacingX * (0.581)),",
        "                                            (float) ((row - CountRows/2 + 0.5) * SpacingY + triangleOffset),",
        "                                            (float) (0));",
        "                            var rotateAroundZ = isOdd ? 120*3.141578 / 360 :0;",
        "                            transform = Matrix.RotationZ((float)rotateAroundZ);",
        "",
        "                        }",
        "                        // Spiral",
        "                        else if (Pattern == 3) {",
        "                            var n = column + row * (int)CountColumns + 3;",
        "                            ",
        "                            var angle =  (double)n * (137.5096 + (double)SpiralOffset / 100.0) + SpiralSpin * Math.PI/180; //137.508;",
        "                            var radius = (double)Spacing.X * Math.Sqrt(n);",
        "                            t = new Vector3((float) ( Math.Sin( angle) * radius )  ,",
        "                                            (float) ( Math.Cos( angle) * radius),",
        "                                            (float) (0));",
        "                            var rotateAroundZ = -angle;",
        "                            transform = Matrix.RotationZ((float)rotateAroundZ);",
        "                            //transform = Matrix.Identity;",
        "                        ",
        "                        }",
        "                        // Grid",
        "                        else {",
        "                            t = new Vector3((float) ((column - CountColumns/2 + 0.5) * SpacingX),",
        "                                            (float) ((row - CountRows/2 + 0.5)* SpacingY),",
        "                                            (float) (0));",
        "                            transform = Matrix.Identity;",
        "                        }",
        "                        ",
        "                                                ",
        "                        transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                        transform *= prevTransform; ",
        "",
        "                        instanceDataStream.Write(transform);",
        "                        countInstances ++;",
        "                    }",
        "               }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                }",
        "",
        "                if (context.DepthStencilState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                }",
        "",
        "                if (context.RasterizerState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                }",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { context.Viewport });",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { instancedMesh.Vertices, _instanceDataBuffer}, new [] {76, instanceDataSize}, new [] {0,0} );",
        "",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "                ",
        "                ",
        "                //_effect.GetVariableByName(\"DisplaceMap\").AsShaderResource().SetResource(DisplaceMapView);",
        "                    var DisplaceMapView = new ShaderResourceView(context.D3DDevice, DisplaceMap);",
        "                    _effect.GetVariableByName(\"DisplaceMap\").AsShaderResource().SetResource(DisplaceMapView);                    ",
        "                    _effect.GetVariableByName(\"InitialRotate\").AsScalar().Set(InitialRotate);",
        "                    _effect.GetVariableByName(\"DisplaceRotate\").AsScalar().Set(DisplaceRotate);",
        "                    _effect.GetVariableByName(\"InitialScale\").AsVector().Set(new Vector2(InitialScaleX, InitialScaleY));",
        "                    _effect.GetVariableByName(\"DisplaceScale\").AsVector().Set(new Vector2(DisplaceScaleX, DisplaceScaleY));",
        "                    _effect.GetVariableByName(\"Spacing\").AsVector().Set(new Vector2(SpacingX, SpacingY));",
        "                    _effect.GetVariableByName(\"Count\").AsVector().Set(new Vector2(CountColumns, CountRows));",
        "                    _effect.GetVariableByName(\"Shrinking\").AsScalar().Set(Shrinking);",
        "                    ",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles*3, numInstances, 0, 0);",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this,\"GridWidthDisplace - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "",
        "            return context;",
        "        }",
        "",
        "",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements = new []",
        "                                                                {",
        "                                                                    new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                                                    new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                                                    new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                                                    new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                                                    new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                                                    new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "614e0df4-1282-44ff-9193-0af31ebe0e50",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "742338d2-9f5c-4191-a3e6-4766f29fbb48",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "63769c58-7541-405a-a90e-18527303236d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e56616fe-e0ba-4e54-8dae-61f8c1759a60",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "45419efa-5c19-4e7a-a00a-722036fca948",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c5897699-c442-4fcc-ae0c-f6ef5e9a0c4d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e9df3d2b-3a76-4379-ade1-3ee344988396",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cd3c6d56-d412-4e48-8777-b941b74f04b1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "422e2bf5-b4a0-4ad6-a6ee-1e98f49e054d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6854d590-f477-4f38-98bd-0f92d75ea61f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "850b27da-5138-4357-af7b-21deeca84e5e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1e8cc32-58b7-4414-beef-b4ddeba543fd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f55fefc2-04eb-4a84-9182-88bd1f066174",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d388c02c-e784-402e-b616-f4bd99dc84c3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f7accb58-4217-4f61-b1f9-f6ee62959935",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3bd0043d-c080-468a-9256-95fd8a02190c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f3ef59e2-4bcf-4f76-ade3-b51558fda670",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4342f106-359d-4cb0-929b-c7ae481f27a4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "60e15826-26c2-4467-aa7e-aaecc05cde42"
    }
  ]
}