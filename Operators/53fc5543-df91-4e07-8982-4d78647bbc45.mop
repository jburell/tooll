{
  "Name": "Swell",
  "_id": "53fc5543-df91-4e07-8982-4d78647bbc45",
  "Namespace": "lib.math.helper",
  "Description": "increases the output value linear from current outptu value to 1 if the input is triggered up.\r\ndecreases the output value linear from current output value to 0 if the input is triggered down.",
  "Inputs": [
    {
      "Name": "InputTrigger",
      "MetaInstanceID": "9f6e136a-2afc-4bf9-b5a8-45cce6206b42",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Value",
      "MetaInstanceID": "82ad3c7d-b2d4-40bf-9138-49ae2a3c21cc",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "eb5205cb-e6ea-41ea-addd-695556f06cec",
      "MetaID": "82fa0adc-4f9b-4546-8086-c1753f068ff3",
      "Name": "SwellFunc",
      "Version": "62f8b3af-305d-4be9-877f-2336c509740d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID82fa0adc_4f9b_4546_8086_c1753f068ff3",
        "{",
        "    public class Class_Swell : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            InputTrigger = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var InputTrigger = inputs[(int)InputId.InputTrigger].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (context.Time < _triggerUpTime || context.Time < _triggerDownTime)",
        "            {",
        "                //reset values to be on 'falling' ramp",
        "                _triggerUpTime = context.Time - 2;",
        "                _lastUpMappedTime = 0;",
        "                _triggerDownTime = context.Time - 1;",
        "                _lastDownMappedTime = 0;",
        "                _oldInputTrigger = 0;",
        "            }",
        "",
        "            bool inputTriggerUp = _oldInputTrigger < 0.5f && InputTrigger > 0.5f;",
        "            bool inputTriggerDown = _oldInputTrigger > 0.5f && InputTrigger < 0.5f;",
        "            _oldInputTrigger = InputTrigger;",
        "            if (inputTriggerUp)",
        "            {",
        "                _triggerUpTime = context.Time;",
        "                _lastUpMappedTime = 0;",
        "            }",
        "            if (inputTriggerDown)",
        "            {",
        "                _triggerDownTime = context.Time;",
        "                _lastDownMappedTime = 0;",
        "            }",
        "",
        "            float mappedTime = 0;",
        "            if (_triggerDownTime <= _triggerUpTime)",
        "            {",
        "                //raising",
        "                mappedTime = _lastDownMappedTime + context.Time - _triggerUpTime;",
        "                _lastUpMappedTime = Utilities.Clamp(mappedTime, 0.0f, 1.0f);",
        "            }",
        "            else",
        "            {",
        "                //falling",
        "                mappedTime = _lastUpMappedTime - (context.Time - _triggerDownTime);",
        "                _lastDownMappedTime = Utilities.Clamp(mappedTime, 0.0f, 1.0f);",
        "            }",
        "            ",
        "            context.Value = TimeToValueFunction(mappedTime);",
        "            return context;",
        "        }",
        "        ",
        "        float TimeToValueFunction(float time)",
        "        {",
        "            return Utilities.Clamp(time, 0.0f, 1.0f);",
        "        }",
        "",
        "        float _oldInputTrigger;",
        "        float _triggerUpTime = 99999;",
        "        float _lastUpMappedTime = 0;",
        "        float _triggerDownTime = 99999;",
        "        float _lastDownMappedTime = 0;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9f6e136a-2afc-4bf9-b5a8-45cce6206b42",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "eb5205cb-e6ea-41ea-addd-695556f06cec"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eb5205cb-e6ea-41ea-addd-695556f06cec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "82ad3c7d-b2d4-40bf-9138-49ae2a3c21cc"
    }
  ]
}