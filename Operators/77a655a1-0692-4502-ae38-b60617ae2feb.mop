{
  "Name": "GodRays",
  "_id": "77a655a1-0692-4502-ae38-b60617ae2feb",
  "Namespace": "lib.image.effect",
  "Description": "Radial blur with depth mask. This requires a connection to a [PointLight].\r\n\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "614d73ca-cc87-4275-9eb0-b6020b27f17d",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> __parameters\r",
          "Texture2D Image;",
          "float Strength;",
          "float Decay;",
          "float Size;",
          "float NumberOfSamples;",
          "float3 Center;",
          "float4 Color;",
          "//<<< __parameters\r",
          "Texture2D txDepth;\r",
          "float4x4 viewToWorld;\r",
          "float4x4 previousWorldToView;\r",
          " \r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> VS \r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
          "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = input.texCoord;\r",
          "\r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "//>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "    float depth = txDepth.Sample(samLinear, input.texCoord).r;\r",
          "    //if (depth > 0.99999)\r",
          "    //    return c;\r",
          "\r",
          "    //float4 viewTFragPos = float4(-input.texCoord.x*2.0 + 1.0, input.texCoord.y*2.0 - 1.0, depth, 1.0);\r",
          "    //float4 worldTFragPos = mul(viewTFragPos, viewToWorld);\r",
          "    //worldTFragPos /= worldTFragPos.w;\r",
          "\r",
          "    //float4 viewTPreviousFragPos = mul(worldTFragPos, previousWorldToView);\r",
          "    //viewTPreviousFragPos /= viewTPreviousFragPos.w;\r",
          "  \r",
          "    //float2 velocity = (viewTFragPos.xy - viewTPreviousFragPos.xy)*Strength;\r",
          "    //float2 velocity = float2(0, 1/depth / Strength);\r",
          "    float2 velocity = (input.texCoord - Center.xy) * Size;\r",
          "    \r",
          "    //velocity.x = -velocity.x;\r",
          "    if (abs(velocity.x) < 0.0001)\r",
          "        velocity.x = 0.0;\r",
          "    if (abs(velocity.y) < 0.0001)\r",
          "        velocity.y = 0.0;\r",
          "\r",
          "    //float l = length(velocity)*Size;\r",
          "    //if (l > 0 && l > Size)\r",
          "    //    velocity *= Size/l;\r",
          "\r",
          "    float2 dir = velocity*10.0/NumberOfSamples;\r",
          "    float2 pos = dir;\r",
          "    float totalWeight = 1;\r",
          "    float f=0;\r",
          "    float distanceToCenter;\r",
          "    for (int i = 0; i < NumberOfSamples; ++i)\r",
          "    {\r",
          "        \r",
          "        float index = (float)i*(NUMWT - 1)/NumberOfSamples;        \r",
          "        float weight = lerp(Gauss[(int)index], Gauss[(int)index + 1], frac(index));\r",
          "\r",
          "        //float2 p1= input.texCoord + pos;\r",
          "        //if( p1.y> 0 && p1.y<1 &&   txDepth.SampleLevel(samLinear, p1,0).r > Center.z) {\r",
          "        //    //c += Image.SampleLevel(samLinear, input.texCoord + pos, 0)*weight;\r",
          "        //    distanceToCenter = length(p1 - Center.xy);              \r",
          "        //    c+= float4(1,1,1,1)/distanceToCenter * Clamp_;\r",
          "        //}\r",
          "\r",
          "        float2 p2= input.texCoord - pos;\r",
          "        \r",
          "        \r",
          "        if( p2.y> 0 && p2.y<1) {\r",
          "            float depth2=txDepth.SampleLevel(samLinear, p2 ,0).r;\r",
          "            if(1/(1-depth2) > Center.z) {\r",
          "                //c += Image.SampleLevel(samLinear, input.texCoord + pos, 0)*weight;\r",
          "                distanceToCenter = Strength/ (length(p2 - Center.xy) *  pow(10,Decay) + 1);\r",
          "                c+= Color*distanceToCenter;\r",
          "            }\r",
          "        }\r",
          "\r",
          "\r",
          "        //distanceToCenter = length(input.texCoord + pos - Center.xy);              \r",
          "        //if( txDepth.SampleLevel(samLinear, input.texCoord - pos,0).r < Center.z)\r",
          "        //    c += Image.SampleLevel(samLinear, input.texCoord - pos, 0)*weight;\r",
          "        //if( txDepth.Sample(samLinear, input.texCoord + pos).r < Center.Z) \r",
          "        //    c += Image.SampleLevel(samLinear, input.texCoord - pos, 0)*weight;\r",
          "        \r",
          "        pos += dir;\r",
          "        totalWeight += weight;\r",
          "    }\r",
          "    c.rgb /= totalWeight;\r",
          "    c.a = 1.0;\r",
          "\r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "395a3e34-f84c-4358-94d0-4adfb26d689e",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "4345ccb9-84c3-46d1-bd0c-8c5c00b53b41",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Strength",
      "MetaInstanceID": "964b6c9e-3ca1-4b6e-a079-9b9aeaea99db",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Decay",
      "MetaInstanceID": "e96a70e0-7df2-40cf-9453-34baf52707f1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NumberOfSamples",
      "MetaInstanceID": "4214079e-b2ba-4a73-9970-76fc9cb235b7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "30"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "97351a40-c5c5-42b6-8ad5-6c984adf4ab3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "4221da8b-1903-4415-93d4-8478ee1556cf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "88c969bf-787e-4f14-84aa-0fee5ed99e8a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.9949991"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "0ba06bd0-b11a-4467-b86d-4055bbe11557",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.095001"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "4985d9a5-e9f4-4ed6-8bd4-49e73318f65d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "6fa8e58d-6df9-4dd2-91d9-672aa9bbd124",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "06ff61c3-07b2-4754-a52e-79f0acdbf811",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "b84eb923-13dc-43e7-9836-096b381ae7af",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "d8bd13f6-d151-4061-ab3e-178addbbf3fb",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c",
      "MetaID": "a5a0962c-cad1-47a9-9d12-e9ce42f61da5",
      "Name": "GodRaysFunc",
      "Version": "e2160d05-c2b8-40ed-acf9-1d0275da14b3",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "using SharpDX.D3DCompiler;",
        "using SharpDX.Direct3D; ",
        "using Framefield.Core.Rendering;",
        "",
        "namespace Framefield.Core.IDa5a0962c_cad1_47a9_9d12_e9ce42f61da5",
        "{",
        "    public class Class_GodRays : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Camera = 2,",
        "            Strength = 3,",
        "            Decay = 4,",
        "            NumberOfSamples = 5,",
        "            CenterX = 6,",
        "            CenterY = 7,",
        "            CenterZ = 8,",
        "            Size = 9,",
        "            ColorR = 10,",
        "            ColorG = 11,",
        "            ColorB = 12,",
        "            ColorA = 13",
        "        }",
        "        //<<< _inputids",
        "",
        "        protected override bool NeedsDepth { get { return false; } }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> __params",
        "                var imageInput = inputs[(int)InputId.Image].Eval(context);",
        "                var Strength = inputs[(int)InputId.Strength].Eval(context).Value;",
        "                var Decay = inputs[(int)InputId.Decay].Eval(context).Value;",
        "                var NumberOfSamples = inputs[(int)InputId.NumberOfSamples].Eval(context).Value;",
        "                var Camera = inputs[(int)InputId.Camera].Eval(context).Dynamic;",
        "                var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "                var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "                var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "                var Center = new Vector3(CenterX, CenterY, CenterZ);                ",
        "                var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "                var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "                var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "                var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "                var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "                var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "                //<<< __params",
        " ",
        "",
        "",
        "                var image = imageInput.Image;",
        "                var depthImage = imageInput.DepthImage;",
        "                if (image == null || depthImage == null || Camera == null)",
        "                {",
        "                    Logger.Error(this,\"{0}: conditions not fulfilled\", OperatorPart.Parent);",
        "                    return;",
        "                }",
        "                Framefield.Core.OperatorPartTraits.ICameraProvider camProvider = Camera.This as Framefield.Core.OperatorPartTraits.ICameraProvider;",
        "                if (camProvider == null)",
        "                {",
        "                    Logger.Error(this,\"{0}: camera not defined\", OperatorPart.Parent);",
        "                    return;",
        "                }",
        "",
        "                var viewToWorld = Matrix.Identity;",
        "                var previousWorldToView = Matrix.Identity;",
        "",
        "                var worldToCamera = camProvider.CalculateWorldToCamera(context);",
        "                var cameraToView = camProvider.CalculateCameraToView(context);",
        "                viewToWorld = Matrix.Invert(worldToCamera*cameraToView);",
        "",
        "                using (new PropertyStasher<OperatorPartContext>(context, \"Time\")) {",
        "                    context.Time -= 0.01f;",
        "                    var previousWorldToCamera = camProvider.CalculateWorldToCamera(context);",
        "                    var previousCameraToView = camProvider.CalculateCameraToView(context);",
        "                    previousWorldToView = previousWorldToCamera*previousCameraToView;",
        "                }",
        "",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                var shaderDesc = new ShaderResourceViewDescription();",
        "                shaderDesc.Format = Format.R32_Float;",
        "                shaderDesc.Dimension = ShaderResourceViewDimension.Texture2D;",
        "                shaderDesc.Texture2D.MipLevels = 1;",
        "",
        "                using (var depthTexture = new ShaderResourceView(context.D3DDevice, depthImage, shaderDesc))",
        "                //>>> __setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Strength\").AsScalar().Set(Strength);",
        "                    _effect.GetVariableByName(\"Decay\").AsScalar().Set(Decay);",
        "                    _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                    _effect.GetVariableByName(\"NumberOfSamples\").AsScalar().Set(NumberOfSamples);",
        "                    ",
        "                    _effect.GetVariableByName(\"Center\").AsVector().Set(new Vector3(CenterX, CenterY, CenterZ));",
        "                    _effect.GetVariableByName(\"Color\").AsVector().Set(new Vector4(ColorR, ColorG, ColorB, ColorA));",
        "                    _effect.GetVariableByName(\"viewToWorld\").AsMatrix().SetMatrix(viewToWorld);",
        "                    _effect.GetVariableByName(\"previousWorldToView\").AsMatrix().SetMatrix(previousWorldToView);",
        "                    _effect.GetVariableByName(\"txDepth\").AsShaderResource().SetResource(depthTexture); ",
        "    ",
        "                    Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "            });",
        "        }",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d8bd13f6-d151-4061-ab3e-178addbbf3fb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "614d73ca-cc87-4275-9eb0-b6020b27f17d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "395a3e34-f84c-4358-94d0-4adfb26d689e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4345ccb9-84c3-46d1-bd0c-8c5c00b53b41",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "964b6c9e-3ca1-4b6e-a079-9b9aeaea99db",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e96a70e0-7df2-40cf-9453-34baf52707f1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4214079e-b2ba-4a73-9970-76fc9cb235b7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "97351a40-c5c5-42b6-8ad5-6c984adf4ab3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4221da8b-1903-4415-93d4-8478ee1556cf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "88c969bf-787e-4f14-84aa-0fee5ed99e8a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0ba06bd0-b11a-4467-b86d-4055bbe11557",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4985d9a5-e9f4-4ed6-8bd4-49e73318f65d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6fa8e58d-6df9-4dd2-91d9-672aa9bbd124",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "06ff61c3-07b2-4754-a52e-79f0acdbf811",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b84eb923-13dc-43e7-9836-096b381ae7af",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f17ae1bd-ce00-4775-bd0d-d3ce17df1f5c"
    }
  ]
}