{
  "Name": "ToneMapper",
  "_id": "0f81a9c0-452b-4c7e-985c-26a74ef0f387",
  "Namespace": "lib.image.adjust",
  "Description": "\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "73ed1cc6-1d09-4acc-ab84-86bae27e511f",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Exposure;",
          "float MaxBrightness;",
          "//<<< _parameters\r",
          " \r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "float4 PS(PS_IN input) : SV_TARGET\r",
          "{\r",
          "    float4 color = Image.Sample(samLinear, input.texCoord);\r",
          "\r",
          "    //vec4 colorBloom = texture2D(bloom, st);\r",
          "\r",
          "    // Add bloom to the image\r",
          "//    color += colorBloom * bloomFactor;\r",
          "\r",
          "    // Perform tone-mapping\r",
          "    //float Y = dot(float4(0.30, 0.59, 0.11, 0.0), color);\r",
          "    float YD = (Exposure/MaxBrightness + 1.0) / (Exposure + 1.0);\r",
          "    color *= YD;\r",
          "   \r",
          "    return float4(color.rgb, 1);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "40346941-1ae7-46ca-8aa6-3325e44ad274",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Exposure",
      "MetaInstanceID": "a0df8648-82b5-4745-8e7a-c2f55fb35ce9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "1000000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MaxBrightness",
      "MetaInstanceID": "2be8b8b3-ca9b-426c-a5ea-8ab492e4dfbc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "1000000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "ddd603a6-e4da-45ef-805b-9cf819ca1ad9",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "0a37e4a9-b0c7-4a1f-9b96-0fb8117d8bf4",
      "MetaID": "24a0f9c7-a4ae-4dcc-a688-2dc4a4e4a6f0",
      "Name": "ToneMapperFunc",
      "Version": "8e0120b9-6757-4269-8e98-b25c6a410c3c",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID24a0f9c7_a4ae_4dcc_a688_2dc4a4e4a6f0",
        "{",
        "    public class Class_ToneMapper : FXImageFunction",
        "    {",
        "        protected override bool NeedsDepth { get { return false; } }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Exposure = 2,",
        "            MaxBrightness = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; if (Image == null) return context;",
        "            var Exposure = inputs[(int)InputId.Exposure].Eval(context).Value;",
        "            var MaxBrightness = inputs[(int)InputId.MaxBrightness].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                ClearRenderTarget(context, new Color4(0, 0, 0, 1));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Exposure\").AsScalar().Set(Exposure);",
        "                    _effect.GetVariableByName(\"MaxBrightness\").AsScalar().Set(MaxBrightness);",
        "                    //<<< _setup",
        "",
        "                    var prevBlendState = context.BlendState;",
        "                    context.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "",
        "                    Render(context);",
        "",
        "                    context.BlendState = prevBlendState;",
        "                    //>>> _cleanup",
        "                    }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0a37e4a9-b0c7-4a1f-9b96-0fb8117d8bf4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ddd603a6-e4da-45ef-805b-9cf819ca1ad9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "73ed1cc6-1d09-4acc-ab84-86bae27e511f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a37e4a9-b0c7-4a1f-9b96-0fb8117d8bf4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40346941-1ae7-46ca-8aa6-3325e44ad274",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a37e4a9-b0c7-4a1f-9b96-0fb8117d8bf4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a0df8648-82b5-4745-8e7a-c2f55fb35ce9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a37e4a9-b0c7-4a1f-9b96-0fb8117d8bf4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2be8b8b3-ca9b-426c-a5ea-8ab492e4dfbc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a37e4a9-b0c7-4a1f-9b96-0fb8117d8bf4"
    }
  ]
}