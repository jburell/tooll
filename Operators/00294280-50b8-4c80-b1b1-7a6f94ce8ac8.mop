{
  "Name": "ClampColors",
  "_id": "00294280-50b8-4c80-b1b1-7a6f94ce8ac8",
  "Namespace": "projects.feedback.shaders",
  "Description": "AvoidTooHighColors\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "e9cd91cc-ec7e-42b2-86a2-41cf15802a37",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Min;",
          "float Max;",
          "float Blend;",
          "float Contrast;",
          "float Brightness;",
          "float Hue;",
          "float Saturation;",
          "float2 Vignette;",
          "//<<< _parameters\r",
          "\r",
          "//>>> setup\r",
          "SamplerState samNearest\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "float3 rgbToHsv(float r, float g, float b)\r",
          "{\r",
          "    float delta, h,s, v;\r",
          "    float tmp = (r < g) ? r : g;\r",
          "    float min = (tmp < b) ? tmp : b;\r",
          "\r",
          "    tmp = (r > g) ? r : g;\r",
          "    float max = (tmp > b) ? tmp : b;\r",
          "\r",
          "    v = max;\t\t\t\t\r",
          "    delta = max - min;\r",
          "    if (max == min)\r",
          "    {\r",
          "        return float3( 0, 0, max);\r",
          "    }\r",
          "    else if (max != 0)\r",
          "    {\r",
          "        s = delta/max;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        // r = g = b = 0\t\t    // s = 0, v is undefined\r",
          "        s = 0;\r",
          "        h = 0;\r",
          "        return float3(h, s, v);\r",
          "    }\r",
          "    if (r == max)\r",
          "        h = (g - b) / delta;\t\t// between yellow & magenta\r",
          "    else if (g == max)\r",
          "        h = 2 + (b - r) / delta;\t// between cyan & yellow\r",
          "    else\r",
          "        h = 4 + (r - g) / delta;\t// between magenta & cyan\r",
          "    h *= 60;\t\t\t\t        // degrees\r",
          "    if (h < 0)\r",
          "        h += 360;\r",
          "    return float3(h,s,v);\r",
          "                \r",
          "}\r",
          "\r",
          "float3 hsvToRgb( float h, float s, float v)\r",
          "{\r",
          "    float satR, satG, satB;\r",
          "    if (h < 120.0f)\r",
          "    {\r",
          "        satR = (120.0f - h) / 60.0f;\r",
          "        satG = h / 60.0f;\r",
          "        satB = 0.0f;\r",
          "    }\r",
          "    else if (h < 240.0f)\r",
          "    {\r",
          "        satR = 0.0f;\r",
          "        satG = (240.0f - h) / 60.0f;\r",
          "        satB = (h - 120.0f) / 60.0f;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        satR = (h - 240.0f) / 60.0f;\r",
          "        satG = 0.0f;\r",
          "        satB = (360.0f - h) / 60.0f;\r",
          "    }\r",
          "    satR = (satR < 1.0f) ? satR : 1.0f;\r",
          "    satG = (satG < 1.0f) ? satG : 1.0f;\r",
          "    satB = (satB < 1.0f) ? satB : 1.0f;\r",
          "\r",
          "    return float3( v*(s*satR + (1.0f - s)),\r",
          "                    v*(s*satG + (1.0f - s)),\r",
          "                    v*(s*satB + (1.0f - s)));\r",
          "                    \r",
          "}\r",
          "\r",
          "\r",
          "//>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    \r",
          "    float4 c=Image.Sample(samNearest, input.texCoord);\r",
          "    \r",
          "    // HSB\r",
          "    c.rgb = (c.rgb - 0.5) * Contrast + 0.5 + Brightness;\r",
          "\r",
          "    // Vignette\r",
          "    \r",
          "    float r=  length((input.texCoord - 0.5)* float2(RenderTargetSize.x/RenderTargetSize.y,1));\r",
          "    c.rgb += pow(r, Vignette.y) * Vignette.x;\r",
          "    \r",
          "    //c.rgb = clamp(c.rgb, 0.0001, 1000);\r",
          "    \r",
          "    float3 hsv = rgbToHsv(c.r, c.g, c.b);\r",
          "    hsv += float3(Hue, Saturation, 0);\r",
          "    c.rgb = hsvToRgb(hsv.x, hsv.y, hsv.z);\r",
          "\r",
          "    // Clamp min max\r",
          "    \r",
          "    c.rgb = (   clamp( c.rgb - 0.5  * Blend , Min, Max) \r",
          "              + clamp( c.rgb - 0.25 * Blend , Min, Max) \r",
          "              + clamp( c.rgb                , Min, Max)\r",
          "              + clamp( c.rgb + 0.25 * Blend , Min, Max)\r",
          "              + clamp( c.rgb + 0.5  * Blend , Min, Max)) / 5 ;\r",
          "\r",
          "\r",
          "    \r",
          "    c.a = clamp(c.a, 0,1);\r",
          "    c.rgb = clamp(c.rgb, 0.0001, 1000);\r",
          "    \r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "70bdcd96-cb55-4707-996a-17b33b09489f",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Min",
      "MetaInstanceID": "4dcb00bf-41f8-426b-abc5-3786a73f46b4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Max",
      "MetaInstanceID": "95ff48a5-5516-4807-8228-2c868e2c02d9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Blend",
      "MetaInstanceID": "38ae0330-30a3-4933-9d19-0154dd769e3f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Contrast",
      "MetaInstanceID": "9043f883-4e64-4b00-8a08-8838a979e683",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Brightness",
      "MetaInstanceID": "588c1161-0c92-4e7e-ae3c-35713805507a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Hue",
      "MetaInstanceID": "96b7c34e-3023-4080-9cfa-a8a38c145f52",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.2",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Saturation",
      "MetaInstanceID": "2ac786ce-4af6-42bd-b31f-71fbe834e10f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Vignette.Strength",
      "MetaInstanceID": "ea2f7b6d-0bba-4bf7-875f-baa26df811e0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Vignette.Shape",
      "MetaInstanceID": "97f193cc-f3c5-4418-8760-52cbbc753939",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "22284540-5a2d-45d8-ba2c-6354b8f2adb4",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8",
      "MetaID": "a61dd22f-d97f-4a1b-afb7-61fecb1a9ea7",
      "Name": "ClampColorsFunc",
      "Version": "a1e7bff3-da57-49d9-a16b-ea09cff6617d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDa61dd22f_d97f_4a1b_afb7_61fecb1a9ea7",
        "{",
        "    public class Class_ClampColors : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Min = 2,",
        "            Max = 3,",
        "            Blend = 4,",
        "            Contrast = 5,",
        "            Brightness = 6,",
        "            Hue = 7,",
        "            Saturation = 8,",
        "            VignetteStrength = 9,",
        "            VignetteShape = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> _params",
        "                var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "                var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "                var Min = inputs[(int)InputId.Min].Eval(context).Value;",
        "                var Max = inputs[(int)InputId.Max].Eval(context).Value;",
        "                var Blend = inputs[(int)InputId.Blend].Eval(context).Value;",
        "                var Contrast = inputs[(int)InputId.Contrast].Eval(context).Value;",
        "                var Brightness = inputs[(int)InputId.Brightness].Eval(context).Value;",
        "                var Hue = inputs[(int)InputId.Hue].Eval(context).Value;",
        "                var Saturation = inputs[(int)InputId.Saturation].Eval(context).Value;",
        "                var VignetteStrength = inputs[(int)InputId.VignetteStrength].Eval(context).Value;",
        "                var VignetteShape = inputs[(int)InputId.VignetteShape].Eval(context).Value;",
        "                var Vignette = new Vector2(VignetteStrength, VignetteShape);",
        "                //<<< _params",
        "                ",
        "                if (Image == null)",
        "                    return;",
        "",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Min\").AsScalar().Set(Min);",
        "                    _effect.GetVariableByName(\"Max\").AsScalar().Set(Max);",
        "                    _effect.GetVariableByName(\"Blend\").AsScalar().Set(Blend);",
        "                    _effect.GetVariableByName(\"Contrast\").AsScalar().Set(Contrast);",
        "                    _effect.GetVariableByName(\"Brightness\").AsScalar().Set(Brightness);",
        "                    _effect.GetVariableByName(\"Hue\").AsScalar().Set(Hue);",
        "                    _effect.GetVariableByName(\"Saturation\").AsScalar().Set(Saturation);",
        "                    _effect.GetVariableByName(\"Vignette\").AsVector().Set(new Vector2(VignetteStrength, VignetteShape));",
        "                //<<< _setup",
        "",
        "                var prevBlendState = context.BlendState;",
        "                context.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "",
        "                Render(context);",
        "",
        "                context.BlendState = prevBlendState;",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "22284540-5a2d-45d8-ba2c-6354b8f2adb4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e9cd91cc-ec7e-42b2-86a2-41cf15802a37",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "70bdcd96-cb55-4707-996a-17b33b09489f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4dcb00bf-41f8-426b-abc5-3786a73f46b4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "95ff48a5-5516-4807-8228-2c868e2c02d9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "38ae0330-30a3-4933-9d19-0154dd769e3f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9043f883-4e64-4b00-8a08-8838a979e683",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "588c1161-0c92-4e7e-ae3c-35713805507a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96b7c34e-3023-4080-9cfa-a8a38c145f52",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ac786ce-4af6-42bd-b31f-71fbe834e10f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ea2f7b6d-0bba-4bf7-875f-baa26df811e0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "97f193cc-f3c5-4418-8760-52cbbc753939",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5e2f8ba2-2bb4-4161-b4a1-d062a09d2cf8"
    }
  ]
}