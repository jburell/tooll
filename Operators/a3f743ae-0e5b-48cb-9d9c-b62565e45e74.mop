{
  "Name": "ChromaticAbberation2",
  "_id": "a3f743ae-0e5b-48cb-9d9c-b62565e45e74",
  "Namespace": "lib.image",
  "Description": "A combination of blur, lense distort, chromatic abberation.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "a827ea83-9fc4-4e72-997e-9e61af369ddc",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> __parameters\r",
          "//godrays",
          "Texture2D Image;",
          "float Strength;",
          "float Threshold;",
          "float ShiftDepth;",
          "float Size;",
          "float RaySamples;",
          "float4 Color;\r",
          "\r",
          "float2 Center;\r",
          "float BlurSize;\r",
          "float BlurSamples;\r",
          "//<<< __parameters\r",
          "\r",
          "//Texture2D txDepth;\r",
          "float4x4 viewToCamera;\r",
          " \r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> VS \r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
          "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = input.texCoord;\r",
          "\r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "\r",
          "//>>> PSGodRays\r",
          "\r",
          "float4 chromaShift(float4 c, float range) {\r",
          "    range = (range-0.5)*Threshold;\r",
          "    return float4(\r",
          "        c.r * clamp( 1.5 - abs(range-Strength), 0,1),\r",
          "        c.g * clamp( 1.5 - abs(range), 0,1),\r",
          "        c.b * clamp( 1.5 - abs(range+Strength), 0,1),\r",
          "        c.a\r",
          "    );\r",
          "}\r",
          "\r",
          "float4 psGodRays( PS_IN input ) : SV_Target\r",
          "{\r",
          "    //float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "    float4 c2 = Image.Sample(samLinear, input.texCoord);\r",
          "    float depth = Image.SampleLevel(samLinear, input.texCoord, 0).r;\r",
          "    float4 viewTFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, depth, 1.0);\r",
          "    float4 cameraTFragPos = mul(viewTFragPos, viewToCamera);\r",
          "    cameraTFragPos /= cameraTFragPos.w;\r",
          "\r",
          "    //float2 CenterInView = float2(0.5, 0.5);\r",
          "\r",
          "    float sampleStep = 1;    \r",
          "    float2 sampleDir = viewTFragPos.xy - Center;\r",
          "    sampleDir.x = -sampleDir.x;\r",
          "    \r",
          "    float radialStrength= Size * pow(sampleDir.Length,0.3)/ 100;\r",
          "    float2 dir = sampleStep * radialStrength /RaySamples*sampleDir;\r",
          "\r",
          "    float2 pos = -dir* RaySamples/2;\r",
          "    float distanceToCenter;\r",
          "    float4 c= float4(0,0,0,0);\r",
          "    for (int i = 0; i < RaySamples; ++i)\r",
          "    {\r",
          "        float2 p = input.texCoord + pos;\r",
          "               \r",
          "                \r",
          "        //if (p.x > 0 && p.x < 1 && p.y > 0 && p.y < 1)\r",
          "        //{\r",
          "            float4 cP2 = Image.SampleLevel(samLinear, p, 0);\r",
          "            //float f= 1-i/RaySamples;\r",
          "            //c += max(0, cP2 - Threshold) * Strength * 0.1;\r",
          "            c += chromaShift(cP2, i/RaySamples) /RaySamples;\r",
          "        //}        \r",
          "        pos += dir;\r",
          "    }\r",
          "    //c /= RaySamples;\r",
          "    //c*=Color;\r",
          "    //c.a = c2.a;\r",
          "    return c;\r",
          "}\r\r\r",
          "//<<< PSGodRays\r",
          "\r",
          "//>>> PSRadialBlur\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "float4 psRadialBlur( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 cOrg = Image.Sample(samLinear, input.texCoord);\r",
          "    return txDiffuse.Sample(samLinear, input.texCoord);\r",
          "    \r",
          "    float2 viewTFragPos = float2(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0);\r",
          "\r",
          "    float sampleStep = 1;\r",
          "\r",
          "    float2 sampleDir = viewTFragPos.xy - Center;\r",
          "    sampleDir.x = -sampleDir.x;\r",
          "    float2 dir = sampleStep*BlurSize/BlurSamples*sampleDir;\r",
          "\r",
          "    float4 c = float4(0, 0, 0, 0);\r",
          "    float totalWeight = 0;\r",
          "    float2 pos = dir - BlurSamples*0.5*dir;\r",
          "    float distanceToCenter;\r",
          "    for (int i = 0; i < BlurSamples; ++i)\r",
          "    {\r",
          "        float2 p = input.texCoord + pos;\r",
          "        \r",
          "        if (p.x > 0 && p.x < 1 && p.y > 0 && p.y < 1)\r",
          "        {\r",
          "            float ir = i/floor(BlurSamples);\r",
          "            float weightIndex = (int)(abs(ir*2-1)*1 * (NUMWT-1));\r",
          "            float weight = lerp(Gauss[weightIndex], Gauss[(int)weightIndex + 1], frac(weightIndex));\r",
          "            c += txDiffuse.Sample(samLinear, p)*weight;\r",
          "            totalWeight += weight;\r",
          "        }        \r",
          "        pos += dir;\r",
          "    }\r",
          "    return c.rgba;\r",
          "}\r",
          "//<<< PSRadialBlur\r",
          "\r",
          "//>>> __technique\r",
          "technique10 GodRays",
          "{",
          "    pass GodRays",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, psGodRays() ) );",
          "    }",
          "}",
          "technique10 RadialBlur\r",
          "{\r",
          "    pass RadialBlur\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, psRadialBlur() ) );\r",
          "    }\r",
          "}\r",
          "//<<< __technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "87384be8-e9dc-4378-9159-a3ca3e915f0e",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Strength",
      "MetaInstanceID": "925ca5f1-15ea-460a-a4d0-61edea6c4393",
      "DefaultValue": {
        "Type": "Float",
        "Value": "6"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Threshold",
      "MetaInstanceID": "404a273d-97f2-4a73-9e2a-219cb43d80ff",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RaySamples",
      "MetaInstanceID": "ec524f08-f3ca-40f7-b212-65834b0be340",
      "DefaultValue": {
        "Type": "Float",
        "Value": "20"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "5228393b-96be-40bb-a195-27793fe94aa8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "e67ac008-6293-4d5b-bcfd-576f64e036fc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "9ceb2f8a-d98f-439e-9401-2ea16146bc54",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "ac896263-3677-4152-8068-682586672fe4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "cc5fca80-852c-4839-8253-e8ef3eefa7d5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlurSamples",
      "MetaInstanceID": "a9ff58ce-1fca-4f23-b318-53e49d9397dd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlurSize",
      "MetaInstanceID": "6f1e8836-84e8-48ab-a25d-49496c4053fb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.06999998"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "248aff30-630d-4b97-8f4f-889e72cb11cd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "d036b8a2-1d03-456d-9c0c-52a6198d973b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "633d5fb9-60a3-4cb0-9e4a-8e25344b47b4",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "251c27bf-5ad9-4824-8255-2b67734c399e",
      "MetaID": "17edb483-8ac4-4de6-af55-da4f0cd357be",
      "Name": "ChromaticAbberation2Func",
      "Version": "b02a4853-226c-48d9-86ec-d0e904541bc4",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "using SharpDX.D3DCompiler;",
        "using SharpDX.Direct3D; ",
        "using Framefield.Core.Rendering;",
        "using System.Dynamic;",
        "using Framefield.Core;",
        "",
        "namespace Framefield.Core.ID17edb483_8ac4_4de6_af55_da4f0cd357be",
        "{",
        "    public class Class_ChromaticAbberation2 : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Strength = 2,",
        "            Threshold = 3,",
        "            RaySamples = 4,",
        "            Size = 5,",
        "            ColorR = 6,",
        "            ColorG = 7,",
        "            ColorB = 8,",
        "            ColorA = 9,",
        "            BlurSamples = 10,",
        "            BlurSize = 11,",
        "            CenterX = 12,",
        "            CenterY = 13",
        "        }",
        "        //<<< _inputids",
        "",
        "        protected override bool NeedsDepth { get { return false; } }",
        "",
        "        protected override bool BuildRenderTarget(SharpDX.DXGI.Format imageBufferFormat)",
        "        {",
        "            var pass1ResourceChanged = ResourceManager.ValidateRenderTargetResource(ref _pass1RenderTargetResource, OperatorPart, D3DDevice.Device,",
        "                                                                                    (int)_usedViewport.Width, (int)_usedViewport.Height);",
        "            if (pass1ResourceChanged)",
        "            {",
        "                Utilities.DisposeObj(ref _pass1RenderTargetView);",
        "                _pass1RenderTargetView = new RenderTargetView(D3DDevice.Device, _pass1RenderTargetResource.Texture);",
        "            }",
        "",
        "            return base.BuildRenderTarget(imageBufferFormat) || pass1ResourceChanged;",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            ResourceManager.Dispose(_pass1RenderTargetResource);",
        "            Utilities.DisposeObj(ref _pass1RenderTargetView);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> __params",
        "                var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "                var imageInput = inputs[(int)InputId.Image].Eval(context);",
        "",
        "                var Strength = inputs[(int)InputId.Strength].Eval(context).Value;",
        "                var Rays = inputs[(int)InputId.Threshold].Eval(context).Value;",
        "                var RaySamples = inputs[(int)InputId.RaySamples].Eval(context).Value;",
        "                var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "                var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "                var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "                var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "                var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "                var Color = new Color4(ColorR, ColorG, ColorB, ColorA);                ",
        "                var BlurSamples = inputs[(int)InputId.BlurSamples].Eval(context).Value;",
        "                var BlurSize = inputs[(int)InputId.BlurSize].Eval(context).Value;",
        "                var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "                var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "                var Center = new Vector2(CenterX, CenterY);                ",
        "                //<<< __params",
        "               ",
        "                var image = imageInput.Image;",
        "                //var depthImage = imageInput.DepthImage;",
        "                //if (image == null || depthImage == null)",
        "                if (image == null)",
        "                {",
        "                    Logger.Error(this, \"Image input missing\");",
        "                    return;",
        "                }",
        "    ",
        "                if (_renderer2 == null)",
        "                {",
        "                     _renderer2 = new BaseRenderer();",
        "                }",
        "",
        "                var D3DDevice = context.D3DDevice;",
        "",
        "",
        "                var shaderDesc = new ShaderResourceViewDescription();",
        "                shaderDesc.Format = Format.R32_Float;",
        "                shaderDesc.Dimension = ShaderResourceViewDimension.Texture2D;",
        "                shaderDesc.Texture2D.MipLevels = 1;",
        "",
        "",
        "                //pass 1: original godrays",
        "                //using (var depthTexture = new ShaderResourceView(context.D3DDevice, depthImage, shaderDesc))",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, image))",
        "                {",
        "                    D3DDevice.ImmediateContext.ClearRenderTargetView(_pass1RenderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                    var pass1SubContext = new OperatorPartContext(context);",
        "                    pass1SubContext.DepthStencilView = null;",
        "                    pass1SubContext.RenderTargetView = _pass1RenderTargetView;",
        "                    pass1SubContext.Effect = _effect;",
        "                    pass1SubContext.Renderer = _renderer;",
        "                    pass1SubContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    pass1SubContext.CameraProjection = Matrix.OrthoLH(1, 1, -100, 100);",
        "                    pass1SubContext.WorldToCamera = Matrix.Identity;",
        "                    pass1SubContext.ObjectTWorld = Matrix.Identity;",
        "                    pass1SubContext.TextureMatrix = Matrix.Identity;",
        "",
        "                    pass1SubContext.Renderer.SetupEffect(pass1SubContext);",
        "",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Strength\").AsScalar().Set(Strength);",
        "                    _effect.GetVariableByName(\"Threshold\").AsScalar().Set(Rays);",
        "                    _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                    _effect.GetVariableByName(\"RaySamples\").AsScalar().Set(RaySamples);",
        "                    _effect.GetVariableByName(\"Color\").AsVector().Set(Color);",
        "",
        "                    pass1SubContext.Renderer.Render(pass1SubContext.Renderer._screenQuadMesh, pass1SubContext, 0);",
        "                }",
        "                ",
        "",
        "                //pass 2 directional blur",
        "                using (var textureView = new ShaderResourceView(D3DDevice, _pass1RenderTargetResource.Texture))",
        "                {",
        "                    D3DDevice.ImmediateContext.ClearRenderTargetView(_renderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                    var pass2SubContext = new OperatorPartContext(context);",
        "                    pass2SubContext.DepthStencilView = null;",
        "                    pass2SubContext.RenderTargetView = _renderTargetView;",
        "                    pass2SubContext.Effect = _effect;",
        "                    pass2SubContext.Renderer = _renderer2;",
        "                    pass2SubContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    pass2SubContext.CameraProjection = Matrix.OrthoLH(1, 1, -100, 100);",
        "                    pass2SubContext.WorldToCamera = Matrix.Identity;",
        "                    pass2SubContext.ObjectTWorld = Matrix.Identity;",
        "                    pass2SubContext.TextureMatrix = Matrix.Identity;",
        "                    pass2SubContext.Texture0 = textureView;",
        "                    pass2SubContext.Renderer.SetupEffect(pass2SubContext);",
        "",
        "                    _effect.GetVariableByName(\"BlurSamples\").AsScalar().Set(BlurSamples);",
        "                    _effect.GetVariableByName(\"BlurSize\").AsScalar().Set(BlurSize);",
        "                    _effect.GetVariableByName(\"Center\").AsVector().Set(Center);",
        "",
        "                    pass2SubContext.Renderer.Render(pass2SubContext.Renderer._screenQuadMesh, pass2SubContext, 1);",
        "                }",
        "            });",
        "        }",
        "",
        "        BaseRenderer _renderer2;",
        "        Resource _pass1RenderTargetResource = null;",
        "        RenderTargetView _pass1RenderTargetView = null;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "633d5fb9-60a3-4cb0-9e4a-8e25344b47b4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a827ea83-9fc4-4e72-997e-9e61af369ddc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "87384be8-e9dc-4378-9159-a3ca3e915f0e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "925ca5f1-15ea-460a-a4d0-61edea6c4393",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "404a273d-97f2-4a73-9e2a-219cb43d80ff",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ec524f08-f3ca-40f7-b212-65834b0be340",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5228393b-96be-40bb-a195-27793fe94aa8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e67ac008-6293-4d5b-bcfd-576f64e036fc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ceb2f8a-d98f-439e-9401-2ea16146bc54",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ac896263-3677-4152-8068-682586672fe4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc5fca80-852c-4839-8253-e8ef3eefa7d5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a9ff58ce-1fca-4f23-b318-53e49d9397dd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f1e8836-84e8-48ab-a25d-49496c4053fb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "248aff30-630d-4b97-8f4f-889e72cb11cd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d036b8a2-1d03-456d-9c0c-52a6198d973b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "251c27bf-5ad9-4824-8255-2b67734c399e"
    }
  ]
}