{
  "Name": "BeatTapper",
  "_id": "294d8a18-7dd9-4eef-b0f0-a2c7ac45a170",
  "Namespace": "lib.math",
  "Description": "Generates a coherent timing-signal that can be used for VJ like projects. It's best used with [KeyInput] or [MidiInput].\r\n\r\n.TriggerImpact - small values are more precise but will take longer to adjust sync.\r\n\r\n.OutputDamping - How long it takes for the output-signal to blend to new sync. Use values close to 1 to avoid jumps in timing.\r\n\r\nSee [BeatTappingExample] for more details how to use this operator.",
  "Inputs": [
    {
      "Name": "TapTrigger",
      "MetaInstanceID": "c49a9f71-c0d9-4f3f-a375-7f1d7ab0748b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResyncTrigger",
      "MetaInstanceID": "7b924d4d-4045-4cb1-85a6-ac021522b0e1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DefaultBPM",
      "MetaInstanceID": "dd16a87d-12bb-494a-a8b4-c21e1e60efa9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "120.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriggerImpact",
      "MetaInstanceID": "b2777bbd-f867-4a8e-b652-cf0d25240144",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.15"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothSyncChanges",
      "MetaInstanceID": "172a2d34-a833-47d3-beb3-e40598d12166",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.95"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BeatsPerBar",
      "MetaInstanceID": "176d7e9a-7b81-40f8-8ec0-523943718216",
      "DefaultValue": {
        "Type": "Float",
        "Value": "4"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResetTotalTrigger",
      "MetaInstanceID": "20401446-a8da-454c-88e5-833941ac787a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothBPMChanges",
      "MetaInstanceID": "c8025075-d3f8-4e89-b345-b8385a681d2e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.975"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Fragment",
      "MetaInstanceID": "0031984f-2383-475d-b4ed-8ce6fd85d00d",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "BPM",
      "MetaInstanceID": "067a7dc1-f825-4186-9d17-b7f32d9c8a74",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Total",
      "MetaInstanceID": "ac5d865b-ba06-4e3b-8b77-9e27427beb8b",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "MetaID": "1dafae7b-cfcd-4fb1-bb13-6aa71effe76b",
      "Name": "BeatTapperFunc",
      "Version": "ebb44b63-0248-4ae2-b99e-30e1785fa52f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID1dafae7b_cfcd_4fb1_bb13_6aa71effe76b",
        "{",
        "    public class Class_BeatTapper : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TapTrigger = 0,",
        "            ResyncTrigger = 1,",
        "            DefaultBPM = 2,",
        "            TriggerImpact = 3,",
        "            SmoothSyncChanges = 4,",
        "            BeatsPerBar = 5,",
        "            ResetTotalTrigger = 6,",
        "            SmoothBPMChanges = 7",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Fragment = 0,",
        "            BPM = 1,",
        "            Total = 2",
        "        }",
        "        //<<< _outputids",
        "                ",
        "        /*",
        "            This code seems much too complicated, but getting flexible and conherent beat detection",
        "            seems to be much trickier, than I though. After playing with a couple of methods, it ",
        "            finally settled on keeping a \"fragmentTime\" counter wrapping over the _beatDuration.",
        "            The fragmentTime is than additionaly offset with. Maybe there is a method that works",
        "            without the separate offset-variable, but since I wanted to have damped transition is",
        "            syncing (no jumps please), keeping both seperated seemed to work.",
        "        */",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var TapTrigger = inputs[(int)InputId.TapTrigger].Eval(context).Value;",
        "            var ResyncTrigger = inputs[(int)InputId.ResyncTrigger].Eval(context).Value;",
        "            var DefaultBPM = inputs[(int)InputId.DefaultBPM].Eval(context).Value;",
        "            var TriggerImpact = inputs[(int)InputId.TriggerImpact].Eval(context).Value;",
        "            var SmoothSyncChanges = inputs[(int)InputId.SmoothSyncChanges].Eval(context).Value;",
        "            var BeatsPerBar = inputs[(int)InputId.BeatsPerBar].Eval(context).Value;",
        "            var ResetTotalTrigger = inputs[(int)InputId.ResetTotalTrigger].Eval(context).Value;",
        "            var SmoothBPMChanges = inputs[(int)InputId.SmoothBPMChanges].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            if( _dampedBeatDuration == 0 || DefaultBPM !=_lastDefaultBpm)  {",
        "                _lastDefaultBpm = DefaultBPM;",
        "                _dampedBeatDuration = 60 / DefaultBPM;",
        "            }",
        "            ",
        "           ",
        "",
        "            var timeDelta = context.GlobalTime - _lastFragmentUpdateTime;",
        "",
        "            if(timeDelta != 0) ",
        "            {            ",
        "                _lastFragmentUpdateTime = context.GlobalTime;",
        "                            ",
        "                _fragmentTime += timeDelta;",
        "                var barDuration = _dampedBeatDuration * BeatsPerBar;",
        "                ",
        "                _fragmentTime %= barDuration;",
        "                //if( _fragmentTime > barDuration)",
        "                //    _fragmentTime -= barDuration;",
        "                            ",
        "                // Detect Flanks",
        "                bool justTapped = (TapTrigger - _oldTapTrigger > 0.5f);",
        "                _oldTapTrigger =TapTrigger;",
        "    ",
        "                bool justResynced = (ResyncTrigger - _oldResyncTrigger > 0.5f);",
        "                _oldResyncTrigger =ResyncTrigger;",
        "                ",
        "                if(ResetTotalTrigger > 0.5f) {",
        "                    _barCounter = 0;",
        "                }",
        "                ",
        "                ",
        "                if(justTapped) ",
        "                {                ",
        "                    bool newSeriesStarted = _tapTimes.Count == 0 || Math.Abs(context.GlobalTime - _tapTimes.Last()) > 4* _beatDuration;",
        "                    ",
        "                    if(newSeriesStarted) {",
        "                        Logger.Info(\"New Tap Series started\");",
        "                        _tapTimes.Clear();",
        "                    }",
        "    ",
        "                    _tapTimes.Add( context.GlobalTime );",
        "                    ",
        "                    var zonesCount = _tapTimes.Count - 1; ",
        "                    if( zonesCount > 1) {",
        "                        ",
        "                        var lastDuration = _tapTimes[_tapTimes.Count-1] - _tapTimes[_tapTimes.Count-2];",
        "                                            ",
        "                        _beatDuration = _beatDuration * (1-TriggerImpact) + lastDuration * TriggerImpact;                        ",
        "                        var stepOffset = ( (_fragmentTime - _dampedBeatOffset + _dampedBeatDuration/2) % _dampedBeatDuration ) - _dampedBeatDuration /2 ;",
        "                        ",
        "                        _offset += stepOffset * TriggerImpact * 2;",
        "                        //Logger.Info(this, \"stepOffset {0:0.00}  FragmentTime {1:0.00} Offset {2:0.00}   BeatDuration {3:0.00} \", stepOffset, _fragmentTime, _offset, _dampedBeatDuration);",
        "                    }",
        "                }",
        "",
        "                // Smooth offset and beatduration to avoid jumps",
        "                _dampedBeatDuration = _dampedBeatDuration * SmoothBPMChanges + _beatDuration * (1-SmoothBPMChanges);",
        "                _dampedBeatOffset = _dampedBeatOffset * SmoothSyncChanges + _offset * (1-SmoothSyncChanges);",
        "                ",
        "                if(justResynced) {                    ",
        "                    _offset = _fragmentTime;",
        "                    if( _offset > barDuration / 2)",
        "                        _offset -= barDuration;",
        "                    ",
        "                }",
        "                ",
        "                var lastBarTime = _barTime;",
        "                ",
        "                _barTime = (_fragmentTime - _dampedBeatOffset) % barDuration;",
        "                if(_barTime < 0)",
        "                    _barTime += barDuration;",
        "                _barTime /= barDuration;",
        "                ",
        "                var nextBarStarted =  _barTime - lastBarTime < -barDuration/16 ;",
        "                if (nextBarStarted) {",
        "                    _barCounter++;",
        "                }",
        "            }            ",
        "                       ",
        "            switch(outputIdx) ",
        "            {",
        "                case (int)OutputId.Fragment:                                 ",
        "                    context.Value = 1-(float)_barTime;                    ",
        "                    break;",
        "                    ",
        "                case (int)OutputId.BPM:",
        "                    context.Value =  (float)(60.0f/_dampedBeatDuration);",
        "                    break;",
        "                    ",
        "                case (int)OutputId.Total:",
        "                    context.Value = (float)(_barCounter + _barTime);",
        "                    break;",
        "                    ",
        "//                case (int)OutputId.Offset:",
        "//                    context.Value = (float)(_offset);",
        "//                    break;",
        "            }            ",
        "            ",
        "            return context;",
        "        }",
        "        ",
        "        //double _bpm =0;",
        "        double _offset;",
        "        double _barTime;",
        "        double _dampedBeatDuration= 0.5;",
        "        double _dampedBeatOffset = 0;",
        "        ",
        "        int _barCounter = 0;",
        "        ",
        "        double _fragmentTime;",
        "        double _lastFragmentUpdateTime;",
        "        ",
        "        float _lastDefaultBpm;",
        "        float _oldTapTrigger;",
        "        float _oldResyncTrigger;",
        "        double _beatDuration=1;",
        "        double _syncedTime = 0;",
        "        ",
        "        List<double> _tapTimes = new List<double>();",
        "        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c49a9f71-c0d9-4f3f-a375-7f1d7ab0748b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7b924d4d-4045-4cb1-85a6-ac021522b0e1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dd16a87d-12bb-494a-a8b4-c21e1e60efa9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b2777bbd-f867-4a8e-b652-cf0d25240144",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "172a2d34-a833-47d3-beb3-e40598d12166",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "176d7e9a-7b81-40f8-8ec0-523943718216",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "20401446-a8da-454c-88e5-833941ac787a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c8025075-d3f8-4e89-b345-b8385a681d2e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0031984f-2383-475d-b4ed-8ce6fd85d00d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "067a7dc1-f825-4186-9d17-b7f32d9c8a74"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ac5d865b-ba06-4e3b-8b77-9e27427beb8b"
    }
  ]
}