{
  "Name": "SplineDistort",
  "_id": "a8751043-acf4-4478-9802-1f5f8379c828",
  "Namespace": "projects.igravity.shaders",
  "Description": "Super complicated displacement-shader inspired by Tooll1. Uses a function f(u) that defines a spline in space. u is derived from a x-position of the incoming mesh.  \r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "538a6871-7fe0-45a4-aa59-7a0142918503",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "Texture2D RGBANoise;",
          "float uShift;",
          "float3 MeshOffset;",
          "float3 Direction;",
          "float2 DirectionRegion;",
          "float NoiseAmount;",
          "float2 NoiseRegion;",
          "float NoiseTime;",
          "float NoiseScale;",
          "float3 UpVector;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "float smoothStep( float t, float step, float smooth) {\r",
          "    t = (t-step) / smooth;\r",
          "    t=  t * t * t * (t * (t * 6 - 15) + 10);    \r",
          "    return clamp(t,0,1);\r",
          "}\r",
          "\r",
          "float3 getOffset(float3 p) {\r",
          "\r",
          "    float3 offset =float3(0,0,0);\r",
          "\r",
          "    \r",
          "    float u = p.x;\r",
          "\r",
          "    // Directional offset\r",
          "    offset+= u * Direction * smoothStep( u , DirectionRegion.x, DirectionRegion.y); ;\r",
          "    \r",
          "\r",
          "    // Noise Offset\r",
          "    float3 noise1 = (RGBANoise.SampleLevel(samLinear, (p.xz + NoiseTime*10 * float3(0.14,0.53,0.41) ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noise2 = (RGBANoise.SampleLevel(samLinear, (p.yz + NoiseTime*6 * float3(0.41,0.31,0.01) ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noise3 = (RGBANoise.SampleLevel(samLinear, (p.yx + NoiseTime*9 * float3(0.74,0.15,0.55) ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "\r",
          "    //float3 noiseB1 = (RGBANoise.SampleLevel(samLinear, (p.xz + NoiseTime ) / NoiseScale / 30, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noiseB2 = (RGBANoise.SampleLevel(samLinear, (p.yz + NoiseTime ) / NoiseScale / 30, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noiseB3 = (RGBANoise.SampleLevel(samLinear, (p.yx + NoiseTime ) / NoiseScale / 30, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "\r",
          "    float3 noiseCombined = 3 *(noise1+noise2+noise3);\r",
          "    //float3 noiseCombined = 3 *(noise1+noise2+noise3) +  (noiseB3 + noiseB2 + noiseB3 );\r",
          "    \r",
          "    offset+= noiseCombined * smoothStep( u , NoiseRegion.x, NoiseRegion.y); \r",
          "    return offset;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    \r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;      \r",
          "        float3 p2 = p + MeshOffset;        \r",
          "        \r",
          "        // fade        \r",
          "        float3 pOffset= getOffset(p2);\r",
          "        //vertex.pos.xyz += pOffset;\r",
          "        \r",
          "        float3 nOffset= getOffset(p2.xyz +vertex.normal.xyz *0.001);\r",
          "        vertex.normal.xyz +=  nOffset  - pOffset;\r",
          "        \r",
          "        \r",
          "        float3 V= p2 - float3(0, p2.y, p2.z);\r",
          "        float3 P3= V + pOffset;\r",
          "        \r",
          "        vertex.pos.xyz = P3;\r",
          "        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "56a497d3-782b-49db-b7d8-765dbcf18c1d",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RGBANoise",
      "MetaInstanceID": "4c8ad2d7-4aad-4b4f-b15f-a5500825fdaf",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "uShift2",
      "MetaInstanceID": "17ef2f1b-b637-430c-be0a-fdd2c02c5660",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.X",
      "MetaInstanceID": "9df27a27-f3dc-4c5d-9107-63ab6e1b098b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.Y",
      "MetaInstanceID": "203e990f-9b8a-4855-a711-2562644d3f29",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.Z",
      "MetaInstanceID": "728351df-c287-4388-8f5d-00e4c7cfab25",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.X",
      "MetaInstanceID": "167a8040-f41f-4d95-bb48-b0b147236c53",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.Y",
      "MetaInstanceID": "2b7554d0-b395-41c5-b432-b139c7c875a9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.Z",
      "MetaInstanceID": "9821c134-04b4-49aa-be86-3a8bbb1e27eb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DirectionRegion.uStep",
      "MetaInstanceID": "10efe5e7-74d1-41eb-aa5b-0c346e276319",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DirectionRegion.stepSmooth",
      "MetaInstanceID": "b46c9787-8810-4165-8bc7-dc76fa9b65b1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "b996bf11-bf6c-4c16-9a88-fda26c78fa3b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRegion.uStep",
      "MetaInstanceID": "c65591ca-1422-4b1c-a5c2-016b4d3b54ab",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRegion.stepSmooth",
      "MetaInstanceID": "bde972b3-4733-49a1-9dec-3d2a1f1f40b9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "d2b5831e-cba7-49f7-a455-5302f24c83fe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "68b7b818-95cc-4135-a497-b136da6c8bfe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.X",
      "MetaInstanceID": "0df02a32-373c-456a-aad9-ec0760457c27",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Y",
      "MetaInstanceID": "402881e5-30d8-46c0-8879-f62524d462f4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Z",
      "MetaInstanceID": "f0575291-e642-44c4-9d76-89d28a8aad44",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "5ad52ffc-df08-4378-844c-aef64bbdf710",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "40de3983-3bb9-4082-b3fc-a4958ecf0761",
      "MetaID": "d3c24ad2-dafb-439e-931f-a0c9b128f433",
      "Name": "SplineDistortFunc",
      "Version": "5a844e70-e713-49fb-9ccf-44651a1cd621",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDd3c24ad2_dafb_439e_931f_a0c9b128f433",
        "{",
        "    public class Class_SplineDistort : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            RGBANoise = 2,",
        "            uShift2 = 3,",
        "            MeshOffsetX = 4,",
        "            MeshOffsetY = 5,",
        "            MeshOffsetZ = 6,",
        "            DirectionX = 7,",
        "            DirectionY = 8,",
        "            DirectionZ = 9,",
        "            DirectionRegionUStep = 10,",
        "            DirectionRegionStepSmooth = 11,",
        "            NoiseAmount = 12,",
        "            NoiseRegionUStep = 13,",
        "            NoiseRegionStepSmooth = 14,",
        "            NoiseTime = 15,",
        "            NoiseScale = 16,",
        "            UpVectorX = 17,",
        "            UpVectorY = 18,",
        "            UpVectorZ = 19",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_SplineDistort()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> __params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var RGBANoise = inputs[(int)InputId.RGBANoise].Eval(context).Image; ",
        "            var uShift = inputs[(int)InputId.uShift2].Eval(context).Value;",
        "            var MeshOffsetX = inputs[(int)InputId.MeshOffsetX].Eval(context).Value;",
        "            var MeshOffsetY = inputs[(int)InputId.MeshOffsetY].Eval(context).Value;",
        "            var MeshOffsetZ = inputs[(int)InputId.MeshOffsetZ].Eval(context).Value;",
        "            var MeshOffset = new Vector3(MeshOffsetX, MeshOffsetY, MeshOffsetZ);",
        "            var DirectionX = inputs[(int)InputId.DirectionX].Eval(context).Value;",
        "            var DirectionY = inputs[(int)InputId.DirectionY].Eval(context).Value;",
        "            var DirectionZ = inputs[(int)InputId.DirectionZ].Eval(context).Value;",
        "            var Direction = new Vector3(DirectionX, DirectionY, DirectionZ);",
        "            var DirectionRegionUStep = inputs[(int)InputId.DirectionRegionUStep].Eval(context).Value;",
        "            var DirectionRegionStepSmooth = inputs[(int)InputId.DirectionRegionStepSmooth].Eval(context).Value;",
        "            var DirectionRegion = new Vector2(DirectionRegionUStep, DirectionRegionStepSmooth);",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseRegionUStep = inputs[(int)InputId.NoiseRegionUStep].Eval(context).Value;",
        "            var NoiseRegionStepSmooth = inputs[(int)InputId.NoiseRegionStepSmooth].Eval(context).Value;",
        "            var NoiseRegion = new Vector2(NoiseRegionUStep, NoiseRegionStepSmooth);",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var UpVectorX = inputs[(int)InputId.UpVectorX].Eval(context).Value;",
        "            var UpVectorY = inputs[(int)InputId.UpVectorY].Eval(context).Value;",
        "            var UpVectorZ = inputs[(int)InputId.UpVectorZ].Eval(context).Value;",
        "            var UpVector = new Vector3(UpVectorX, UpVectorY, UpVectorZ);",
        "            //<<< __params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            var noiseTextureView = new ShaderResourceView(context.D3DDevice, RGBANoise);",
        "            _effect.GetVariableByName(\"RGBANoise\").AsShaderResource().SetResource(noiseTextureView);",
        "            ",
        "            _effect.GetVariableByName(\"uShift\").AsScalar().Set(uShift);",
        "            _effect.GetVariableByName(\"MeshOffset\").AsVector().Set(MeshOffset);",
        "            _effect.GetVariableByName(\"Direction\").AsVector().Set(Direction);",
        "            _effect.GetVariableByName(\"DirectionRegion\").AsVector().Set(DirectionRegion);",
        "             ",
        "            _effect.GetVariableByName(\"NoiseAmount\").AsScalar().Set(NoiseAmount);            ",
        "            _effect.GetVariableByName(\"NoiseRegion\").AsVector().Set(NoiseRegion);",
        "            _effect.GetVariableByName(\"NoiseTime\").AsScalar().Set(NoiseTime);",
        "            _effect.GetVariableByName(\"NoiseScale\").AsScalar().Set(NoiseScale);",
        "            ",
        "            _effect.GetVariableByName(\"UpVector\").AsVector().Set(UpVector);",
        "                        ",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5ad52ffc-df08-4378-844c-aef64bbdf710"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "538a6871-7fe0-45a4-aa59-7a0142918503",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "56a497d3-782b-49db-b7d8-765dbcf18c1d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4c8ad2d7-4aad-4b4f-b15f-a5500825fdaf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "17ef2f1b-b637-430c-be0a-fdd2c02c5660",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9df27a27-f3dc-4c5d-9107-63ab6e1b098b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "203e990f-9b8a-4855-a711-2562644d3f29",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "728351df-c287-4388-8f5d-00e4c7cfab25",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "167a8040-f41f-4d95-bb48-b0b147236c53",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2b7554d0-b395-41c5-b432-b139c7c875a9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9821c134-04b4-49aa-be86-3a8bbb1e27eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "10efe5e7-74d1-41eb-aa5b-0c346e276319",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b46c9787-8810-4165-8bc7-dc76fa9b65b1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b996bf11-bf6c-4c16-9a88-fda26c78fa3b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c65591ca-1422-4b1c-a5c2-016b4d3b54ab",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bde972b3-4733-49a1-9dec-3d2a1f1f40b9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d2b5831e-cba7-49f7-a455-5302f24c83fe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "68b7b818-95cc-4135-a497-b136da6c8bfe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0df02a32-373c-456a-aad9-ec0760457c27",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "402881e5-30d8-46c0-8879-f62524d462f4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f0575291-e642-44c4-9d76-89d28a8aad44",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40de3983-3bb9-4082-b3fc-a4958ecf0761"
    }
  ]
}