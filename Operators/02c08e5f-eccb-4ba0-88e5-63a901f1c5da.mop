{
  "Name": "BlurWipe",
  "_id": "02c08e5f-eccb-4ba0-88e5-63a901f1c5da",
  "Namespace": "lib.image.effect",
  "Description": "Reduces noise (white pixels) in an image",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "383037a3-ab0d-4de7-bf9f-ec4f3b972dfc",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Angle;",
          "float SampleCount;",
          "float Strength;",
          "float Wipe;",
          "float Size;",
          "//<<< _parameters\r",
          "float4x4 ViewToWorld;\r",
          " \r",
          "//>>> setup\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "BlendState NoBlend \r",
          "{\r",
          "    AlphaToCoverageEnable = FALSE;\r",
          "    BlendEnable[0] = FALSE;\r",
          "};\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float width, height;\r",
          "    Image.GetDimensions(width, height);\r",
          "\r",
          "    float2 dir = float2( sin(Angle), cos(Angle));\r",
          "\r",
          "\r",
          "\r",
          "    // Calculate distance to line...\r",
          "    float2 p1 = float2(0.5,0.5);\r",
          "    float2 p2 = p1 + dir * 0.1; // BUG? Without the multiplication, the shader doesn't compile...\r",
          "    float size= length(dir);\r",
          "    float cx = p2.x - p1.x;\r",
          "    float cy = p2.y - p1.y;\r",
          "    float bx = -cy;\r",
          "    float by = cx;\r",
          "    float x= input.texCoord.x;\r",
          "    float y= input.texCoord.y;\r",
          "    float ex = x - p1.x;\r",
          "    float ey = y - p1.y;\r",
          "        \r",
          "    float dist = (ex*by - ey*bx) / (sqrt(bx*bx + by*by));\r",
          "    //float blendFactor = (dist / Strength + Wipe);\r",
          "    dist -= Wipe;\r",
          "    dist /= Size;\r",
          "    float blurStrength =  max(-dist * dist + 1,0);\r",
          "    float t = dist + 1.2;\r",
          "    float shadowStrength = max(-t * t + 1,0);\r",
          "\r",
          "    //float blurStrength = 1- abs(blendFactor - 0.5) ;\r",
          "    \r",
          "        dir *= blurStrength*Strength / float2(width,height)/SampleCount;\r",
          "\r",
          "    float2 pos = dir;\r",
          "    float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "    float totalWeight = 1;\r",
          "    for (int i = 0; i < SampleCount; ++i) {\r",
          "        float index = (float)i*(NUMWT - 1)/SampleCount;\r",
          "        float weight = lerp(Gauss[(int)index], Gauss[(int)index + 1], frac(index));\r",
          "        c += Image.Sample(samLinear, input.texCoord + pos)*weight;\r",
          "        c += Image.Sample(samLinear, input.texCoord - pos)*weight;\r",
          "        pos += dir;\r",
          "        totalWeight += 2*weight;\r",
          "    }\r",
          "\r",
          "    c.rgb = c.rgb/totalWeight;\r",
          "    c.rgb-= shadowStrength;\r",
          "    //c.r-= shadowStrength;\r",
          "    c.a = max(0 , dist+1.2);\r",
          "    //c.a=0.4;\r",
          "    //c.r = blurStrength;\r",
          "\r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "    SetBlendState( NoBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "8cf20f2f-dbb7-4ffd-975a-27a57f64e497",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle",
      "MetaInstanceID": "52ad62d7-ca05-4f56-badb-9d83e9ddf201",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleCount",
      "MetaInstanceID": "f17914d1-8bcb-45cf-8d29-27325507f382",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Strength",
      "MetaInstanceID": "4cbbf461-6670-4544-ae9f-aa250f9774ed",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Wipe",
      "MetaInstanceID": "3daa95a3-00bc-429d-8930-24136ab4ec6c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "3cbfc01a-ee1f-4f70-b47e-8fc7cbc8ce12",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "7d8d2593-a756-4958-8ed8-9f6d72f0d8a7",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ba62d778-7fe4-454c-84d5-82759c8b550b",
      "MetaID": "d7a9871f-34fa-410f-9677-b94084324eca",
      "Name": "BlurWipeFunc",
      "Version": "adf0ddd6-e38b-4475-af48-12960fe800cc",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDd7a9871f_34fa_410f_9677_b94084324eca",
        "{",
        "    public class Class_EnergiePhysik : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Angle = 2,",
        "            SampleCount = 3,",
        "            Strength = 4,",
        "            Wipe = 5,",
        "            Size = 6",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; if (Image == null) return context;",
        "            var Angle = inputs[(int)InputId.Angle].Eval(context).Value;",
        "            var SampleCount = inputs[(int)InputId.SampleCount].Eval(context).Value;",
        "            var Strength = inputs[(int)InputId.Strength].Eval(context).Value;",
        "            var Wipe = inputs[(int)InputId.Wipe].Eval(context).Value;",
        "            var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Angle\").AsScalar().Set(Angle);",
        "                    _effect.GetVariableByName(\"SampleCount\").AsScalar().Set(SampleCount);",
        "                    _effect.GetVariableByName(\"Strength\").AsScalar().Set(Strength);",
        "                    _effect.GetVariableByName(\"Wipe\").AsScalar().Set(Wipe);",
        "                    _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                //<<< _setup",
        "",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d8d2593-a756-4958-8ed8-9f6d72f0d8a7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "383037a3-ab0d-4de7-bf9f-ec4f3b972dfc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8cf20f2f-dbb7-4ffd-975a-27a57f64e497",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "52ad62d7-ca05-4f56-badb-9d83e9ddf201",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f17914d1-8bcb-45cf-8d29-27325507f382",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4cbbf461-6670-4544-ae9f-aa250f9774ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3daa95a3-00bc-429d-8930-24136ab4ec6c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3cbfc01a-ee1f-4f70-b47e-8fc7cbc8ce12",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ba62d778-7fe4-454c-84d5-82759c8b550b"
    }
  ]
}