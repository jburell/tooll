{
  "Name": "AnimatedEngeryGroup",
  "_id": "9756694b-28e8-422a-a119-598933595505",
  "Namespace": "projects.square.geometry",
  "Description": "",
  "Inputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "65106dd8-263c-4b8c-b3ab-8444ad59236d",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image2",
      "MetaInstanceID": "7f270b55-ca01-48ad-99fc-a86051574edb",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "9a16b787-15a2-4ecf-9313-c1688334e765",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [],
  "Operators": [
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "a7dd03f1-a3d2-4b10-a0e3-4d284d0fe257",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "829.691007299165",
        "PosY": "1627.29389041666",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float Twirl;",
              "Texture2D Image2;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "  \r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  [Rollout(10)] for (int i=0; i<iters; i++) {\r",
              "     if (p.w>Farrad) p = Minrad-p; else if (p.w<-Minrad) p = -1-p.w;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: \r",
              "    \r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    //if (r2 < Farrad) p /= Farrad; else if (r2 < 1.0) p /= r2;\r",
              "    p *= clamp(max(Minrad/r2, Minrad), 0.0, 1.0);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*Scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - abs(Scale - 1.0)) / p.w - pow(abs(Scale), float(1-iters)));\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    if(filter.r> 0.5) {\r",
              "        discard;\r",
              "    }\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>Twirl/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.2352919"
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.2831438"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.1235442"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.1981172"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.05968137"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.1044314"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.1471005"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "11.7516"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "1.7877"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "11.3"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "0.11695"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "-0.2999983"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "8.389999"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "2"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.151"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "0.19"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "26.3"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "22.066"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "10.38"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0.16"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.04599998"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0.006000001"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "12.5"
            ]
          },
          {
            "ID": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "4.571002"
            ]
          },
          {
            "ID": "39efe0cb-565a-40af-84f4-a1669d3d6690",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "2"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "2308925e-818b-4751-a7db-6defafefc059",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "962.257868438445",
        "PosY": "1809.92647908384",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float Twirl;",
              "Texture2D Image2;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "  \r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  [Rollout(10)] for (int i=0; i<iters; i++) {\r",
              "     if (p.w>Farrad) p = Minrad-p; else if (p.w<-Minrad) p = -1-p.w;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: \r",
              "    \r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    //if (r2 < Farrad) p /= Farrad; else if (r2 < 1.0) p /= r2;\r",
              "    p *= clamp(max(Minrad/r2, Minrad), 0.0, 1.0);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*Scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - abs(Scale - 1.0)) / p.w - pow(abs(Scale), float(1-iters)));\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    if(filter.r> 0.5) {\r",
              "        discard;\r",
              "    }\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>Twirl/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.2469749"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.02999997"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "0.1199989"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "4.331999"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "11.2"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "0.6662501"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "5.100001"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "9.285058"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "-2.400001"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.5439987"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "1.290001"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "2.94"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "0.5159983"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "8.889999"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "15.3"
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "5.720003"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.006001078"
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "0.68"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "2.05"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0.036"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "-2.2"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "-1.65"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0.26"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "14.3"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "0.24"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "0.03"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "7.769995"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "-32.8"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "c94cc1b3-cee7-490e-82b9-6be12801f44d",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "1185.98279508128",
        "PosY": "1698.07159247931",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float MinDist;",
              "Texture2D Image2;",
              "float3 Clamping;",
              "float2 Fold;",
              "float3 Increment;",
              "float3 Sphere;",
              "float SphereRadius;",
              "float4 BackgroundColor;",
              "float DistToColor;",
              "float4 GlowColor;",
              "float GlowStrength;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "  \r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  [Rollout(10)] for (int i=0; i<iters; i++) {\r",
              "     if (p.w>Farrad) p = Minrad-p; else if (p.w<-Minrad) p = -1-p.w;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: \r",
              "    \r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    //if (r2 < Farrad) p /= Farrad; else if (r2 < 1.0) p /= r2;\r",
              "    p *= clamp(max(Minrad/r2, Minrad), 0.0, 1.0);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*Scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - abs(Scale - 1.0)) / p.w - pow(abs(Scale), float(1-iters)));\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    //float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    //if(filter.r> 0.5) {\r",
              "    //    discard;\r",
              "    //}\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>MinDist/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.1846807"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.3316069"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.3195442"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.1888568"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.1442388"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.07176387"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.3289995"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "5"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "1.323"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "0.04795"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "3.000001"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "5.385059"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "1.8"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.2410002"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "0.1100001"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "3.640002"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "4.495999"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "0.4300002"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0.1377009"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.1299169"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "7.100002"
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.1510004"
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "2"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "2185e2fe-83e9-444b-9fea-5613401046ac",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "1004.32664903284",
        "PosY": "1664.94455550027",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float Twirl;",
              "Texture2D Image2;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    if(filter.r> 0.5) {\r",
              "        discard;\r",
              "    }\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<360&&abs(k)>Twirl/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.657176"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.7075481"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.6188793"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.117"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.06938627"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.3638389"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "137.3"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "-0.10275"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "0.3000008"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "1.485059"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "0.5999998"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.2910002"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "1.08"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "2.450002"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "2.066"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "0.77"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0.03432914"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.02540187"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0.01619316"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "4.500002"
            ]
          },
          {
            "ID": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "2.51"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.8910004"
            ]
          },
          {
            "ID": "39efe0cb-565a-40af-84f4-a1669d3d6690",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "2"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "Curve",
      "MetaInstanceID": "a4e019b3-32c3-414e-96c9-afeb5b2a60e1",
      "MetaID": "145c3a6b-b91f-450d-ac46-b13c66ebce19",
      "OperatorProperties": {
        "Name": "",
        "PosX": "193.816932215732",
        "PosY": "150.782780437202",
        "Width": "100",
        "Visible": "False",
        "Disabled": "False",
        "Inputs": [],
        "States": [
          {
            "ID": "3d314c47-8600-4b64-aea6-b972c28c17bd",
            "State": {
              "Changed": false,
              "Table": {
                "26.5384615384615": {
                  "Value": 2.7330002784729004,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": -0.04350477780910067,
                  "OutTangentAngle": 3.0980878757806924,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "35.6351700680272": {
                  "Value": 2.3370001316070557,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 6.2396805293704851,
                  "OutTangentAngle": 3.1490936341425422,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "47.100118168597": {
                  "Value": 2.4230000972747803,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.0075009805527492222,
                  "OutTangentAngle": 3.1263587363303715,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "68.6293760640297": {
                  "Value": 2.0949997901916504,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 6.2679513899201647,
                  "OutTangentAngle": 3.1415926535897931,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "82.4518647467972": {
                  "Value": 2.0949997901916504,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.0,
                  "OutTangentAngle": -3.1415926535897931,
                  "Weighted": false,
                  "BrokenTangents": false
                }
              },
              "PreCurveMapping": 0,
              "PostCurveMapping": 0,
              "PreCurveMapper": {},
              "PostCurveMapper": {}
            }
          }
        ]
      }
    },
    {
      "Name": "Time",
      "MetaInstanceID": "6b6c935d-c580-4358-9290-a09ef970b250",
      "MetaID": "253e302b-8141-4d17-96ee-42af092dbf59",
      "OperatorProperties": {
        "Name": "",
        "PosX": "193.816932215732",
        "PosY": "150.782780437202",
        "Width": "100",
        "Visible": "False",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    },
    {
      "Name": "Curve",
      "MetaInstanceID": "27ae59b4-1bb4-4464-9910-a78455fd5fc8",
      "MetaID": "145c3a6b-b91f-450d-ac46-b13c66ebce19",
      "OperatorProperties": {
        "Name": "",
        "PosX": "193.816932215732",
        "PosY": "150.782780437202",
        "Width": "100",
        "Visible": "False",
        "Disabled": "False",
        "Inputs": [],
        "States": [
          {
            "ID": "3d314c47-8600-4b64-aea6-b972c28c17bd",
            "State": {
              "Changed": false,
              "Table": {
                "26.5384615384615": {
                  "Value": 0.98199999332427979,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.13007789017670435,
                  "OutTangentAngle": 3.2716705437664975,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "35.6351700680272": {
                  "Value": 2.1719999313354492,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.13007789017670413,
                  "OutTangentAngle": 3.1407204308950516,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "47.100118168597": {
                  "Value": 2.1619999408721924,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 6.2823130844848443,
                  "OutTangentAngle": 3.1569194281961379,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "68.6293760640297": {
                  "Value": 2.4919998645782471,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.015326774606344762,
                  "OutTangentAngle": 3.1415926535897931,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "82.4518647467972": {
                  "Value": 2.4919998645782471,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.0,
                  "OutTangentAngle": -3.1415926535897931,
                  "Weighted": false,
                  "BrokenTangents": false
                }
              },
              "PreCurveMapping": 0,
              "PostCurveMapping": 0,
              "PreCurveMapper": {},
              "PostCurveMapper": {}
            }
          }
        ]
      }
    },
    {
      "Name": "Time",
      "MetaInstanceID": "6a655a11-2c4c-4632-8156-11fc95ead9d2",
      "MetaID": "253e302b-8141-4d17-96ee-42af092dbf59",
      "OperatorProperties": {
        "Name": "",
        "PosX": "193.816932215732",
        "PosY": "150.782780437202",
        "Width": "100",
        "Visible": "False",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    },
    {
      "Name": "Curve",
      "MetaInstanceID": "777e7255-97d2-40df-8110-142041f444d2",
      "MetaID": "145c3a6b-b91f-450d-ac46-b13c66ebce19",
      "OperatorProperties": {
        "Name": "",
        "PosX": "193.816932215732",
        "PosY": "150.782780437202",
        "Width": "100",
        "Visible": "False",
        "Disabled": "False",
        "Inputs": [],
        "States": [
          {
            "ID": "3d314c47-8600-4b64-aea6-b972c28c17bd",
            "State": {
              "Changed": false,
              "Table": {
                "0": {
                  "Value": 0.054000020027160645,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.0077998379769037562,
                  "OutTangentAngle": 3.1493924915666969,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "26.5384615384615": {
                  "Value": 0.26099991798400879,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.007799837976903758,
                  "OutTangentAngle": 3.1188468699661005,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "26.8461538461538": {
                  "Value": 0.25400000810623169,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 6.2604395235558936,
                  "OutTangentAngle": 3.1518323500177847,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "35.6351700680272": {
                  "Value": 0.34400001168251038,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.010239696427991642,
                  "OutTangentAngle": 3.1599072998088724,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "47.100118168597": {
                  "Value": 0.55399996042251587,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.018314646219079203,
                  "OutTangentAngle": 3.1457729885348673,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "68.6293760640297": {
                  "Value": 0.64399999380111694,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.0041803349450740363,
                  "OutTangentAngle": 3.1415926535897931,
                  "Weighted": false,
                  "BrokenTangents": false
                },
                "82.4518647467972": {
                  "Value": 0.64399999380111694,
                  "Tension": 0.0,
                  "Bias": 0.0,
                  "Continuity": 0.0,
                  "InType": 1,
                  "OutType": 1,
                  "InEditMode": 0,
                  "OutEditMode": 0,
                  "InTangentAngle": 0.0,
                  "OutTangentAngle": -3.1415926535897931,
                  "Weighted": false,
                  "BrokenTangents": false
                }
              },
              "PreCurveMapping": 0,
              "PostCurveMapping": 0,
              "PreCurveMapper": {},
              "PostCurveMapper": {}
            }
          }
        ]
      }
    },
    {
      "Name": "Time",
      "MetaInstanceID": "ca8db366-f508-494b-b4a9-9cc8335ece11",
      "MetaID": "253e302b-8141-4d17-96ee-42af092dbf59",
      "OperatorProperties": {
        "Name": "",
        "PosX": "193.816932215732",
        "PosY": "150.782780437202",
        "Width": "100",
        "Visible": "False",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "a66f17d2-467d-478a-92f0-7b36bfa8ae88",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "901.690173494923",
        "PosY": "1705.83879201803",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float MinDist;",
              "Texture2D Image2;",
              "float3 Clamping;",
              "float2 Fold;",
              "float3 Increment;",
              "float3 Sphere;",
              "float SphereRadius;",
              "float4 BackgroundColor;",
              "float DistToColor;",
              "float4 GlowColor;",
              "float GlowStrength;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "  \r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  [Rollout(10)] for (int i=0; i<iters; i++) {\r",
              "     if (p.w>Farrad) p = Minrad-p; else if (p.w<-Minrad) p = -1-p.w;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: \r",
              "    \r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    //if (r2 < Farrad) p /= Farrad; else if (r2 < 1.0) p /= r2;\r",
              "    p *= clamp(max(Minrad/r2, Minrad), 0.0, 1.0);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*Scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - abs(Scale - 1.0)) / p.w - pow(abs(Scale), float(1-iters)));\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>MinDist/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.1846807"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.3316069"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.3195442"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.1888568"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.1442388"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.07176387"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.1940006"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "5"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "1.323"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "0.04795"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "3.000001"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "5.385059"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "1.8"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.2410002"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "0.1100001"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "3.640002"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "4.495999"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "0.5800002"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0.1377009"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.1299169"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "7.100002"
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.1510004"
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "2"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "5f7771bc-5b4a-47cf-bd7b-3c352740786d",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "986.648928767857",
        "PosY": "1547.06238647883",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float Twirl;",
              "Texture2D Image2;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "  \r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  [Rollout(10)] for (int i=0; i<iters; i++) {\r",
              "     if (p.w>Farrad) p = Minrad-p; else if (p.w<-Minrad) p = -1-p.w;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: \r",
              "    \r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    //if (r2 < Farrad) p /= Farrad; else if (r2 < 1.0) p /= r2;\r",
              "    p *= clamp(max(Minrad/r2, Minrad), 0.0, 1.0);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*Scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - abs(Scale - 1.0)) / p.w - pow(abs(Scale), float(1-iters)));\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    if(filter.r> 0.5) {\r",
              "        discard;\r",
              "    }\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>Twirl/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.1846807"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.3316069"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.3195442"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.5475259"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.166448"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.04771534"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.1001006"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "9.221598"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "0.9856999"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "11.4"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "0.11695"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "3.000001"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "1.385059"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "2.7"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.1510002"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "0.1900001"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "9.210001"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "0.06599907"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "0.5700002"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.4899585"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0.4853621"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "12.5"
            ]
          },
          {
            "ID": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.3710024"
            ]
          },
          {
            "ID": "39efe0cb-565a-40af-84f4-a1669d3d6690",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "8a084ad7-769b-4ff5-8e93-72ae5984e2ff",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "727.392384562515",
        "PosY": "1679.23379536768",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float Twirl;",
              "Texture2D Image2;",
              "float3 Clamping;",
              "float2 Fold;",
              "float3 Increment;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "\r",
              "    // precomputed constants\r",
              "    float minRad2 = clamp(Minrad, 1.0e-9, 1.0);\r",
              "    float4 scale = float4(Scale, Scale, Scale, abs(Scale)) / minRad2;\r",
              "    float absScalem1 = abs(Scale - 1.0);\r",
              "    float AbsScaleRaisedTo1mIters = pow(abs(Scale), float(1-iters));\r",
              "    float DIST_MULTIPLIER = StepSize;\r",
              "\r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  for (int i=0; i<iters; i++) {\r",
              "    // box folding: if (p>1) p = 2-p; else if (p<-1) p = -2-p;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "//    p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "    \r",
              "    p.xyz = clamp(p.xyz, Clamping.x, Clamping.y) * Clamping.z - p.xyz;  // min;max;mad\r",
              "    \r",
              "\r",
              "    // sphere folding: if (r2 < minRad2) p /= minRad2; else if (r2 < 1.0) p /= r2;\r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    p *= clamp(max(minRad2/r2, minRad2), Fold.x, Fold.y);  // dp3,div,max.sat,mul\r",
              "p.xyz+= float3(Increment.x,Increment.y,Increment.z);\r",
              "    // scale, translate\r",
              "    p = p*scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters) * DIST_MULTIPLIER;\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    if(filter.r> 0.5) {\r",
              "        discard;\r",
              "    }\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>Twirl/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    //float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    float ao= getAO(p,n,AmbientOcclusion.x,aoSteps, AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.2065445"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.2581438"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.2478857"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.3530404"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.1164452"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.1237365"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.08999997"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "-0.02000007"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "3.109"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "24.4"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "1.10995"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "1.000001"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "0.08505845"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "-1.5"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.02100021"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "0.1900001"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "3.06"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "0.4759986"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "5.529999"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "4.299999"
            ]
          },
          {
            "ID": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "3.1"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "1.161001"
            ]
          },
          {
            "ID": "39efe0cb-565a-40af-84f4-a1669d3d6690",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "1.07"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "1.96"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "8.7"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "5.1"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "5.5"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "6d3bb10d-432a-4d1d-828f-c9fc491a0c52",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "",
        "PosX": "849.843762665566",
        "PosY": "1801.73526812058",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float Twirl;",
              "Texture2D Image2;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "\r",
              "    // precomputed constants\r",
              "    float minRad2 = clamp(Minrad, 1.0e-9, 1.0);\r",
              "    float4 scale = float4(Scale, Scale, Scale, abs(Scale)) / minRad2;\r",
              "    float absScalem1 = abs(Scale - 1.0);\r",
              "    float AbsScaleRaisedTo1mIters = pow(abs(Scale), float(1-iters));\r",
              "    float DIST_MULTIPLIER = 1.0;\r",
              "\r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  for (int i=0; i<iters; i++) {\r",
              "    // box folding: if (p>1) p = 2-p; else if (p<-1) p = -2-p;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "//    p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: if (r2 < minRad2) p /= minRad2; else if (r2 < 1.0) p /= r2;\r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    p *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters) * DIST_MULTIPLIER;\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "    if(filter.r> 0.5) {\r",
              "        discard;\r",
              "    }\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>Twirl/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.1846807"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.3316069"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.3195442"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.5475259"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.166448"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.04771534"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.3371006"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "10.9416"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "2.7407"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "26.5"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "0.12495"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "5.500001"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "-6.414942"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "0.8999996"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.09100021"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "0.2600001"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "2.930001"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "1.225999"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "0.8400002"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.008797012"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0.008714487"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "4.6"
            ]
          },
          {
            "ID": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "9.9"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.04100251"
            ]
          },
          {
            "ID": "39efe0cb-565a-40af-84f4-a1669d3d6690",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "EnergiePhysik",
      "MetaInstanceID": "0594eb93-1bcd-4616-85ab-87369a968538",
      "MetaID": "16f57db6-4a6d-48e0-a633-46e55ac20fe8",
      "OperatorProperties": {
        "Name": "AmsomeSimpleCube",
        "PosX": "1087.02829426617",
        "PosY": "1810.1130925475",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "5ac55c8f-d6c5-43ad-bb6e-2bcab52e10ff",
            "Type": "Text",
            "Value": [
              "//>>> _common parameters\r",
              "float4x4 objectToWorldMatrix;",
              "float4x4 worldToCameraMatrix;",
              "float4x4 projMatrix;",
              "Texture2D txDiffuse;",
              "float2 RenderTargetSize;",
              "//<<< _common parameters\r",
              "\r",
              "//>>> _parameters\r",
              "float4 Color1;",
              "float4 Color2;",
              "float Minrad;",
              "float Farrad;",
              "float Scale;",
              "float StepCount;",
              "float StepSize;",
              "float3 LightPos;",
              "float2 Specular;",
              "float FogDistance;",
              "float2 AmbientOcclusion;",
              "float4 AOColor;",
              "float FogDecay;",
              "Texture2D Image;",
              "float aoSteps;",
              "float MinDist;",
              "Texture2D Image2;",
              "float3 Clamping;",
              "float2 Fold;",
              "float3 Increment;",
              "float3 Sphere;",
              "float SphereRadius;",
              "float4 BackgroundColor;",
              "float DistToColor;",
              "float4 GlowColor;",
              "float GlowStrength;",
              "//<<< _parameters\r",
              "float4x4 ViewToWorld;\r",
              " \r",
              "//>>> setup\r",
              "SamplerState samLinear",
              "{",
              "    Filter = MIN_MAG_MIP_LINEAR;",
              "    AddressU = Clamp;",
              "    AddressV = Clamp;",
              "};",
              "//<<< setup\r",
              "\r",
              "//>>> declarations\r",
              "struct VS_IN\r",
              "{\r",
              "    float4 pos : POSITION;\r",
              "    float2 texCoord : TEXCOORD;\r",
              "};\r",
              "\r",
              "struct PS_IN\r",
              "{\r",
              "    float4 pos : SV_POSITION;\r",
              "    float2 texCoord: TEXCOORD0;\t    \r",
              "    float3 worldTViewPos: TEXCOORD1;\r",
              "    float3 worldTViewDir: TEXCOORD2;\r",
              "};\r",
              "//<<< declarations\r",
              "\r",
              "//>>> _GS\r",
              "",
              "//<<< _GS\r",
              "\r",
              "//>>> VS \r",
              "PS_IN VS( VS_IN input )\r",
              "{\r",
              "    PS_IN output = (PS_IN)0;\r",
              "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
              "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
              "    output.pos = mul(output.pos, projMatrix);\r",
              "    output.texCoord = input.texCoord;\r",
              "\r",
              "    float4 viewTNearFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 0.0, 1.0);\r",
              "    float4 worldTNearFragPos = mul(viewTNearFragPos, ViewToWorld);\r",
              "    worldTNearFragPos /= worldTNearFragPos.w;\r",
              "\r",
              "    float4 viewTFarFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, 1.0, 1.0);\r",
              "    float4 worldTFarFragPos = mul(viewTFarFragPos, ViewToWorld);\r",
              "    worldTFarFragPos /= worldTFarFragPos.w;\r",
              "\r",
              "    output.worldTViewDir = normalize(worldTFarFragPos.xyz - worldTNearFragPos.xyz);\r",
              "\r",
              "    output.worldTViewPos = worldTNearFragPos;\r",
              "    return output;\r",
              "}\r",
              "//<<< VS\r",
              "\r",
              "//>>> PS\r",
              "float getDistance2(float3 c)\r",
              "{\r",
              "    float sc=Scale;\t// ; scale darf nicht kleiner 1\r",
              "    float de=1;\r",
              "    float fr2=Farrad;\t// farrad*farrad\r",
              "    float mr2=Minrad;\t// ;minrad*minrad\r",
              "    float3 p=0;\r",
              "\r",
              "    int i;\r",
              "    [rollout(12)] for(i=0;i<12;i++)\r",
              "    {\r",
              "        p=sign(p)*(1-abs(abs(p)-1));\r",
              "        float r2=dot(p,p);\r",
              "        if(r2<mr2) {\r",
              "            p*=fr2/mr2;\r",
              "            de*=fr2/mr2;\r",
              "        }\r",
              "        else if(r2<fr2)\r",
              "        {\r",
              "            p*=fr2/r2;\r",
              "            de*=fr2/r2;\r",
              "        }\r",
              "        p*=sc;\r",
              "        p+=c;\r",
              "        de*=sc;\r",
              "        de+=1;\r",
              "    }\r",
              "    return(length(p)-sc+1)/de-pow(sc,1-i);\r",
              "}\r",
              "\r",
              "int iters = 8;\r",
              "\r",
              "\r",
              "\r",
              "// Compute the distance from |pos| to the Mandelbox.\r",
              "float getDistance(float3 pos) {\r",
              "\r",
              "    // precomputed constants\r",
              "    float minRad2 = clamp(Minrad, 1.0e-9, 1.0);\r",
              "    float4 scale = float4(Scale, Scale, Scale, abs(Scale)) / minRad2;\r",
              "    float absScalem1 = abs(Scale - 1.0);\r",
              "    float AbsScaleRaisedTo1mIters = pow(abs(Scale), float(1-iters));\r",
              "    float DIST_MULTIPLIER = StepSize;\r",
              "\r",
              "  float4 p = float4(pos,1), p0 = p;  // p.w is the distance estimate\r",
              "\r",
              "  for (int i=0; i<iters; i++) {\r",
              "    // box folding: if (p>1) p = 2-p; else if (p<-1) p = -2-p;\r",
              "//    p.xyz = abs(1.0+p.xyz) - p.xyz - abs(1.0-p.xyz);  // add;add;abs.add;abs.add (130.4%)\r",
              "//    p.xyz = clamp(p.xyz*0.5+0.5, 0.0, 1.0) * 4.0 - 2.0 - p.xyz;  // mad.sat;mad;add (102.3%)\r",
              "    //p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // min;max;mad\r",
              "    p.xyz = clamp(p.xyz, Clamping.x, Clamping.y) * Clamping.z - p.xyz;  // min;max;mad\r",
              "\r",
              "    // sphere folding: if (r2 < minRad2) p /= minRad2; else if (r2 < 1.0) p /= r2;\r",
              "    float r2 = dot(p.xyz, p.xyz);\r",
              "    p *= clamp(max(minRad2/r2, minRad2), Fold.x, Fold.y);  // dp3,div,max.sat,mul\r",
              "\r",
              "    // scale, translate\r",
              "    p = p*scale + p0;\r",
              "  }\r",
              "  return ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters) * DIST_MULTIPLIER;\r",
              "}\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "float3 getNormal(float3 p)\r",
              "{\r",
              "    float dt=.0001;\r",
              "    float3 n=float3(getDistance(p+float3(dt,0,0)),getDistance(p+float3(0,dt,0)),getDistance(p+float3(0,0,dt)))-getDistance(p);\r",
              "    return normalize(n);\r",
              "}\r",
              "\r",
              "\r",
              "float getAO(float3 aoposition, float3 aonormal, float aodistance, float aoiterations, float aofactor)\r",
              "{\r",
              "    float ao = 0.0;\r",
              "    float k = aofactor;\r",
              "    aodistance /= aoiterations;\r",
              "    for (float i=1; i < aoiterations; i += 1)\r",
              "    {\r",
              "        ao += (i * aodistance - getDistance(aoposition + aonormal * i * aodistance)) / pow(2,i);\r",
              "    }\r",
              "    return 1.0 - k * ao;\r",
              "}\r",
              "\r",
              "float4 getTexture2(float3 p, float3 n) \r",
              "{\r",
              "    float s = 1.3;\r",
              "    float dx = abs(n.x);\r",
              "    float dy = abs(n.y);\r",
              "    float dz = abs(n.z);\r",
              "    if (dx > dy  > dz) return  Image.Sample(samLinear, float2(frac(p.z*s), frac(p.y * s))); \r",
              "    if (dy > dz) return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.z * s)));\r",
              "    return  Image.Sample(samLinear, float2(frac(p.x*s), frac(p.y * s)));\r",
              "}\r",
              "\r",
              "\r",
              "float4 PS( PS_IN input ) : SV_Target\r",
              "{\r",
              "\r",
              "\r",
              "    //float4 filter= Image2.Sample(samLinear, input.texCoord);\r",
              "\r",
              "        //return float4(1,0,0,0);\r",
              "    \r",
              "\r",
              "    float3 d = normalize(input.worldTViewDir);\r",
              "    float3 p = input.worldTViewPos ;\r",
              "    float3 sp = p;\r",
              "    float k = 1.0;\r",
              "    \r",
              "    for(int i=0;i<StepCount && abs(k)>MinDist/1000;i++)\r",
              "    {\r",
              "\r",
              "        k=getDistance(p);\r",
              "        p+=d*k;\t\r",
              "    }\r",
              "    float3 n=getNormal(p);\r",
              "    //n-=  getTexture2(p,n)*1.8;\r",
              "    float h=dot(n,LightPos)*Specular.x+Specular.y;\r",
              "    float specular=pow(saturate(dot(n,normalize(normalize(sp-p)+LightPos))),FogDecay);\r",
              "    h*=FogDistance-length(p-sp);\r",
              "    float4 outColor = clamp(Color1*h,0,1)+ clamp(Color2*(1-h)*0.12+specular,0,1);\r",
              "    \r",
              "    float t = i/StepCount;\r",
              "    \r",
              "    //ambient occlusion    \r",
              "    float ao= clamp(k*AmbientOcclusion.x*100,0,1)*AmbientOcclusion.y;    \r",
              "    //float ao= getAO(p,n,k,AmbientOcclusion.x,AmbientOcclusion.y);    \r",
              "    outColor.rgb= lerp(AOColor.rgb,outColor.rgb, 1-ao); \r",
              "   \r",
              " \r",
              "    outColor.a=1.0;\r",
              "    return outColor;\r",
              "\r",
              "}\r",
              "//<<< PS\r",
              "\r",
              "//>>> _technique\r",
              "technique10 Render",
              "{",
              "    pass P0",
              "    {",
              "        SetGeometryShader( 0 );",
              "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
              "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
              "    }",
              "}",
              "//<<< _technique\r",
              ""
            ]
          },
          {
            "ID": "a1c31ee8-3d14-46b9-bc02-213a3426c135",
            "Type": "Float",
            "Value": [
              "0.1846807"
            ]
          },
          {
            "ID": "f15a7466-50bc-4829-b1bc-fcbd68156a31",
            "Type": "Float",
            "Value": [
              "0.3316069"
            ]
          },
          {
            "ID": "bde9a625-4e41-47b7-a43a-3be079c5ffe6",
            "Type": "Float",
            "Value": [
              "0.3195442"
            ]
          },
          {
            "ID": "d592faa5-abdc-4f55-9316-bda0695fd27b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0d583b5c-eaa6-4eaa-8dfc-0ee60629e75e",
            "Type": "Float",
            "Value": [
              "0.1605246"
            ]
          },
          {
            "ID": "0952d87c-0300-4cda-8e33-fac8e1456f0d",
            "Type": "Float",
            "Value": [
              "0.2976206"
            ]
          },
          {
            "ID": "2e08d1ba-dc61-4bb1-a7b3-cfc02db040bb",
            "Type": "Float",
            "Value": [
              "0.2230161"
            ]
          },
          {
            "ID": "f4d140d7-50e8-462f-9211-d35ec2b628ec",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e7a051f3-d8da-4d07-98d9-ca916ce16795",
            "Type": "Float",
            "Value": [
              "0.3371006"
            ]
          },
          {
            "ID": "d0f64eff-23ea-418b-b179-16e58e8c9e27",
            "Type": "Float",
            "Value": [
              "12.8416"
            ]
          },
          {
            "ID": "07a44140-3b44-4908-9d75-026ede2b843e",
            "Type": "Float",
            "Value": [
              "2.7407"
            ]
          },
          {
            "ID": "90ef2441-bd59-42a2-9095-333e777868aa",
            "Type": "Float",
            "Value": [
              "26.5"
            ]
          },
          {
            "ID": "38da14cb-768d-4a0c-b7c2-82796822e80e",
            "Type": "Float",
            "Value": [
              "1.19295"
            ]
          },
          {
            "ID": "10069a68-f2ac-47e8-9789-ae59c2719fa4",
            "Type": "Float",
            "Value": [
              "10.9"
            ]
          },
          {
            "ID": "c23edb6c-a167-4375-bc81-afe06f0d0cf7",
            "Type": "Float",
            "Value": [
              "-6.414942"
            ]
          },
          {
            "ID": "e1a71bb6-d666-40c5-b7cc-17afcc238026",
            "Type": "Float",
            "Value": [
              "0.8999996"
            ]
          },
          {
            "ID": "336da307-da53-4fc7-a21b-b2b665c039b7",
            "Type": "Float",
            "Value": [
              "0.5310002"
            ]
          },
          {
            "ID": "15a42d56-dda4-4e74-afab-aff97b633899",
            "Type": "Float",
            "Value": [
              "1.41"
            ]
          },
          {
            "ID": "4084070e-bbf2-4447-ab21-c1e0b29308a4",
            "Type": "Float",
            "Value": [
              "-0.789999"
            ]
          },
          {
            "ID": "97d4a5a2-aa1f-4130-be10-8d968e545264",
            "Type": "Float",
            "Value": [
              "0.04599905"
            ]
          },
          {
            "ID": "eb225795-4483-423c-8341-7bcff5029dbd",
            "Type": "Float",
            "Value": [
              "1.6"
            ]
          },
          {
            "ID": "79484dbc-5f28-4cef-95a9-b365271f25ca",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "adc7b129-06b8-427e-88b7-d93bfd0d4d7b",
            "Type": "Float",
            "Value": [
              "0.008797012"
            ]
          },
          {
            "ID": "240155cc-2225-4bb1-a5ce-4330f60f75dc",
            "Type": "Float",
            "Value": [
              "0.008714487"
            ]
          },
          {
            "ID": "497dd0f6-a508-48ab-93ac-31d085aa0df5",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6fd515e-e24e-4c25-8692-830b0c23bee2",
            "Type": "Float",
            "Value": [
              "4.6"
            ]
          },
          {
            "ID": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "8ff0ee70-f60c-40fa-ac10-987b2fcb97c9",
            "Type": "Float",
            "Value": [
              "10"
            ]
          },
          {
            "ID": "c7d1b59a-e8fa-49b1-86e7-568342b0a0d2",
            "Type": "Float",
            "Value": [
              "0.04100251"
            ]
          },
          {
            "ID": "39efe0cb-565a-40af-84f4-a1669d3d6690",
            "Type": "Image",
            "Value": [
              ""
            ]
          },
          {
            "ID": "f8d4cf91-5e61-4dda-8864-549641893a1d",
            "Type": "Float",
            "Value": [
              "-1.45"
            ]
          },
          {
            "ID": "c3901c00-b1f6-484e-82da-759a242b76d7",
            "Type": "Float",
            "Value": [
              "-0.1200001"
            ]
          },
          {
            "ID": "f3242327-e6bc-49ec-be8d-e69f76b066ea",
            "Type": "Float",
            "Value": [
              "0.98"
            ]
          },
          {
            "ID": "f91f5271-89a4-4c01-a79c-46a35be3255f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "d30a6ac6-e177-4ae6-8ebe-a9c66771e526",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0126f17b-627e-4327-8a2d-19935c6c2c49",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b6540290-162f-4a35-8d56-ff1492be8539",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "b575c932-5dfa-482b-be93-8dde9a29dc7f",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "58378943-6629-4412-be32-ad072ff46a7a",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "f3c6473e-636c-4f29-9513-89c7fc443f37",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "afd07910-50e7-4695-b7ac-d6c42b4e0b83",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "a384769b-fb63-44b9-8d8e-2679bc0a8628",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "8c097519-c755-4c94-9256-ec27827b5961",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "e6f290c3-7bae-4d9d-be4f-caeca035af5a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "14227324-d98f-468d-bc83-70254f968cd7",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "1cd4a51b-6ed1-440c-8cc2-888608cddc3a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "4f0de180-1f72-4373-ba53-3a1df8a8c37e",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "fcf54fd9-f993-490e-986c-2b415cd2042d",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "0bb7a8f0-e8e2-45f2-a00b-9dc093e1a3bb",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "90067ceb-8103-4682-bbb5-0011381529cf",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "f991d26c-c47f-4426-b5f8-ee9c5cb78920",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "bc53a0a6-6529-47be-a438-330d7f93f1ed",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "Layer2d",
      "MetaInstanceID": "8b7d8409-468e-4783-a347-10ced164eea0",
      "MetaID": "c6e1c4b9-28a8-41fb-a9fa-74591a1239f0",
      "OperatorProperties": {
        "Name": "",
        "PosX": "1202.79637996278",
        "PosY": "1619.64990215651",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "558a0362-3802-4278-82b5-c5149223034b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "00edfeb2-e957-4aae-b31e-02e855933669",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "338288cf-ed05-4316-9444-bf58077dc42b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "ebbd3da8-4e99-4619-99da-51b9bbe0e085",
            "Type": "Float",
            "Value": [
              "1"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "9549dcb6-e1a8-4580-b284-6a7aa99e1635",
      "MetaID": "43403a8d-9c87-414a-89e2-9393b87d9e47",
      "OperatorProperties": {
        "Name": "",
        "PosX": "1202.79637996278",
        "PosY": "1594.64990215652",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "810e1039-99f0-401c-a106-3e87bd2811fb",
            "Type": "Float",
            "Value": [
              "7.188242"
            ]
          },
          {
            "ID": "465c0f09-2564-4d74-97e5-f16e4a168bcf",
            "Type": "Float",
            "Value": [
              "-3.570658"
            ]
          },
          {
            "ID": "db7fa71f-f8fd-4c13-b1a7-716a32ddb7c5",
            "Type": "Float",
            "Value": [
              "-7.208658"
            ]
          },
          {
            "ID": "cd55616a-d11d-4b9b-ad6d-6071cac5e87b",
            "Type": "Float",
            "Value": [
              "0.06706952"
            ]
          },
          {
            "ID": "28827d15-597c-4214-8be9-72762d229578",
            "Type": "Float",
            "Value": [
              "-1.853309"
            ]
          },
          {
            "ID": "7dcec0b7-d396-406c-9291-c6a82a371e47",
            "Type": "Float",
            "Value": [
              "0.7512955"
            ]
          },
          {
            "ID": "85c9b855-49ac-4e01-a28f-6e78623790e6",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "af457538-0d01-44c1-8517-6cc44cf9139a",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "da7097f3-8251-4dcc-8c6a-0efdb78c3a30",
            "Type": "Float",
            "Value": [
              "0"
            ]
          },
          {
            "ID": "796f5b32-395f-4d8c-bce2-4c3c69ca7d7b",
            "Type": "Float",
            "Value": [
              "-1"
            ]
          },
          {
            "ID": "f8cfff94-5eac-4970-a093-2398cbe1811d",
            "Type": "Float",
            "Value": [
              "0.1"
            ]
          },
          {
            "ID": "e6b3f27b-b21e-429b-99fb-f1e591b672ce",
            "Type": "Float",
            "Value": [
              "1000"
            ]
          },
          {
            "ID": "0ccdda43-9ffb-4e32-9056-13b081866cfc",
            "Type": "Float",
            "Value": [
              "45"
            ]
          },
          {
            "ID": "e56ef057-a4c7-46a1-a6a0-6dbf76eeafcb",
            "Type": "Float",
            "Value": [
              "0"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "LoadImage",
      "MetaInstanceID": "ebb2b00c-8a18-470b-a53f-7d7069dd317a",
      "MetaID": "384b6557-a535-4766-bce2-6c8c1e6fcf14",
      "OperatorProperties": {
        "Name": "",
        "PosX": "944.153832067122",
        "PosY": "1929.88774732166",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "2ddcf044-4709-4e79-b466-0780b0c1e1e4",
            "Type": "Text",
            "Value": [
              "assets/images/frog.png"
            ]
          }
        ],
        "States": []
      }
    },
    {
      "Name": "Canvas",
      "MetaInstanceID": "2e8a409f-4210-458f-9aa8-16b80926ef41",
      "MetaID": "65ee8537-143f-44f1-a167-b9339fdf551e",
      "OperatorProperties": {
        "Name": "",
        "PosX": "1083.77835530306",
        "PosY": "1900.46274449095",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [
          {
            "ID": "592f4695-f4db-4c89-9f84-ed37e64fec12",
            "Type": "Float",
            "Value": [
              "512"
            ]
          },
          {
            "ID": "0f9f1e93-3f75-4458-916c-3d3fc8571666",
            "Type": "Float",
            "Value": [
              "512"
            ]
          },
          {
            "ID": "caf5144d-7da7-482a-8c8b-ea35c88509cc",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "daa22902-6de3-4146-bb07-0c6964872336",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "2f3b6b5e-99f8-4e3e-b115-427313d507db",
            "Type": "Float",
            "Value": [
              "1"
            ]
          },
          {
            "ID": "a82fb75a-f132-4ea6-8050-ae94f586577b",
            "Type": "Float",
            "Value": [
              "1"
            ]
          }
        ],
        "States": []
      }
    }
  ],
  "Connections": [
    {
      "SourceOp": "ca8db366-f508-494b-b4a9-9cc8335ece11",
      "SourceOpPart": "fccdfff4-07c3-4c5c-9b4c-9a62c7ad7d66",
      "TargetOp": "777e7255-97d2-40df-8110-142041f444d2",
      "TargetOpPart": "9de89cc6-2867-4eb3-9e16-e9568d14a31e"
    },
    {
      "SourceOp": "777e7255-97d2-40df-8110-142041f444d2",
      "SourceOpPart": "fccdfff4-07c3-4c5c-9b4c-9a62c7ad7d66",
      "TargetOp": "2185e2fe-83e9-444b-9fea-5613401046ac",
      "TargetOpPart": "e7a051f3-d8da-4d07-98d9-ca916ce16795"
    },
    {
      "SourceOp": "6a655a11-2c4c-4632-8156-11fc95ead9d2",
      "SourceOpPart": "fccdfff4-07c3-4c5c-9b4c-9a62c7ad7d66",
      "TargetOp": "27ae59b4-1bb4-4464-9910-a78455fd5fc8",
      "TargetOpPart": "9de89cc6-2867-4eb3-9e16-e9568d14a31e"
    },
    {
      "SourceOp": "27ae59b4-1bb4-4464-9910-a78455fd5fc8",
      "SourceOpPart": "fccdfff4-07c3-4c5c-9b4c-9a62c7ad7d66",
      "TargetOp": "2185e2fe-83e9-444b-9fea-5613401046ac",
      "TargetOpPart": "d0f64eff-23ea-418b-b179-16e58e8c9e27"
    },
    {
      "SourceOp": "6b6c935d-c580-4358-9290-a09ef970b250",
      "SourceOpPart": "fccdfff4-07c3-4c5c-9b4c-9a62c7ad7d66",
      "TargetOp": "a4e019b3-32c3-414e-96c9-afeb5b2a60e1",
      "TargetOpPart": "9de89cc6-2867-4eb3-9e16-e9568d14a31e"
    },
    {
      "SourceOp": "a4e019b3-32c3-414e-96c9-afeb5b2a60e1",
      "SourceOpPart": "fccdfff4-07c3-4c5c-9b4c-9a62c7ad7d66",
      "TargetOp": "2185e2fe-83e9-444b-9fea-5613401046ac",
      "TargetOpPart": "07a44140-3b44-4908-9d75-026ede2b843e"
    },
    {
      "SourceOp": "8b7d8409-468e-4783-a347-10ced164eea0",
      "SourceOpPart": "76bdc878-f5e9-4b35-a44a-77a23d309c03",
      "TargetOp": "9549dcb6-e1a8-4580-b284-6a7aa99e1635",
      "TargetOpPart": "43db4b66-089f-4222-82ed-2fb064a15371"
    },
    {
      "SourceOp": "ebb2b00c-8a18-470b-a53f-7d7069dd317a",
      "SourceOpPart": "fad40dfa-a94e-4c07-a008-3d6d59f5438a",
      "TargetOp": "2308925e-818b-4751-a7db-6defafefc059",
      "TargetOpPart": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e"
    },
    {
      "SourceOp": "ebb2b00c-8a18-470b-a53f-7d7069dd317a",
      "SourceOpPart": "fad40dfa-a94e-4c07-a008-3d6d59f5438a",
      "TargetOp": "2308925e-818b-4751-a7db-6defafefc059",
      "TargetOpPart": "39efe0cb-565a-40af-84f4-a1669d3d6690"
    },
    {
      "SourceOp": "c94cc1b3-cee7-490e-82b9-6be12801f44d",
      "SourceOpPart": "e8003528-731e-4480-b090-053763611ba9",
      "TargetOp": "8b7d8409-468e-4783-a347-10ced164eea0",
      "TargetOpPart": "e26b3a5b-cd72-47c4-9e3f-96a679418f26"
    },
    {
      "SourceOp": "2e8a409f-4210-458f-9aa8-16b80926ef41",
      "SourceOpPart": "b8881370-4312-4973-9aff-d9caa5002c5c",
      "TargetOp": "c94cc1b3-cee7-490e-82b9-6be12801f44d",
      "TargetOpPart": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e"
    },
    {
      "SourceOp": "2e8a409f-4210-458f-9aa8-16b80926ef41",
      "SourceOpPart": "b8881370-4312-4973-9aff-d9caa5002c5c",
      "TargetOp": "c94cc1b3-cee7-490e-82b9-6be12801f44d",
      "TargetOpPart": "39efe0cb-565a-40af-84f4-a1669d3d6690"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7f270b55-ca01-48ad-99fc-a86051574edb",
      "TargetOp": "a66f17d2-467d-478a-92f0-7b36bfa8ae88",
      "TargetOpPart": "39efe0cb-565a-40af-84f4-a1669d3d6690"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "65106dd8-263c-4b8c-b3ab-8444ad59236d",
      "TargetOp": "a66f17d2-467d-478a-92f0-7b36bfa8ae88",
      "TargetOpPart": "7b630a81-ed6a-4a09-a78a-8de7aa373f0e"
    },
    {
      "SourceOp": "a66f17d2-467d-478a-92f0-7b36bfa8ae88",
      "SourceOpPart": "e8003528-731e-4480-b090-053763611ba9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9a16b787-15a2-4ecf-9313-c1688334e765"
    }
  ]
}