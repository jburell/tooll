{
  "Name": "NoiseDistortShader3",
  "_id": "2fa64201-17eb-4e8d-82fd-b7c11232aab0",
  "Namespace": "projects.coronoid.shaders",
  "Description": "Super complicated displacement-shader inspired by Tooll1. Uses a function f(u) that defines a spline in space. u is derived from a x-position of the incoming mesh.  \r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "ad417339-8147-428e-bedb-7d26a06be494",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "Texture2D RGBANoise;",
          "float3 NoiseOffset;",
          "float NoiseAmount;",
          "float NoiseTime;",
          "float NoiseRepeat;",
          "float AmplifySurface;",
          "float FlatShadingFactor;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "float smoothStep( float t, float step, float smooth) {\r",
          "    t = (t-step) / smooth;\r",
          "    t=  t * t * t * (t * (t * 6 - 15) + 10);    \r",
          "    return clamp(t,0,1);\r",
          "}\r",
          "\r",
          "float3 getOffset(float3 p) {\r",
          "\r",
          "    float3 offset =float3(0,0,0);\r",
          "    p+= NoiseOffset;\r",
          "\r",
          "    // Noise Offset\r",
          "    float3 noise1 = (RGBANoise.SampleLevel(samLinear, (p.xz + NoiseTime*10 * float3(0.14,0.53,0.41) ) / NoiseRepeat , 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noise2 = (RGBANoise.SampleLevel(samLinear, (p.yz + NoiseTime*6 * float3(0.41,0.31,0.01) ) / NoiseRepeat , 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noise3 = (RGBANoise.SampleLevel(samLinear, (p.yx + NoiseTime*9 * float3(0.74,0.15,0.55) ) / NoiseRepeat , 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noiseCombined = noise1+noise2+noise3;\r",
          "    return noiseCombined;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "\r",
          "    // Calculate Face Normal\r",
          "    float3 faceNormal = (input[0].normal + input[1].normal + input[2].normal)/3;\r",
          "    float3 faceCenter = (input[0].pos + input[1].pos + input[2].pos)/3;\r",
          "    \r",
          "    //float3 p2 = faceCenter + NoisehOffset;        \r",
          "        \r",
          "    float3 pOffset= getOffset(faceCenter);        \r",
          "    float3 nOffset= getOffset(faceCenter +faceNormal * AmplifySurface);\r",
          "    float3 distortedFaceNormal = normalize(faceNormal + nOffset  - pOffset);\r",
          "                        \r",
          "    //vertex.pos.xyz = p2+ pOffset;       \r",
          "\r",
          "\r",
          "    \r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p2 = vertex.pos;\r",
          "        //float3 p2 = p + MeshOffset;        \r",
          "        \r",
          "        float3 pOffset= getOffset(p2);        \r",
          "       vertex.pos.xyz = p2+ pOffset;         \r",
          "        float3 nOffset= getOffset(p2.xyz +vertex.normal.xyz * AmplifySurface);\r",
          "        vertex.normal.xyz = lerp(normalize(vertex.normal.xyz + nOffset  - pOffset), distortedFaceNormal, FlatShadingFactor);\r",
          "                        \r",
          "        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "7b148dd8-c9b2-4f06-807d-303f235350d7",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RGBANoise",
      "MetaInstanceID": "db5c20f6-1c82-41de-bb99-4251d9dea532",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseOffset.X",
      "MetaInstanceID": "46161589-39eb-4c0e-ba92-3f237c38ca72",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseOffset.Y",
      "MetaInstanceID": "6f2c03eb-4193-4897-9cd5-15179b1035eb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseOffset.Z",
      "MetaInstanceID": "63851431-0ae1-4b45-a7d0-f58594154042",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "c6f65086-2310-4a72-ac2e-f3120df602c4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "13322c27-f4ed-4a60-8857-676cc67542be",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRepeat",
      "MetaInstanceID": "c8385c4d-8f22-469d-b8ae-1761d6fb74ba",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "AmplifySurface",
      "MetaInstanceID": "dfe3be38-144e-475f-9213-b18a932cbea3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FlatShadingFactor",
      "MetaInstanceID": "fd911d8a-b275-47dd-9b03-3f6f2006a9ad",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "735afb65-f92e-45cc-80ae-d42bea208bee",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "13cdb5cf-995c-461e-8fff-01acdb8388a5",
      "MetaID": "c60cc037-2232-4c73-ab16-daf3549a078d",
      "Name": "NoiseDistortShader3Func",
      "Version": "be25bf7a-c34e-41bf-9535-3df36ded7f7b",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDc60cc037_2232_4c73_ab16_daf3549a078d",
        "{",
        "    public class Class_NoiseDistortShader3 : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            RGBANoise = 2,",
        "            NoiseOffsetX = 3,",
        "            NoiseOffsetY = 4,",
        "            NoiseOffsetZ = 5,",
        "            NoiseAmount = 6,",
        "            NoiseTime = 7,",
        "            NoiseRepeat = 8,",
        "            AmplifySurface = 9,",
        "            FlatShadingFactor = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_NoiseDistortShader3()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var RGBANoise = inputs[(int)InputId.RGBANoise].Eval(context).Image; // Needs to be checked for null!",
        "            var NoiseOffsetX = inputs[(int)InputId.NoiseOffsetX].Eval(context).Value;",
        "            var NoiseOffsetY = inputs[(int)InputId.NoiseOffsetY].Eval(context).Value;",
        "            var NoiseOffsetZ = inputs[(int)InputId.NoiseOffsetZ].Eval(context).Value;",
        "            var NoiseOffset = new Vector3(NoiseOffsetX, NoiseOffsetY, NoiseOffsetZ);",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseRepeat = inputs[(int)InputId.NoiseRepeat].Eval(context).Value;",
        "            var AmplifySurface = inputs[(int)InputId.AmplifySurface].Eval(context).Value;",
        "            var FlatShadingFactor = inputs[(int)InputId.FlatShadingFactor].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            var noiseTextureView = new ShaderResourceView(context.D3DDevice, RGBANoise);",
        "            _effect.GetVariableByName(\"RGBANoise\").AsShaderResource().SetResource(noiseTextureView);",
        "                        ",
        "            SetVector(\"NoiseOffset\",NoiseOffset);",
        "            SetScalar(\"NoiseAmount\",NoiseAmount);",
        "            SetScalar(\"NoiseTime\", NoiseTime);",
        "            SetScalar(\"AmplifySurface\", AmplifySurface);",
        "            SetScalar(\"FlatShadingFactor\", FlatShadingFactor);",
        "            NoiseRepeat = NoiseRepeat == 0 ? 100000f : 100f/NoiseRepeat;",
        "                        ",
        "            SetScalar(\"NoiseRepeat\", NoiseRepeat);            ",
        "            //_effect.GetVariableByName(\"UpVector\").AsVector().Set(UpVector);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "735afb65-f92e-45cc-80ae-d42bea208bee"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ad417339-8147-428e-bedb-7d26a06be494",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7b148dd8-c9b2-4f06-807d-303f235350d7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "db5c20f6-1c82-41de-bb99-4251d9dea532",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "46161589-39eb-4c0e-ba92-3f237c38ca72",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f2c03eb-4193-4897-9cd5-15179b1035eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "63851431-0ae1-4b45-a7d0-f58594154042",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c6f65086-2310-4a72-ac2e-f3120df602c4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "13322c27-f4ed-4a60-8857-676cc67542be",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c8385c4d-8f22-469d-b8ae-1761d6fb74ba",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dfe3be38-144e-475f-9213-b18a932cbea3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fd911d8a-b275-47dd-9b03-3f6f2006a9ad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "13cdb5cf-995c-461e-8fff-01acdb8388a5"
    }
  ]
}