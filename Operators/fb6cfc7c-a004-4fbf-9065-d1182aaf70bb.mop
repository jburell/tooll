{
  "Name": "SkypeChatLogFiles",
  "_id": "fb6cfc7c-a004-4fbf-9065-d1182aaf70bb",
  "Namespace": "projects.glitch.helpers",
  "Description": "Returns a  dynamic list of Strings with relative filepaths to each file. Use [[NthString]] or [[ListLength]] to access it.",
  "Inputs": [
    {
      "Name": "RefreshTrigger",
      "MetaInstanceID": "287b0727-addc-44eb-ba2e-9f92bdb8c504",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FileSize.Min",
      "MetaInstanceID": "2ec707ef-ea66-4858-969c-82ba3ee016e2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FileSize.Max",
      "MetaInstanceID": "d5ad6bf1-4180-42a4-a130-67f74452682e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100000"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Dynamic",
      "MetaInstanceID": "347977c8-5292-449e-a094-1d71b02aa300",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    },
    {
      "Name": "Count",
      "MetaInstanceID": "ed4a7cab-5b6c-4dc8-921b-ccf409a8e106",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "3f21c22a-0480-4c79-b0ab-b79d16869351",
      "MetaID": "a54ed3a1-4d3e-47ef-b8fe-b4aeec9d0972",
      "Name": "SkypeChatLogFilesFunc",
      "Version": "fcbdf8d6-9bfd-43b2-b9ed-b2333295815f",
      "Type": "Dynamic",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using System.IO;",
        "using System.Dynamic;",
        "using System.Text.RegularExpressions;",
        "using System;",
        "",
        "namespace Framefield.Core.IDa54ed3a1_4d3e_47ef_b8fe_b4aeec9d0972",
        "{",
        "    public class Class_SkypeChatLogFiles : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            RefreshTrigger = 0,",
        "            FileSizeMin = 1,",
        "            FileSizeMax = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Dynamic = 0,",
        "            Count = 1",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var RefreshTrigger = inputs[(int)InputId.RefreshTrigger].Eval(context).Value;",
        "            var FileSizeMin = inputs[(int)InputId.FileSizeMin].Eval(context).Value;",
        "            var FileSizeMax = inputs[(int)InputId.FileSizeMax].Eval(context).Value;",
        "            var FileSize = new Vector2(FileSizeMin, FileSizeMax);",
        "            //<<< _params",
        "",
        "            if (_allFiles == null || RefreshTrigger > 0.5f) ",
        "            {",
        "                _minFileSize = (int)FileSizeMin;",
        "                _maxFileSize = (int)FileSizeMax;",
        "                ",
        "                var directories = new List<String>() {",
        "                    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \"\\\\Skype\\\\\",",
        "                    Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + \"\\\\Skype\\\\\",",
        "                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + \"\\\\Skype\\\\\"",
        "                };",
        "",
        "                _allFiles = new List<String>();",
        "                _allFiles.Clear();",
        "",
        "                foreach (var path in directories)",
        "                {",
        "                    ScanDirectory(path);",
        "                }",
        "                ",
        "                Random rng = new Random((int)DateTime.Now.Ticks);",
        "                _allFiles = _allFiles.OrderBy(a => rng.Next()).ToList();",
        "                ",
        "                foreach(var s in _allFiles)",
        "                {",
        "                    Logger.Info(s);",
        "                }",
        "            }",
        "",
        "            switch (outputIdx)",
        "            {",
        "                case (int)OutputId.Dynamic:",
        "                    context.Dynamic = _allFiles;",
        "                    break;",
        "                case (int)OutputId.Count:",
        "                    context.Value = _allFiles.Count;",
        "                    break;",
        "            }",
        "            context.Value = _allFiles.Count;",
        "            return context;",
        "        }",
        "",
        "        private void ScanDirectory(String path)",
        "        {",
        "            if (path.IndexOf(\"chat\") >= 0)",
        "            {",
        "                foreach (var filename in Directory.GetFiles(path))",
        "                {",
        "                    var basename = filename.Split('\\\\').Last();",
        "                    var filepath = path + \"/\" + basename;",
        "                    FileInfo f = new FileInfo(filepath);",
        "    \t            ",
        "    \t            if (f.Length > _minFileSize && f.Length < _maxFileSize && IsChatLog(filename))",
        "    \t            {",
        "    \t               _allFiles.Add(filepath);",
        "    \t            }",
        "                }",
        "            }",
        "            foreach (var dir in Directory.GetDirectories(path))",
        "            {",
        "                var dirname = dir.Split('\\\\').Last();",
        "                ScanDirectory(path + \"/\" + dirname);",
        "            }",
        "        }",
        "",
        "        static bool IsChatLog(string filePath)",
        "        {",
        "            if (!File.Exists(filePath))",
        "                return false;            ",
        "",
        "            FileStream stream = null;",
        "            try",
        "            {",
        "                stream = new FileStream(filePath, FileMode.Open, FileAccess.Read);",
        "            }",
        "            catch",
        "            {",
        "                return false;",
        "            }",
        "            finally",
        "            {",
        "                Utilities.DisposeObj(ref stream);",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        private string _directoryPath;",
        "        private List<String> _allFiles;",
        "        private int _minFileSize;",
        "        private int _maxFileSize;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "287b0727-addc-44eb-ba2e-9f92bdb8c504",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3f21c22a-0480-4c79-b0ab-b79d16869351"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ec707ef-ea66-4858-969c-82ba3ee016e2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3f21c22a-0480-4c79-b0ab-b79d16869351"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d5ad6bf1-4180-42a4-a130-67f74452682e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3f21c22a-0480-4c79-b0ab-b79d16869351"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3f21c22a-0480-4c79-b0ab-b79d16869351",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "347977c8-5292-449e-a094-1d71b02aa300"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3f21c22a-0480-4c79-b0ab-b79d16869351",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ed4a7cab-5b6c-4dc8-921b-ccf409a8e106"
    }
  ]
}