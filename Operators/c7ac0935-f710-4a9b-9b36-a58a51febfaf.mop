{
  "Name": "LoadImageURI",
  "_id": "c7ac0935-f710-4a9b-9b36-a58a51febfaf",
  "Namespace": "lib.image.load",
  "Description": "Loads an image asynchronous from a uri.\r\nSupported schemes are: file, ftp, http",
  "Inputs": [
    {
      "Name": "Uri",
      "MetaInstanceID": "641ac4f1-a95c-4f14-8023-b5a72cf657f5",
      "DefaultValue": {
        "Type": "Text",
        "Value": "http://www.still-scene.org/images/uploaded/0000/0361/large.jpg"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "e0981a91-4a70-4132-bbff-4405f0305cd9",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    },
    {
      "Name": "Size.X",
      "MetaInstanceID": "d8307424-dd86-44d4-9c58-3a0568507d20",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Size.Y",
      "MetaInstanceID": "0e8b3154-dade-46e6-b288-8669ab8493cd",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "af5144fe-46eb-413b-86b5-cb0b4a474cad",
      "MetaID": "f54bedba-e90a-4512-8589-a69e2bb9b7df",
      "Name": "LoadImageURIFunc",
      "Version": "51d4ab21-15b5-401f-9c27-bcfefe860daf",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.IO;",
        "using System.Net;",
        "",
        "namespace Framefield.Core.IDf54bedba_e90a_4512_8589_a69e2bb9b7df",
        "{",
        "    public class Class_LoadImageURI : OperatorPart.Function,",
        "                                      OperatorPartTraits.IAsyncDependend",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Uri = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Image = 0,",
        "            SizeX = 1,",
        "            SizeY = 2",
        "        }",
        "        //<<< _outputids",
        "",
        "        public bool AsyncChanged { get { return _asyncChanged; } }",
        "",
        "        public override void Dispose()",
        "        {",
        "            lock (_lock)",
        "            {",
        "                Utilities.DisposeObj(ref _image);",
        "            }",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Uri = inputs[(int)InputId.Uri].Eval(context).Text;",
        "            //<<< _params",
        "",
        "            if (_image == null || Uri != _uri)",
        "            {",
        "                if (_webRequest == null)",
        "                {",
        "                    Dispose();",
        "                    try",
        "                    {",
        "                        _webRequest = WebRequest.Create(Uri);",
        "                        _uri = Uri;",
        "                        DoGETRequest(_webRequest, HandleResponse);",
        "                    }",
        "                    catch (Exception e)",
        "                    {",
        "                        Logger.Error(\"failed to start request: {0}\", e.Message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            lock (_lock)",
        "            {",
        "                switch (outputIdx)",
        "                {",
        "                    case (int)OutputId.Image: context.Image = _image; break;",
        "                    case (int)OutputId.SizeX: context.Value = _image != null ? _image.Description.Width : 0; break;",
        "                    case (int)OutputId.SizeY: context.Value = _image != null ? _image.Description.Height : 0; break;",
        "                }",
        "                _asyncChanged = false;",
        "            }",
        "            return context;",
        "        }",
        "",
        "        void DoGETRequest(WebRequest request, Action<WebResponse> responseAction)",
        "        {",
        "            Action wrapperAction = () =>",
        "            {",
        "                request.BeginGetResponse(new AsyncCallback((iar) =>",
        "                                         {",
        "                                             try",
        "                                             {",
        "                                                 WebRequest req = (WebRequest)iar.AsyncState;",
        "                                                 var response = req.EndGetResponse(iar);",
        "                                                 responseAction(response);",
        "                                             }",
        "                                             catch (Exception)",
        "                                             {",
        "                                             }",
        "                                             _webRequest = null;",
        "                                         }),",
        "                                         request);",
        "            };",
        "            wrapperAction.BeginInvoke(new AsyncCallback((iar) =>",
        "                                      {",
        "                                          var action = (Action)iar.AsyncState;",
        "                                          action.EndInvoke(iar);",
        "                                      }),",
        "                                      wrapperAction);",
        "        }",
        "",
        "        void HandleResponse(WebResponse response)",
        "        {",
        "            try",
        "            {",
        "                using (var memStream = new MemoryStream())",
        "                using (Stream streamResponse = response.GetResponseStream())",
        "                {",
        "                    streamResponse.CopyTo(memStream);",
        "                    lock (_lock)",
        "                    {",
        "                        _image = SharpDX.Direct3D11.Resource.FromMemory<Texture2D>(D3DDevice.Device, memStream.ToArray());",
        "                        _asyncChanged = true;",
        "                    }",
        "                }",
        "                response.Close();",
        "            }",
        "            catch (Exception)",
        "            {",
        "                lock (_lock)",
        "                    _image = null;",
        "            }",
        "        }",
        "",
        "        Object _lock = new Object();",
        "        bool _asyncChanged = false;",
        "        WebRequest _webRequest;",
        "        Texture2D _image;",
        "        String _uri = String.Empty;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af5144fe-46eb-413b-86b5-cb0b4a474cad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e0981a91-4a70-4132-bbff-4405f0305cd9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "641ac4f1-a95c-4f14-8023-b5a72cf657f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af5144fe-46eb-413b-86b5-cb0b4a474cad"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af5144fe-46eb-413b-86b5-cb0b4a474cad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d8307424-dd86-44d4-9c58-3a0568507d20"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af5144fe-46eb-413b-86b5-cb0b4a474cad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0e8b3154-dade-46e6-b288-8669ab8493cd"
    }
  ]
}