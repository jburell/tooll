{
  "Name": "ReplicateMoths",
  "_id": "a69ea1ad-2d0d-4f7c-8645-3af8337cf7fa",
  "Namespace": "projects.sloth.helpers",
  "Description": "Instanciates the incoming geometry and also sets the replication index as a variable alled ReplicateIndex",
  "Inputs": [
    {
      "Name": "SceneInput",
      "MetaInstanceID": "e1d4494f-4013-45e4-a4d5-5d0b7112b5a8",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "d41db296-6631-4d18-a20c-16dab1e8b7a6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius",
      "MetaInstanceID": "ce1590d2-2093-48af-b85f-fa73e02e9017",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.X",
      "MetaInstanceID": "e6a4d82c-80c7-49e6-acc7-0083b1ba8762",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Y",
      "MetaInstanceID": "c67afbdb-cb95-4895-b893-d4cf9b8c7773",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Z",
      "MetaInstanceID": "68848a19-9bcd-434c-9c6c-fb56c3ac3bfc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shape",
      "MetaInstanceID": "c2d884c5-41d7-4ce8-bfb2-7509075bc61e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Point",
          "Value": "0"
        },
        {
          "Name": "Sphere",
          "Value": "1"
        },
        {
          "Name": "Ring",
          "Value": "2"
        },
        {
          "Name": "Box",
          "Value": "3"
        }
      ]
    },
    {
      "Name": "Layer.X",
      "MetaInstanceID": "e96ed49a-1c29-4787-9623-a6418b941af4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Layer.Y",
      "MetaInstanceID": "f0e33061-70ef-4ca2-bc8e-4f0abaff0b39",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter",
      "MetaInstanceID": "9c0effcd-7ad6-4f4e-8680-ef06acb1266d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.X",
      "MetaInstanceID": "8453a351-3fa7-4d01-9d86-70ed006efe58",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Y",
      "MetaInstanceID": "d18f34bc-b4a3-486e-87ac-b95cda322905",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Z",
      "MetaInstanceID": "c5cb63b5-6cc2-4cc9-98d8-ad5773ea926b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetRandom.X",
      "MetaInstanceID": "c7a056fa-466b-436a-b3fb-02bba750637f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetRandom.Y",
      "MetaInstanceID": "905236a0-56f0-4e54-a12c-5deed48dff53",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetRandom.Z",
      "MetaInstanceID": "c5dcf395-8f59-4d1d-9d3d-1af4132bf069",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "eda88033-dbda-4cd0-9281-71aebf9b6906",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "c2b257d3-b400-41d5-b1e8-15c42f5b52e3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "921e29a6-cd8c-40c7-b92b-c8fb13c44c1e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "e80b3e1b-49ee-40c0-a1f2-8160c050f448",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SizeRandom",
      "MetaInstanceID": "6e4670c7-e923-419b-aa1e-9a0f89b5935a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "9ae82e46-cbdc-47ab-8605-41b8a1591f2a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Surface",
          "Value": "0"
        },
        {
          "Name": "Fixed",
          "Value": "1"
        },
        {
          "Name": "FaceCamera",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "Rotate.X",
      "MetaInstanceID": "261adc0b-1244-4ca4-b8af-7f85e6cb9a98",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Y",
      "MetaInstanceID": "01be2a7f-1046-4cef-bcd7-53206547d17b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Z",
      "MetaInstanceID": "b75e7d3c-f434-4f1c-b22f-1f7b92ceabad",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotateRandom.X",
      "MetaInstanceID": "700de779-10b0-46c2-819b-14a32020a9de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotateRandom.Y",
      "MetaInstanceID": "76b06cb3-18ab-4258-8a71-a6bc46d8dc34",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotateRandom.Z",
      "MetaInstanceID": "3d856449-3730-46b7-9d61-334a832f198f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Seed",
      "MetaInstanceID": "c8651831-82d5-4307-8dce-350d685a61ff",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "IndexVariableName",
      "MetaInstanceID": "dc6225ec-5f6b-45f4-b17b-18f347f79b91",
      "DefaultValue": {
        "Type": "Text",
        "Value": "ReplicateIndex"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "be104882-5e99-4e6c-bfb0-2b2ce4999d94",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "2bf8a59c-1bda-443b-8a04-6a50962589e9",
      "MetaID": "864afd1c-7dfb-4bdd-92c1-66ad92249951",
      "Name": "ReplicateMothsFunc",
      "Version": "aaaa9b4d-c6a0-4e4f-b7ec-3d1e52e1302d",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "",
        "namespace Framefield.Core.ID864afd1c_7dfb_4bdd_92c1_66ad92249951",
        "{",
        "    public class Class_ReplicateMoths : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            SceneInput = 0,",
        "            Count = 1,",
        "            Radius = 2,",
        "            StretchX = 3,",
        "            StretchY = 4,",
        "            StretchZ = 5,",
        "            Shape = 6,",
        "            LayerX = 7,",
        "            LayerY = 8,",
        "            Scatter = 9,",
        "            OffsetX = 10,",
        "            OffsetY = 11,",
        "            OffsetZ = 12,",
        "            OffsetRandomX = 13,",
        "            OffsetRandomY = 14,",
        "            OffsetRandomZ = 15,",
        "            NoiseTime = 16,",
        "            NoiseAmount = 17,",
        "            NoiseScale = 18,",
        "            Size = 19,",
        "            SizeRandom = 20,",
        "            Orientation = 21,",
        "            RotateX = 22,",
        "            RotateY = 23,",
        "            RotateZ = 24,",
        "            RotateRandomX = 25,",
        "            RotateRandomY = 26,",
        "            RotateRandomZ = 27,",
        "            Seed = 28,",
        "            IndexVariableName = 29",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var SceneInput = inputs[(int)InputId.SceneInput];",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            var Radius = inputs[(int)InputId.Radius].Eval(context).Value;",
        "            var StretchX = inputs[(int)InputId.StretchX].Eval(context).Value;",
        "            var StretchY = inputs[(int)InputId.StretchY].Eval(context).Value;",
        "            var StretchZ = inputs[(int)InputId.StretchZ].Eval(context).Value;",
        "            var Stretch = new Vector3(StretchX, StretchY, StretchZ);",
        "            var Shape = (int) inputs[(int)InputId.Shape].Eval(context).Value;",
        "            var LayerX = inputs[(int)InputId.LayerX].Eval(context).Value;",
        "            var LayerY = inputs[(int)InputId.LayerY].Eval(context).Value;",
        "            var Layer = new Vector2(LayerX, LayerY);",
        "            var Scatter = inputs[(int)InputId.Scatter].Eval(context).Value;",
        "            var OffsetX = inputs[(int)InputId.OffsetX].Eval(context).Value;",
        "            var OffsetY = inputs[(int)InputId.OffsetY].Eval(context).Value;",
        "            var OffsetZ = inputs[(int)InputId.OffsetZ].Eval(context).Value;",
        "            var Offset = new Vector3(OffsetX, OffsetY, OffsetZ);",
        "            var OffsetRandomX = inputs[(int)InputId.OffsetRandomX].Eval(context).Value;",
        "            var OffsetRandomY = inputs[(int)InputId.OffsetRandomY].Eval(context).Value;",
        "            var OffsetRandomZ = inputs[(int)InputId.OffsetRandomZ].Eval(context).Value;",
        "            var OffsetRandom = new Vector3(OffsetRandomX, OffsetRandomY, OffsetRandomZ);",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "            var SizeRandom = inputs[(int)InputId.SizeRandom].Eval(context).Value;",
        "            var Orientation = (int) inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            var RotateX = inputs[(int)InputId.RotateX].Eval(context).Value;",
        "            var RotateY = inputs[(int)InputId.RotateY].Eval(context).Value;",
        "            var RotateZ = inputs[(int)InputId.RotateZ].Eval(context).Value;",
        "            var Rotate = new Vector3(RotateX, RotateY, RotateZ);",
        "            var RotateRandomX = inputs[(int)InputId.RotateRandomX].Eval(context).Value;",
        "            var RotateRandomY = inputs[(int)InputId.RotateRandomY].Eval(context).Value;",
        "            var RotateRandomZ = inputs[(int)InputId.RotateRandomZ].Eval(context).Value;",
        "            var RotateRandom = new Vector3(RotateRandomX, RotateRandomY, RotateRandomZ);",
        "            var Seed = inputs[(int)InputId.Seed].Eval(context).Value;",
        "            var IndexVariableName = inputs[(int)InputId.IndexVariableName].Eval(context).Text;",
        "            //<<< _params        ",
        "",
        "            if (SceneInput.Connections.Count == 0)",
        "            {",
        "                return context;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "            var rand = new Random((int) Seed);",
        "            Layer.X = Math.Max(1, (int) Layer.X);",
        "            Layer.Y = Math.Max(1, (int) Layer.Y);",
        "",
        "            for (var i = 0; i < Count; ++i)",
        "            {",
        "                    Vector3 t = new Vector3();",
        "",
        "                    ",
        "                    switch (Shape)",
        "                    {",
        "                        // Point",
        "                        case 0:",
        "                            t = Vector3.Normalize(new Vector3(",
        "                                            (float) (rand.NextDouble() - 0.5)*Radius*StretchX,",
        "                                            (float) (rand.NextDouble() - 0.5)*Radius*StretchY,",
        "                                            (float) (rand.NextDouble() - 0.5)*Radius*StretchZ)) ",
        "                               * (float)rand.NextDouble() * Radius;",
        "                                      ",
        "                            break;",
        "                        // Sphere",
        "                        case 1:",
        "                        {",
        "                            var inc = Math.PI*(3 - Math.Sqrt(5));",
        "                            var off = 2/(Count + 1);",
        "                            //var y = i*off*Stretch.Y + Stretch.Z - 1 + (off/2);",
        "                            var y = i*off*Stretch.Y - 1 + (off/2);",
        "                            var r = Math.Sqrt(1 - y*y);",
        "                            var phi = i*Stretch.X*inc;",
        "                            t = new Vector3((float) (Math.Cos(phi)*r*Radius),",
        "                                            (float) (y*Radius),",
        "                                            (float) (Math.Sin(phi)*r*Radius));",
        "                            break;",
        "                        }",
        "                        // Ring",
        "                        case 2:",
        "                        {",
        "                            float itemsPerShell =  Count/(Layer.X);    // with even distribution                            ",
        "                            float indexInShell = i%itemsPerShell;",
        "                            float shellIndex = (i-indexInShell)/itemsPerShell;",
        "                            ",
        "                            float itemsPerRing = (itemsPerShell / Math.Max(1,Layer.Y));",
        "                            float indexInRing = (int)(indexInShell % itemsPerRing);",
        "                            float layerIndex = (int)(indexInShell / itemsPerRing);",
        "                          ",
        "                            float a = indexInRing / itemsPerRing;",
        "                            ",
        "                            t = new Vector3((float) (Math.Sin(Math.PI*2*a)*(Radius + shellIndex * Stretch.X)),",
        "                                            Layer.Y <= 1 ? 0",
        "                                                         : (layerIndex/(Layer.Y-1)  -0.5f) *Stretch.Y ,",
        "                                            (float) (Math.Cos(Math.PI*2*a)*(Radius + shellIndex*Stretch.Z)));",
        "                            break;",
        "                        }",
        "                        // Box (can also be used as a plane)",
        "                        case 3:",
        "                        {                            ",
        "                            var volume = Math.Abs(StretchX) * Math.Abs(StretchY) * Math.Abs(StretchZ);                            ",
        "                            var s1= new Vector3(Math.Abs(StretchX), Math.Abs(StretchY), Math.Abs(StretchZ));",
        "                            ",
        "                            /*",
        "                           var volumePerUnit = volume/Count;",
        "                           ",
        "                           ",
        "                           ",
        "                           ",
        "                           var gridResolution = new Vector3 ((float)Math.Ceiling(gridResolution.X),(float)Math.Ceiling(gridResolution.Y),(float)Math.Ceiling(gridResolution.Z));",
        "                           ",
        "                           ",
        "                           var numGridCells = gridResolution.X*gridResolution.Y*gridResolution.Z;",
        "                           ",
        "            ",
        "                           ",
        "                           var gridCoords = new Vector3(i % gridResolution.X,",
        "                                        (float)Math.Floor(i/gridResolution.X) % gridResolution.Y,",
        "                                        (float)Math.Floor(i / (gridResolution.X * gridResolution.Y)) % gridResolution.Z);",
        "                           ",
        "                           ",
        "                           ",
        "                           var gridCellSize = new Vector3((float)(s1.X/gridResolution.X), (float)(s1.Y/gridResolution.Y), (float)(s1.Z/gridResolution.Z));",
        "                    ",
        "                           ",
        "                           t = 0.5f*gridCellSize + gridCellSize*gridCoords - 0.5f*Stretch;",
        "                           */",
        "                            ",
        "                            ",
        "                            s1.Normalize();",
        "                            var a= s1.Y/s1.X;",
        "                            var b= s1.Z/s1.X;",
        "                            ",
        "                            var xx = (float)Math.Pow( 1/ (a*b), 1.0/3.0);",
        "                            var s2 = s1 * (xx/s1.X);",
        "",
        "                            var edgeCount= Math.Pow(Count,1.0/3.0);",
        "",
        "                            var itemsX= Math.Max(1, edgeCount * s2.X);",
        "                            var itemsY= Math.Max(1, edgeCount * s2.Y);",
        "                            var itemsZ= Math.Max(1, edgeCount * s2.Z);",
        "                            //var itemsX= Math.Max(1, Math.Floor(edgeCount * s2.X));",
        "                            //var itemsY= Math.Max(1, Math.Floor(edgeCount * s2.Y));",
        "                            //var itemsZ= Math.Max(1, Math.Floor(edgeCount * s2.Z));",
        "                            ",
        "                            var x = (int)(i % itemsX)          / itemsX;",
        "                            var y = (int)((i/itemsX) % itemsY) / itemsY;",
        "                            var z = (int)((i/itemsX/itemsY))   / itemsZ;",
        "                            ",
        "                            ",
        "                            t = new Vector3((float) (x),",
        "                                            (float) (y),",
        "                                            (float) (z)) * Stretch - 0.5f * Stretch;",
        "                            ",
        "                            break;",
        "                        }",
        "                    }",
        "",
        "/*                    if (NoiseAmount != 0)",
        "                    {",
        "                        _noiseTime = NoiseTime;",
        "                        _frequency = 1/NoiseScale;",
        "                        var noiseOffset = new Vector3(",
        "                            getNoise(t.X / Radius - 36.1f), ",
        "                            getNoise(t.Y / Radius + 1.0f), ",
        "                            getNoise((t.Z + 12.1f))",
        "                        );",
        "                        t += noiseOffset * NoiseAmount;",
        "                    }*/",
        "",
        "",
        "                    if (NoiseAmount != 0)",
        "                    {",
        "                        _noiseTime = NoiseTime;",
        "                        _frequency = 1/NoiseScale;",
        "                        var noiseOffset = new Vector3(getNoise(t.X / Radius - 6.3f), getNoise(t.Z / Radius + 9.3f), getNoise((t.Y - 0.3f)));",
        "                        t += noiseOffset * NoiseAmount;",
        "                    }",
        "",
        "                    float s = Size + (float)rand.NextDouble() * SizeRandom;",
        "                    var scale = new Vector3(s, s, s);",
        "                    ",
        "                    //Matrix rotation;",
        "                    Matrix transform;",
        "                    Matrix.RotationYawPitchRoll(Rotate.Y * toRad + (float)(rand.NextDouble()) * RotateRandom.Y * toRad,",
        "                                                Rotate.X * toRad + (float)(rand.NextDouble()) * RotateRandom.X * toRad,",
        "                                                Rotate.Z * toRad + (float)(rand.NextDouble()) * RotateRandom.Z * toRad,",
        "                                                out transform);",
        "                    ",
        "                                                                    ",
        "                    var tScale = Matrix.Scaling( scale.X, scale.Y, scale.Z);",
        "                    transform= tScale * transform;",
        "                    var t2= Matrix.Translation(new Vector3(OffsetX + (float)(rand.NextDouble() -0.5f) * (OffsetRandomX + Scatter),",
        "                                                           OffsetY + (float)(rand.NextDouble() -0.5f) * (OffsetRandomY + Scatter),",
        "                                                           OffsetZ + (float)(rand.NextDouble() -0.5f) * (OffsetRandomZ + Scatter)));",
        "                    transform = t2*transform;",
        "",
        "                    if (Orientation == 0)",
        "                    {",
        "                        if (t.Length() > 0)",
        "                        {",
        "                            var dir = -t;",
        "                            dir.Normalize();",
        "                            var helperDir = new Vector3(0, -1, 0);",
        "                            if (Math.Abs(dir.X) < 0.001 && Math.Abs(dir.Z) < 0.001)",
        "                                helperDir = new Vector3(0, 0, 1);",
        "                            var xAxis = Vector3.Cross(dir, helperDir);",
        "                            xAxis.Normalize();",
        "                            var yAxis = Vector3.Cross(-xAxis, dir);",
        "                            yAxis.Normalize();",
        "                            var m = Matrix.Identity;",
        "                            m.Row1 = new Vector4(xAxis, 0);",
        "                            m.Row2 = new Vector4(yAxis, 0);",
        "                            m.Row3 = new Vector4(dir, 0);",
        "                            transform *= m;",
        "                        }",
        "                    }",
        "                    else if (Orientation == 2)",
        "                    {",
        "                        //if (Shape == 2)",
        "                        //{",
        "                        //    var rotationAroundCenter = Matrix.Identity;",
        "                        //    Matrix.RotationY((float)(2 * Math.PI * i / Count), out rotationAroundCenter);",
        "                        //    transform *= rotationAroundCenter;",
        "                        //}",
        "                        var cameraToWorld = context.WorldToCamera;",
        "                        cameraToWorld.Invert();",
        "                        var newObjectToWorld = context.ObjectTWorld * cameraToWorld;",
        "                        newObjectToWorld.Row4 = context.ObjectTWorld.Row4;",
        "                        transform *=    newObjectToWorld;                     ",
        "                        ",
        "                    }",
        "",
        "                    transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                    ",
        "                    ",
        "                    transform *= prevTransform; ",
        "                context.ObjectTWorld = transform*prevTransform;",
        "                SceneInput.Connections[i%SceneInput.Connections.Count].Eval(context);",
        "                context.ObjectTWorld = prevTransform;",
        "                ",
        "                //SceneInput.Connections[i%SceneInput.Connections.Count].Eval(context);",
        "                //context.ObjectTWorld = prevTransform;",
        "            }",
        "",
        "            context.ObjectTWorld = prevTransform;",
        "",
        "            return context;",
        "        }",
        "",
        "        #region helpers",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed;",
        "            n = (n << 13) ^ n;",
        "            return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t*(b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t*t*t*(t*(t*6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t*3.1415927f;",
        "            float f = (float) (1.0 - Math.Cos(ft))*0.5f;",
        "            return a*(1.0f - f) + b*f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime+10000;  // Noise is not static between -0.0001 and 0.0001",
        "",
        "",
        "            noiseSum = Lerp(Noise((int) value, _seed),",
        "                            Noise((int) value + 1, _seed),",
        "                            Fade(value - (float) Math.Floor(value)));",
        "            //Logger.Info(\"{0:0.000} -> {1:0.00}\", value, noiseSum);                            ",
        "            return noiseSum;",
        "        }",
        "        ",
        "        //private Vector getNoise3(float value)",
        "        //{",
        "        //}        ",
        "",
        "        #endregion",
        "",
        "        private int _seed = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e1d4494f-4013-45e4-a4d5-5d0b7112b5a8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d41db296-6631-4d18-a20c-16dab1e8b7a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ce1590d2-2093-48af-b85f-fa73e02e9017",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e6a4d82c-80c7-49e6-acc7-0083b1ba8762",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c67afbdb-cb95-4895-b893-d4cf9b8c7773",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "68848a19-9bcd-434c-9c6c-fb56c3ac3bfc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c2d884c5-41d7-4ce8-bfb2-7509075bc61e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e96ed49a-1c29-4787-9623-a6418b941af4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f0e33061-70ef-4ca2-bc8e-4f0abaff0b39",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9c0effcd-7ad6-4f4e-8680-ef06acb1266d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8453a351-3fa7-4d01-9d86-70ed006efe58",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d18f34bc-b4a3-486e-87ac-b95cda322905",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c5cb63b5-6cc2-4cc9-98d8-ad5773ea926b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c7a056fa-466b-436a-b3fb-02bba750637f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "905236a0-56f0-4e54-a12c-5deed48dff53",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c5dcf395-8f59-4d1d-9d3d-1af4132bf069",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eda88033-dbda-4cd0-9281-71aebf9b6906",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c2b257d3-b400-41d5-b1e8-15c42f5b52e3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "921e29a6-cd8c-40c7-b92b-c8fb13c44c1e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e80b3e1b-49ee-40c0-a1f2-8160c050f448",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6e4670c7-e923-419b-aa1e-9a0f89b5935a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ae82e46-cbdc-47ab-8605-41b8a1591f2a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "261adc0b-1244-4ca4-b8af-7f85e6cb9a98",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "01be2a7f-1046-4cef-bcd7-53206547d17b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b75e7d3c-f434-4f1c-b22f-1f7b92ceabad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "700de779-10b0-46c2-819b-14a32020a9de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "76b06cb3-18ab-4258-8a71-a6bc46d8dc34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3d856449-3730-46b7-9d61-334a832f198f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c8651831-82d5-4307-8dce-350d685a61ff",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dc6225ec-5f6b-45f4-b17b-18f347f79b91",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2bf8a59c-1bda-443b-8a04-6a50962589e9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "be104882-5e99-4e6c-bfb0-2b2ce4999d94"
    }
  ]
}