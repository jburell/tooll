{
  "Name": "ContextToString",
  "_id": "4e1111d8-19ee-464d-ab27-b360afc358ec",
  "Namespace": "lib.basic",
  "Description": "Seriealizes context variables into a string.",
  "Inputs": [
    {
      "Name": "Input",
      "MetaInstanceID": "82546a80-fbb3-48c9-82f7-e7641eaf2eaf",
      "DefaultValue": {
        "Type": "Generic",
        "Value": "Framefield.Core.Generic"
      },
      "MetaID": "9f831cf2-a1ec-41f4-ba80-cced9736af6b",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Filter",
      "MetaInstanceID": "a40c1646-39a0-4942-8995-d1550306d675",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "8ee7a42d-9b00-410a-afb1-3f30eb481527",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    },
    {
      "Name": "String",
      "MetaInstanceID": "c172487c-8c3f-419d-b095-ce163ad2a767",
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "c5bc0cc2-4a51-4604-abab-413d13963990",
      "MetaID": "46bdd8a1-d8b6-46d1-b5e4-ff24188946d7",
      "Name": "ContextToStringFunc",
      "Version": "515f9b11-ca41-4133-989a-7b35b5586973",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.Text.RegularExpressions;",
        "using Newtonsoft.Json;",
        "using Newtonsoft.Json.Serialization;",
        "using System.IO;",
        "",
        "namespace Framefield.Core.ID46bdd8a1_d8b6_46d1_b5e4_ff24188946d7",
        "{",
        "    public class Class_ContextToString : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Input = 0,",
        "            Filter = 1",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Output = 0,",
        "            String = 1",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Input = inputs[(int)InputId.Input];",
        "            var Filter = inputs[(int)InputId.Filter].Eval(context).Text;",
        "            //<<< _params",
        "",
        "            var pattern = String.Empty;",
        "            foreach (var e in Filter)",
        "                pattern += e + \".*\";",
        "",
        "            switch (outputIdx)",
        "            {",
        "                case (int)OutputId.Output:",
        "                {",
        "                    using (var stringWriter = new StringWriter())",
        "                    using (var jsonTextWriter = new JsonTextWriter(stringWriter)",
        "                                                    {",
        "                                                        QuoteName = false,",
        "                                                        Formatting = Formatting.Indented",
        "                                                    })",
        "                    {",
        "                        _serializer.ContractResolver = new CustomContractResolver(pattern);",
        "                        _serializer.Serialize(jsonTextWriter, context.Variables);",
        "                        _serializer.Serialize(jsonTextWriter, context.Objects);",
        "",
        "                        _valueString = \"context:\\n\";",
        "                        foreach (var line in stringWriter.ToString().Split('\\n'))",
        "                        {",
        "                            if (Regex.Match(line, pattern, RegexOptions.IgnoreCase) != Match.Empty)",
        "                                _valueString += line;",
        "                        }",
        "                    }",
        "",
        "                    Input.Eval(context);",
        "",
        "                    OperatorPart.EmitChangedEventForOutput((int)OutputId.String);",
        "                    break;",
        "                }",
        "                case (int)OutputId.String:",
        "                {",
        "                    context.Text = _valueString;",
        "                    break;",
        "                }",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        public class CustomContractResolver : DefaultContractResolver",
        "        {",
        "            public CustomContractResolver(string pattern)",
        "            {",
        "                _pattern = pattern;",
        "            }",
        "",
        "            protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)",
        "            {",
        "                IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization);",
        "                return properties.Where(p => Regex.Match(p.PropertyName, _pattern, RegexOptions.IgnoreCase) != Match.Empty).ToList();",
        "            }",
        "",
        "            string _pattern;",
        "        }",
        "",
        "        string _valueString;",
        "        JsonSerializer _serializer = new JsonSerializer();",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "82546a80-fbb3-48c9-82f7-e7641eaf2eaf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c5bc0cc2-4a51-4604-abab-413d13963990"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a40c1646-39a0-4942-8995-d1550306d675",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c5bc0cc2-4a51-4604-abab-413d13963990"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c5bc0cc2-4a51-4604-abab-413d13963990",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8ee7a42d-9b00-410a-afb1-3f30eb481527"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c5bc0cc2-4a51-4604-abab-413d13963990",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c172487c-8c3f-419d-b095-ce163ad2a767"
    }
  ]
}