{
  "Name": "BrowserCacheFiles",
  "_id": "5d6f4cb5-5ed4-48b5-b852-63d18fcae3b1",
  "Namespace": "projects.glitch.helpers",
  "Description": "Returns a  dynamic list of Strings with relative filepaths to each file. Use [[NthString]] or [[ListLength]] to access it.",
  "Inputs": [
    {
      "Name": "DirectoryPath",
      "MetaInstanceID": "8ea12094-0b7c-4e75-ba96-0b2cbf89c5c4",
      "DefaultValue": {
        "Type": "Text",
        "Value": "test.txt"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RefreshTrigger",
      "MetaInstanceID": "96e80081-394d-47e4-9d36-1d53a0b43ddd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FileSize.Min",
      "MetaInstanceID": "44e7f12b-fb22-4116-a971-90d0e1682479",
      "DefaultValue": {
        "Type": "Float",
        "Value": "20000"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FileSize.Max",
      "MetaInstanceID": "e864eeeb-dacf-4021-a9d4-89c3bc32306a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100000"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Dynamic",
      "MetaInstanceID": "16f9a252-8083-4f54-bf08-20b4e2202666",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    },
    {
      "Name": "Count",
      "MetaInstanceID": "7d896e04-d8df-40bd-88f7-f29ecc982c33",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "2c464cdb-1b7b-4590-a597-1548f46fa6a9",
      "MetaID": "2cd95465-f6e8-41f2-af99-2c31b81c62ad",
      "Name": "BrowserCacheFilesFunc",
      "Version": "7ee075c4-0b28-4346-a5c7-0015e993124c",
      "Type": "Dynamic",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using System.IO;",
        "using System.Dynamic;",
        "using System.Text.RegularExpressions;",
        "using System.Drawing;",
        "",
        "namespace Framefield.Core.ID2cd95465_f6e8_41f2_af99_2c31b81c62ad",
        "{",
        "    public class Class_BrowserCacheFiles : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            DirectoryPath = 0,",
        "            RefreshTrigger = 1,",
        "            FileSizeMin = 2,",
        "            FileSizeMax = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Dynamic = 0,",
        "            Count = 1",
        "        }",
        "        //<<< _outputids",
        "",
        "",
        "",
        "        ",
        "        static bool IsImage(string filePath)",
        "        {",
        "            if (! File.Exists(filePath) )",
        "                return false;            ",
        "            ",
        "            //FileStream stream;",
        "            try {",
        "                //stream =    new FileStream(filePath, FileMode.Open, FileAccess.Read);",
        "                var newImage = System.Drawing.Image.FromFile(filePath);",
        "                newImage.Dispose();",
        "            }",
        "            catch {",
        "                return false;",
        "            }",
        "",
        "            return true;//IsValidImage(stream);",
        "        }",
        "        ",
        "        static bool IsValidImage(Stream imageStream)",
        "        {",
        "            if(imageStream.Length > 0)",
        "            {",
        "                byte[] header = new byte[4]; // Change size if needed.",
        "                string[] imageHeaders = new[]{",
        "                    Encoding.ASCII.GetString(new byte[]{0xFF, 0xd8,}),  // JPEG",
        "                        \"BM\",       // BMP",
        "                        \"GIF\",      // GIF",
        "                        Encoding.ASCII.GetString(new byte[]{137, 80, 78, 71})}; // PNG",
        "                try {",
        "                    imageStream.Read(header, 0, header.Length);",
        "                }",
        "                catch {",
        "                    return false;",
        "                }",
        "        ",
        "                return imageHeaders.Count(str => Encoding.ASCII.GetString(header).StartsWith(str)) > 0;",
        "            }",
        "        ",
        "            imageStream.Close();",
        "            return false;",
        "        }        ",
        "        ",
        "",
        "        private void ScanDirectory(String path) {",
        "            try {",
        "                foreach (var filename in Directory.GetFiles(path))",
        "                {",
        "                    if (_allFiles.Count > 100)",
        "                        break;",
        "                    var basename = filename.Split('\\\\').Last();",
        "                    var filepath =path + \"\\\\\" + basename ;",
        "                    FileInfo f = new FileInfo(filepath);",
        "    \t            long s1 = f.Length;",
        "    \t            ",
        "    \t            if( f.Length > _minFileSize && f.Length < _maxFileSize  && IsImage(filepath)) {",
        "    \t               Logger.Info(this, \"size {0}\", f.Length);",
        "    \t               _allFiles.Add( filepath) ;",
        "    \t            }",
        "                }",
        "                foreach (var dir in Directory.GetDirectories(path)) {",
        "                    var dirname= dir.Split('\\\\').Last();",
        "                    ScanDirectory(path + \"\\\\\" + dirname);",
        "                }",
        "            }",
        "            catch {",
        "                Logger.Warn(this, \"Can't read {0}\", path);",
        "            }",
        "        }",
        "        ",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var DirectoryPath = inputs[(int)InputId.DirectoryPath].Eval(context).Text;",
        "            var RefreshTrigger = inputs[(int)InputId.RefreshTrigger].Eval(context).Value;",
        "            var FileSizeMin = inputs[(int)InputId.FileSizeMin].Eval(context).Value;",
        "            var FileSizeMax = inputs[(int)InputId.FileSizeMax].Eval(context).Value;",
        "            var FileSize = new Vector2(FileSizeMin, FileSizeMax);",
        "            //<<< _params",
        "",
        "            if( _allFiles == null || RefreshTrigger > 0.5f) ",
        "            {",
        "            ",
        "                _minFileSize = (int)FileSizeMin;",
        "                _maxFileSize = (int)FileSizeMax;",
        "                ",
        "                var directories = new List<String>() {",
        "                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + \"\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Cache\"  ,",
        "                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + \"\\\\Microsoft\\\\Windows\\\\Temporary Internet Files\\\\Content.IE5\",",
        "                    \"c:\\\\Windows\\\\Web\\\\Wallpaper\"",
        "                };",
        "",
        "                _allFiles = new List<String>();",
        "",
        "                foreach( var path in directories) {",
        "                    ScanDirectory( path);",
        "                }",
        "",
        "                if (_allFiles.Count < 20)",
        "                {",
        "                    ScanDirectory(\".\\\\assets-new\\\\images\\\\fallback\");",
        "                }",
        "                ",
        "                Random rng = new Random((int)DateTime.Now.Ticks);",
        "                _allFiles = _allFiles.OrderBy(a => rng.Next()).ToList();",
        "                ",
        "                foreach(var s in _allFiles) {",
        "                    Logger.Info(s);",
        "                }",
        "            }",
        "",
        "            ",
        "            switch(outputIdx) {",
        "                case  (int)OutputId.Dynamic:",
        "                    context.Dynamic = _allFiles;",
        "                    break;",
        "                case  (int)OutputId.Count:",
        "                    context.Value = _allFiles.Count;    // FIXME: This is never called?",
        "                    break;",
        "            }",
        "            //context.Value = _allFiles.Count;",
        "            return context;",
        "            ",
        "         ",
        "        }",
        "        ",
        "        private string _directoryPath;",
        "        private List<String>  _allFiles;",
        "        private int _minFileSize;",
        "        private int _maxFileSize;",
        "",
        "        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8ea12094-0b7c-4e75-ba96-0b2cbf89c5c4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2c464cdb-1b7b-4590-a597-1548f46fa6a9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96e80081-394d-47e4-9d36-1d53a0b43ddd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2c464cdb-1b7b-4590-a597-1548f46fa6a9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "44e7f12b-fb22-4116-a971-90d0e1682479",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2c464cdb-1b7b-4590-a597-1548f46fa6a9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e864eeeb-dacf-4021-a9d4-89c3bc32306a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2c464cdb-1b7b-4590-a597-1548f46fa6a9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c464cdb-1b7b-4590-a597-1548f46fa6a9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "16f9a252-8083-4f54-bf08-20b4e2202666"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c464cdb-1b7b-4590-a597-1548f46fa6a9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d896e04-d8df-40bd-88f7-f29ecc982c33"
    }
  ]
}