{
  "Name": "InfoOverlay",
  "_id": "68606a04-d87e-4328-bfe1-771d18509784",
  "Namespace": "lib.image.analysis",
  "Description": "Shows additional overlays on image to visualize invalid ranges and camera-mask.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "4503418b-06e0-4d50-ba40-c1aa1684c285",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float MaskAspectRatio;",
          "float ShowClamped;",
          "//<<< _parameters\r",
          "float UpdateCount;\r",
          "\r",
          "//>>> setup\r",
          "SamplerState samLinear\r",
          "{\r",
          "    //Filter = MIN_MAG_MIP_POINT;\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "float IsBetween( float value, float low, float high) {\r",
          "    return (value >= low && value <= high) ? 1:0;\r",
          "}\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float UpperLimit = 0.4;\r",
          "    float Lines = 0.9;\r",
          "    //float lowBound = 0.95 * UpperLimit - input.texCoord.y * UpperLimit - 0.1;\r",
          "    //float highBound= 0.95 * UpperLimit - input.texCoord.y * UpperLimit - 0.1 + 1/(RenderTargetSize.y) * UpperLimit;\r",
          "    float lowBound = 0.34;\r",
          "    float highBound = 0.4;\r",
          "    \r",
          "\r",
          "    float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "\r",
          "    float px = input.texCoord.x * (RenderTargetSize.x+1);\r",
          "    float py = input.texCoord.y * (RenderTargetSize.y+1);\r",
          "    \r",
          "    float x = input.texCoord.x;\r",
          "    float y = input.texCoord.y;\r",
          "    \r",
          "    float pitchX = 1/(RenderTargetSize.x+1);\r",
          "    float pitchY = 1/(RenderTargetSize.y+1);\r",
          "    \r",
          "    \r",
          "\r",
          "    // white clamping\r",
          "    if( (c.r >= 1 && c.g >= 1 && c.b >= 1 ) \r",
          "      ||(c.r <= 0 && c.g <= 0 && c.b <= 0 )    \r",
          "    ) {\r",
          "        if( (px -0.5 + py - 0.5 + UpdateCount) % 13 > 12 ) {\r",
          "            c = lerp( c, float4(0.6, 0.6, 0.6, 0.6), 0.4);\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    float verticalEdge= RenderTargetSize.y/ RenderTargetSize.x *  MaskAspectRatio/2 ;\r",
          "    \r",
          "    if( x < -verticalEdge + 0.5 \r",
          "    || x > verticalEdge + 0.5 + pitchX\r",
          "    ) {\r",
          "        c = lerp( c, float4(0.1, 0.1, 0.1, 0.6), 0.4);\r",
          "    }\r",
          "    \r",
          "    if(   IsBetween( x, -verticalEdge + 0.5, -verticalEdge  + 0.5 + pitchX) \r",
          "        ||IsBetween( x, verticalEdge + 0.5, verticalEdge  + 0.5 + pitchX)   ) {\r",
          "        c = lerp( c, float4(1, 1, 1, 1), 0.3);\r",
          "    }\r",
          "    \r",
          "   \r",
          "\r",
          "\r",
          "    //float isEdge = \r",
          "    return c;\r",
          "\r",
          "/*\r",
          "    c*= Original;\r",
          "    float3 rgb;\r",
          "    float gray;\r",
          "    \r",
          "    float lowBound = 0.95 * UpperLimit - input.texCoord.y * UpperLimit - 0.1;\r",
          "    float highBound= 0.95 * UpperLimit - input.texCoord.y * UpperLimit - 0.1 + 1/(RenderTargetSize.y) * UpperLimit;\r",
          "    \r",
          "    float sampleX = input.texCoord.x * 4.2 % 1.05;\r",
          "    \r",
          "    if ( sampleX > 1){\r",
          "        discard;\r",
          "    }\r",
          "    for (int i = 0; i < SampleCount  ; ++i) {\r",
          "        float4 s = Image.Sample(samLinear, float2(sampleX, i/SampleCount));\r",
          "        \r",
          "        rgb.r += IsBetween( s.r, lowBound, highBound) / SampleCount;\r",
          "        rgb.g += IsBetween( s.g, lowBound, highBound) / SampleCount; \r",
          "        rgb.b += IsBetween( s.b, lowBound, highBound) / SampleCount; \r",
          "        \r",
          "        float average=(s.r + s.g + s.b)/3 ; \r",
          "        gray += IsBetween( average, lowBound, highBound) / SampleCount; \r",
          "\r",
          "    }\r",
          "        \r",
          "    \r",
          "    if( input.texCoord.x < 0.25) {\r",
          "        c.rgb += gray * GrayScale;\r",
          "    }\r",
          "    else if( input.texCoord.x < 0.5) {\r",
          "        c.r += rgb.r * RGB;\r",
          "        c.gb += rgb.r * RGB * 0.5;\r",
          "    }\r",
          "    else if( input.texCoord.x < 0.75) {\r",
          "        c.g += rgb.g * RGB;\r",
          "        c.rb += rgb.g * RGB * 0.5;\r",
          "    }\r",
          "    else {\r",
          "        c.b += rgb.b * RGB;\r",
          "        c.rg += rgb.b * RGB * 0.5;\r",
          "    }\r",
          "    \r",
          "    \r",
          "    \r",
          "        \r",
          "    float px = input.texCoord.x * (RenderTargetSize.x+1);\r",
          "    float py = input.texCoord.y * (RenderTargetSize.y+1);\r",
          "    if( IsBetween( GuideAt, lowBound, highBound)) {\r",
          "        if( px % 6 > 3) {\r",
          "            c.rgb+= Lines;\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    if(  highBound > 1 || highBound < 0) {\r",
          "        if( (px-0.5 + py-0.5) % 10 > 9) {\r",
          "            c.rgb+= Lines/3;\r",
          "        }\r",
          "    }\r",
          "\r",
          "    c.a = 1.0;\r",
          "    return c;\r",
          "    */\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "8e073b49-12d5-401e-ba88-4017d06ade7c",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MaskAspectRatio",
      "MetaInstanceID": "8153e4b2-0510-44c4-855f-0fc5d690b836",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.6666"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShowClamped",
      "MetaInstanceID": "cf4d3f8b-6625-4e21-9d66-e2b9efc3f266",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "d505047d-16ca-46cc-b3c2-9d0fcce8b710",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d3e1f57b-9363-4880-9f3f-7539a6a9ee0d",
      "MetaID": "50d8d1d6-5627-4c87-860f-acbec82a0baa",
      "Name": "InfoOverlayFunc",
      "Version": "c9cbfb7d-c524-47b5-a1ff-71637c121610",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID50d8d1d6_5627_4c87_860f_acbec82a0baa",
        "{",
        "    public class Class_InfoOverlay : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            MaskAspectRatio = 2,",
        "            ShowClamped = 3",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; if (Image == null) return context;",
        "            var MaskAspectRatio = inputs[(int)InputId.MaskAspectRatio].Eval(context).Value;",
        "            var ShowClamped = inputs[(int)InputId.ShowClamped].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"MaskAspectRatio\").AsScalar().Set(MaskAspectRatio);",
        "                    _effect.GetVariableByName(\"ShowClamped\").AsScalar().Set(ShowClamped);",
        "                //<<< _setup",
        "                ",
        "                _effect.GetVariableByName(\"UpdateCount\").AsScalar().Set(_updateCount++);",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "        ",
        "        int _updateCount;",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d3e1f57b-9363-4880-9f3f-7539a6a9ee0d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d505047d-16ca-46cc-b3c2-9d0fcce8b710"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4503418b-06e0-4d50-ba40-c1aa1684c285",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d3e1f57b-9363-4880-9f3f-7539a6a9ee0d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8e073b49-12d5-401e-ba88-4017d06ade7c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d3e1f57b-9363-4880-9f3f-7539a6a9ee0d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8153e4b2-0510-44c4-855f-0fc5d690b836",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d3e1f57b-9363-4880-9f3f-7539a6a9ee0d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cf4d3f8b-6625-4e21-9d66-e2b9efc3f266",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d3e1f57b-9363-4880-9f3f-7539a6a9ee0d"
    }
  ]
}