{
  "Name": "QuadScatter",
  "_id": "b06dae77-ddb1-44d3-80d4-56e7ce7b6fcc",
  "Namespace": "lib.3d.modify",
  "Description": "GPU-based scatter deform derived from StreamOutput.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "018a9bce-bdfb-45dd-84b1-0cdf5b59d956",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Value;",
          "float3 Center;",
          "float2 Range;",
          "float Push;",
          "float Shrink;",
          "float Scatter;",
          "float Distort;",
          "float Rotate;",
          "float3 Translate;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "float getNoise(int x, int seed)\r",
          "{\r",
          "    int n = x + seed*137;\r",
          "    n = (n << 13) ^ n;\r",
          "    return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream, uint id : SV_PrimitiveID)\r",
          "{\r",
          "    int seed = id & 0xFFFFFE;\r",
          "\r",
          "\r",
          "    float3 pCenter = (input[0].pos.xyz + input[2].pos.xyz /* + input[2].pos.xyz*/)/2 + Translate;\r",
          "\r",
          "//    float randomSeedf= ((input[0].pos.x + input[1].pos.x + input[2].pos.x) / 3 +\r",
          "  //              (input[0].pos.y + input[1].pos.y + input[2].pos.y) / 3 -\r",
          "  //              (input[0].pos.z + input[1].pos.z + input[2].pos.z) / 3) * 100;\r",
          "                \r",
          "//    int seed = id & 0xFFFFFE;//(int)randomSeedf;\r",
          "\r",
          "    float3 direction = (pCenter-Center);\r",
          "    float distance = length(direction);            \r",
          "    //float x =   clamp(( Range.y - distance) / Range.x, 0, 1);\r",
          "    float falloff = Range.y;\r",
          "    if (falloff == 0) {\r",
          "        falloff = 0.00001;\r",
          "    }\r",
          "    float x = clamp(- (distance - Range.x)/falloff, 0, 1);\r",
          "    \r",
          "    float influence = x*x*(3 - 2*x);  // SmoothStep\r",
          "\r",
          "\r",
          "    float angleX= influence * 3.141578 * Rotate/360 * getNoise(13, seed) * 0.1f;\r",
          "    float cax= cos(angleX);\r",
          "    float sax= sin(angleX);    \r",
          "    float4x4 rotx = {    1,    0,    0,    0,\r",
          "                         0,    cax, -sax,  0,\r",
          "                         0,    sax,  cax,  0,\r",
          "                         0,    0,    0,    1};\r",
          "    float angleY= influence * 3.141578 * Rotate/360 * getNoise(1233, seed);\r",
          "    float cay= cos(angleY);\r",
          "    float say= sin(angleY);    \r",
          "    float4x4 roty = {    cay,  0,    say,  0,\r",
          "                         0,    1,    0,    0,\r",
          "                        -say,  0,    cay,  0,\r",
          "                         0,    0,    0,    1};\r",
          "                         \r",
          "                             \r",
          "    float4x4 translateToOrigin ={ 1,    0,    0,   -pCenter.x,\r",
          "                             0,    1,    0,   -pCenter.y,\r",
          "                             0,    0,    1,   -pCenter.z,\r",
          "                             0,    0,    0,   1};\r",
          "\r",
          "    float4x4 translateBack={  1,    0,    0,   pCenter.x,\r",
          "                             0,    1,    0,    pCenter.y,\r",
          "                             0,    0,    1,    pCenter.z,\r",
          "                             0,    0,    0,   1};\r",
          "\r",
          "\r",
          "    float3 offset=  normalize(direction) * influence * ( Push + getNoise(2342, seed) * Scatter );\r",
          "    float4x4 translateOffset={ 1,    0,    0,   offset.x,\r",
          "                               0,    1,    0,   offset.y,\r",
          "                               0,    0,    1,   offset.z, \r",
          "                               0,    0,    0,   1};\r",
          "\r",
          "    float4x4 rotation = mul(rotx,roty);\r",
          "    \r",
          "    float4x4 transform = translateToOrigin;\r",
          "    transform = mul( rotation, transform);\r",
          "    transform = mul( translateBack, transform);\r",
          "    transform = mul( translateOffset, transform);\r",
          "    \r",
          "\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;\r",
          "        p.xyz+= Translate;\r",
          "        \r",
          "        if(Shrink !=0) {\r",
          "            float shrinkScale = min(1, influence * Shrink);\r",
          "            p.xyz+= (pCenter-p)*shrinkScale;\r",
          "        }\r",
          "    \r",
          "        float pushStrength = Distort * getNoise(seed, 0) ;\r",
          "\r",
          "        p.xyz+= direction/distance * influence * pushStrength  ; \r",
          "        p = mul(transform, p);        \r",
          "        \r",
          "        vertex.pos.xyz = p.xyz;\r",
          "        vertex.normal = mul( float4(vertex.normal.xyz,1), rotation);\r",
          "        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "344911b6-bc6e-4be0-9f26-2d59a0927ca9",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Value",
      "MetaInstanceID": "49bb45e5-d7de-4b42-939d-fbc331f6f9a5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "80c445c6-cef0-4137-9ed1-f6506ccb90aa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "5f6a5688-e690-4ce8-ace2-b3c3d7dc2d14",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "243ff53d-26f7-46f5-831d-4c881879e1f9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Range.Size",
      "MetaInstanceID": "668eec30-9f7a-40f5-9e44-dd8b18f3c8d4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Range.FallOff",
      "MetaInstanceID": "e667e511-58ad-44a8-9869-0728f0acf8ca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Push",
      "MetaInstanceID": "8744e8c3-11c9-4c6c-9022-7395825b49fe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shrink",
      "MetaInstanceID": "64aec963-728d-4870-b628-c9bac49d7748",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter",
      "MetaInstanceID": "ed057875-476f-4903-b733-2ad6862f61eb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Distort",
      "MetaInstanceID": "f10a81e3-dd26-42a7-8eee-71dde27660c3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate",
      "MetaInstanceID": "2ef9b4c5-50e8-4b8d-ac39-8c3d255b9770",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Translate.X",
      "MetaInstanceID": "3f674a04-27e0-45ae-855f-b5862adc6ff7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Translate.Y",
      "MetaInstanceID": "d4f46390-9927-44f2-8741-4fe0ff80fdb6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Translate.Z",
      "MetaInstanceID": "3f24ba34-93f5-40b5-b78b-d6eb0a4eedc6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "1d274b03-a69a-4c9f-ac43-2a89b657651a",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d",
      "MetaID": "9722c7bc-d8d9-4c55-ba68-ee6bfb021cb0",
      "Name": "QuadScatterFunc",
      "Version": "efc196f2-bca3-4d33-a12c-263b511d84ff",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID9722c7bc_d8d9_4c55_ba68_ee6bfb021cb0",
        "{",
        "    public class Class_QuadScatter : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            Value = 2,",
        "            CenterX = 3,",
        "            CenterY = 4,",
        "            CenterZ = 5,",
        "            RangeSize = 6,",
        "            RangeFallOff = 7,",
        "            Push = 8,",
        "            Shrink = 9,",
        "            Scatter = 10,",
        "            Distort = 11,",
        "            Rotate = 12,",
        "            TranslateX = 13,",
        "            TranslateY = 14,",
        "            TranslateZ = 15",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_QuadScatter()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var Value = inputs[(int)InputId.Value].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var RangeSize = inputs[(int)InputId.RangeSize].Eval(context).Value;",
        "            var RangeFallOff = inputs[(int)InputId.RangeFallOff].Eval(context).Value;",
        "            var Range = new Vector2(RangeSize, RangeFallOff);",
        "            var Push = inputs[(int)InputId.Push].Eval(context).Value;",
        "            var Shrink = inputs[(int)InputId.Shrink].Eval(context).Value;",
        "            var Scatter = inputs[(int)InputId.Scatter].Eval(context).Value;",
        "            var Distort = inputs[(int)InputId.Distort].Eval(context).Value;",
        "            var Rotate = inputs[(int)InputId.Rotate].Eval(context).Value;",
        "            var TranslateX = inputs[(int)InputId.TranslateX].Eval(context).Value;",
        "            var TranslateY = inputs[(int)InputId.TranslateY].Eval(context).Value;",
        "            var TranslateZ = inputs[(int)InputId.TranslateZ].Eval(context).Value;",
        "            var Translate = new Vector3(TranslateX, TranslateY, TranslateZ);",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "",
        "            _effect.GetVariableByName(\"Value\").AsScalar().Set(Value);",
        "            _effect.GetVariableByName(\"Center\").AsVector().Set(new Vector3(CenterX, CenterY, CenterZ));",
        "            _effect.GetVariableByName(\"Translate\").AsVector().Set(new Vector3(TranslateX, TranslateY, TranslateZ));",
        "            _effect.GetVariableByName(\"Range\").AsVector().Set(new Vector2(RangeSize, RangeFallOff));",
        "            _effect.GetVariableByName(\"Push\").AsScalar().Set(Push);",
        "            _effect.GetVariableByName(\"Shrink\").AsScalar().Set(Shrink);",
        "            _effect.GetVariableByName(\"Scatter\").AsScalar().Set(Scatter);",
        "            _effect.GetVariableByName(\"Distort\").AsScalar().Set(Distort);",
        "            _effect.GetVariableByName(\"Rotate\").AsScalar().Set(Rotate);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) } );",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1d274b03-a69a-4c9f-ac43-2a89b657651a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "018a9bce-bdfb-45dd-84b1-0cdf5b59d956",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "344911b6-bc6e-4be0-9f26-2d59a0927ca9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "49bb45e5-d7de-4b42-939d-fbc331f6f9a5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "80c445c6-cef0-4137-9ed1-f6506ccb90aa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5f6a5688-e690-4ce8-ace2-b3c3d7dc2d14",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "243ff53d-26f7-46f5-831d-4c881879e1f9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "668eec30-9f7a-40f5-9e44-dd8b18f3c8d4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e667e511-58ad-44a8-9869-0728f0acf8ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8744e8c3-11c9-4c6c-9022-7395825b49fe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "64aec963-728d-4870-b628-c9bac49d7748",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ed057875-476f-4903-b733-2ad6862f61eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f10a81e3-dd26-42a7-8eee-71dde27660c3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ef9b4c5-50e8-4b8d-ac39-8c3d255b9770",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3f674a04-27e0-45ae-855f-b5862adc6ff7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d4f46390-9927-44f2-8741-4fe0ff80fdb6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3f24ba34-93f5-40b5-b78b-d6eb0a4eedc6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "081bddee-0cde-4c0a-87ea-9d54caaa0b2d"
    }
  ]
}