{
  "Name": "RGB2HSL",
  "_id": "3403e28b-a9a0-442d-b649-621bc06836d1",
  "Namespace": "lib.image.adjust",
  "Description": "Converts an image into Hue Saturation Brightness. This is the reverse of HSL2RGB. This might be useful for operations like...",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "a469a34b-8d5d-4a57-9cbd-eb828d39ff5c",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image1;",
          "float Steps;",
          "float4 Min;",
          "float4 Max;",
          "//<<< _parameters\r",
          "float4x4 ViewToWorld;\r",
          " \r",
          "SamplerState samNearest\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "\r",
          "float3 hsvToRgb( float h, float s, float v)\r",
          "{\r",
          "    float satR, satG, satB;\r",
          "    if (h < 120.0f)\r",
          "    {\r",
          "        satR = (120.0f - h) / 60.0f;\r",
          "        satG = h / 60.0f;\r",
          "        satB = 0.0f;\r",
          "    }\r",
          "    else if (h < 240.0f)\r",
          "    {\r",
          "        satR = 0.0f;\r",
          "        satG = (240.0f - h) / 60.0f;\r",
          "        satB = (h - 120.0f) / 60.0f;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        satR = (h - 240.0f) / 60.0f;\r",
          "        satG = 0.0f;\r",
          "        satB = (360.0f - h) / 60.0f;\r",
          "    }\r",
          "    satR = (satR < 1.0f) ? satR : 1.0f;\r",
          "    satG = (satG < 1.0f) ? satG : 1.0f;\r",
          "    satB = (satB < 1.0f) ? satB : 1.0f;\r",
          "\r",
          "    return float3( v*(s*satR + (1.0f - s)),\r",
          "                    v*(s*satG + (1.0f - s)),\r",
          "                    v*(s*satB + (1.0f - s)));\r",
          "                    \r",
          "}\r",
          "\r",
          "\r",
          "float3 rgbToHsv(float r, float g, float b)\r",
          "{\r",
          "    float delta, h,s, v;\r",
          "    float tmp = (r < g) ? r : g;\r",
          "    float min = (tmp < b) ? tmp : b;\r",
          "\r",
          "    tmp = (r > g) ? r : g;\r",
          "    float max = (tmp > b) ? tmp : b;\r",
          "\r",
          "    v = max;\t\t\t\t\r",
          "    delta = max - min;\r",
          "    if (max == min)\r",
          "    {\r",
          "        return float3( 0, 0, max);\r",
          "    }\r",
          "    else if (max != 0)\r",
          "    {\r",
          "        s = delta/max;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        // r = g = b = 0\t\t    // s = 0, v is undefined\r",
          "        s = 0;\r",
          "        h = 0;\r",
          "        return float3(h, s, v);\r",
          "    }\r",
          "    if (r == max)\r",
          "        h = (g - b) / delta;\t\t// between yellow & magenta\r",
          "    else if (g == max)\r",
          "        h = 2 + (b - r) / delta;\t// between cyan & yellow\r",
          "    else\r",
          "        h = 4 + (r - g) / delta;\t// between magenta & cyan\r",
          "    h *= 60;\t\t\t\t        // degrees\r",
          "    if (h < 0)\r",
          "        h += 360;\r",
          "    return float3(h,s,v);\r",
          "                \r",
          "}\r",
          "\r",
          "\r",
          "//>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    //float stepsInt = floor(Steps);\r",
          "    float4 c=Image1.Sample(samNearest, input.texCoord); \r",
          "    c.rgb= rgbToHsv(c.r, c.g, c.b); //c.r * 360*Min.x+Min.y, c.g, c.b);\r",
          "    c.r /=360;\r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image1",
      "MetaInstanceID": "373ed704-331e-4c0d-b7c5-9edd4d66f839",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "4cfe9704-e917-4dc7-b9aa-a7cfaff7efad",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "9f7a1ce2-b951-4aa9-985c-4b9b4609d221",
      "MetaID": "a1cc13f7-10dd-4bcb-8773-3720558c4d90",
      "Name": "RGB2HSLFunc",
      "Version": "2277aabe-073e-44fb-8f61-c91ad88179c4",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDa1cc13f7_10dd_4bcb_8773_3720558c4d90",
        "{",
        "    public class Class_RGB2HSL : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image1 = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> _params",
        "                var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "                var Image1 = inputs[(int)InputId.Image1].Eval(context).Image; // Needs to be checked for null!",
        "                //<<< _params",
        "",
        "                if(Image1 == null)",
        "                    return;",
        "                    ",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var Image1View = new ShaderResourceView(context.D3DDevice, Image1))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image1\").AsShaderResource().SetResource(Image1View);",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9f7a1ce2-b951-4aa9-985c-4b9b4609d221",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4cfe9704-e917-4dc7-b9aa-a7cfaff7efad"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a469a34b-8d5d-4a57-9cbd-eb828d39ff5c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9f7a1ce2-b951-4aa9-985c-4b9b4609d221"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "373ed704-331e-4c0d-b7c5-9edd4d66f839",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9f7a1ce2-b951-4aa9-985c-4b9b4609d221"
    }
  ]
}