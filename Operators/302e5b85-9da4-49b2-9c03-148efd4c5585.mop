{
  "Name": "MoveByImageMap",
  "_id": "302e5b85-9da4-49b2-9c03-148efd4c5585",
  "Namespace": "projects.igravity.shaders",
  "Description": "Reimplementation of Vasarely checkerboard-effects.\r\n\r\nIt works nicely with a [PlaneGrid] and a [DisplaceTexture] as input. However, rendering the [PlaneGrid] is super(!) slow for many instances.\r\n\r\nFor that reason [GridWithDisplace] is a much better alternative, because it uses instancing.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "692d4597-1bde-4803-af9d-f6838de2cc47",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D DisplaceMap;",
          "float2 TextureScale;",
          "float2 Rotate;",
          "float2 InitialScale;",
          "float Shading;",
          "float2 DisplaceScale;",
          "//<<< _parameters\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    //Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>> VS\r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    uint Width;",
          "    uint Height;",
          "    DisplaceMap.GetDimensions(Width, Height);",
          "",
          "    float4 worldTPos = mul(float4(0, 0, 0, 1), objectToWorldMatrix);",
          "",
          "    float2 displaceTexCoord = ((worldTPos.xy) / TextureScale  - float2(0.5,0.5)) * float2(1,-1);",
          "",
          "    /* Note: You can't use a simple Sample() call in the vertex shader as",
          "       it doesn't know what mipmap level to sample from, so the data coming ",
          "       back can't really be a float 4.*/",
          "    float4 sample0= DisplaceMap.SampleLevel(samLinear, displaceTexCoord, 0);",
          "    ",
          "\tfloat4 displaceSample = sample0;",
          "",
          "    float finalRotate = displaceSample.b * 2 * 3.14159265f / 360.0f * Rotate.x + Rotate.y * 2 * 3.14159265f / 360.0f;",
          "",
          "    float4x4 rotateTransform;",
          "    rotateTransform[0].xyzw =  float4(cos(finalRotate), sin(finalRotate), 0, 0);",
          "    rotateTransform[1].xyzw =  float4(-sin(finalRotate), cos(finalRotate), 0, 0);",
          "    rotateTransform[2].xyzw = float4(0, 0, 1, 0);",
          "    rotateTransform[3].xyzw = float4(0, 0, 0, 1);",
          "",
          "    float4x4 scaleTransform;",
          "    scaleTransform[0].xyzw = float4(InitialScale.x + DisplaceScale.x * displaceSample.r, 0, 0, 0);",
          "    scaleTransform[1].xyzw = float4(0, InitialScale.y + DisplaceScale.y * displaceSample.g, 0, 0);",
          "    scaleTransform[2].xyzw = float4(0, 0, 1, 0);",
          "    scaleTransform[3].xyzw = float4(0, 0, 0, 1);",
          "",
          "    input.pos = mul(input.pos, scaleTransform);",
          "    ",
          "    input.pos = mul(input.pos, rotateTransform);",
          "    input.pos = mul(input.pos, objectToWorldMatrix);",
          "    ",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    ",
          "    if(Shading <= 1) {",
          "        output.vertexColor = lerp(input.col, sample0, Shading);",
          "    }",
          "    else {",
          "        output.vertexColor = input.col;",
          "    }",
          "    ",
          "    output.texCoord = mul(float4(input.texCoord.xy, 0, 1), textureMatrix).xy;",
          "",
          "",
          "    output.normal = mul(input.normal, (float3x3)objectToWorldMatrix);",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);",
          "",
          "    return output;",
          "}",
          "",
          "//<<< VS\r",
          "\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    \r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation;\r",
          "                   \r",
          "    return color;\r",
          "\r",
          "}\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    if(Shading ==2){\r",
          "        float2 newTexCoords = input.texCoord;\r",
          "        float3 norm = normalize(input.normal);\r",
          "        float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords) * input.vertexColor;\r",
          "\r",
          "        float4 color = float4(0, 0, 0, 1);\r",
          "        for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "        {\r",
          "            color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "        }\r",
          "        color += materialEmission*baseColor;\r",
          "\r",
          "        float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "        fog = clamp(fog, 0.0, 1.0);\r",
          "        return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "\r",
          "    }\r",
          "    else {\r",
          "        return input.vertexColor;\r",
          "    }\r",
          "}\r",
          "\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "dcc0ec87-3162-4578-b86c-824652e4630a",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceMap",
      "MetaInstanceID": "135c0f04-5c6b-4f43-ba16-c9372705ae8b",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureScale.X",
      "MetaInstanceID": "f7589ec5-628c-4d9f-9f71-3184bd68a40f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "40"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureScale.Y",
      "MetaInstanceID": "c4556d5b-2e8d-41d8-a0bb-f603ac48d58f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "40"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Amount",
      "MetaInstanceID": "9ef3d477-2629-4858-b9be-4c79396e62f8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "45"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Offset",
      "MetaInstanceID": "43d7c939-c40d-477f-93f3-85d9d02035ad",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InitialScale.X",
      "MetaInstanceID": "46dc47d3-aeaa-4ce6-958b-f5243af822de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InitialScale.Y",
      "MetaInstanceID": "99366bd9-35e9-46eb-a5bb-4e48b147bd38",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shading",
      "MetaInstanceID": "0f548911-ebe1-4fc9-b031-0599a0cfde44",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Flat",
          "Value": "0"
        },
        {
          "Name": "DisplaceMap",
          "Value": "1"
        },
        {
          "Name": "Phong (experimental)",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "DisplaceScale.X",
      "MetaInstanceID": "dcae496f-3bc2-490d-887a-13c82713204a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceScale.Y",
      "MetaInstanceID": "0ada5484-3d1d-4bcc-b2b3-28bec8ffcfae",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "63ec91cd-3a09-4d28-8cd3-9407789060bb",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "a6b2677c-534c-4794-b410-c8c7c445d9b7",
      "MetaID": "736482d6-370a-4f0a-995b-db4c5ded13e7",
      "Name": "MoveByImageMapFunc",
      "Version": "c20a14bb-42fb-47a6-8be9-78588bf98b91",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.Rendering;",
        "",
        "namespace Framefield.Core.ID736482d6_370a_4f0a_995b_db4c5ded13e7",
        "{",
        "    public class Class_MoveByImageMap : FXSourceCodeFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            DisplaceMap = 2,",
        "            TextureScaleX = 3,",
        "            TextureScaleY = 4,",
        "            RotateAmount = 5,",
        "            RotateOffset = 6,",
        "            InitialScaleX = 7,",
        "            InitialScaleY = 8,",
        "            Shading = 9,",
        "            DisplaceScaleX = 10,",
        "            DisplaceScaleY = 11",
        "        }",
        "        //<<< _inputids",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc,\"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc{get;set;}",
        "        }",
        "        #endregion",
        "",
        "        public Class_MoveByImageMap()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc=this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            // >>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var DisplaceMap = inputs[(int)InputId.DisplaceMap].Eval(context).Image; if (DisplaceMap == null) return context;",
        "            var TextureScaleX = inputs[(int)InputId.TextureScaleX].Eval(context).Value;",
        "            var TextureScaleY = inputs[(int)InputId.TextureScaleY].Eval(context).Value;",
        "            var TextureScale = new Vector2(TextureScaleX, TextureScaleY);",
        "            var RotateAmount = inputs[(int)InputId.RotateAmount].Eval(context).Value;",
        "            var RotateOffset = inputs[(int)InputId.RotateOffset].Eval(context).Value;",
        "            var Rotate = new Vector2(RotateAmount, RotateOffset);",
        "            var InitialScaleX = inputs[(int)InputId.InitialScaleX].Eval(context).Value;",
        "            var InitialScaleY = inputs[(int)InputId.InitialScaleY].Eval(context).Value;",
        "            var InitialScale = new Vector2(InitialScaleX, InitialScaleY);",
        "            var Shading = (int) inputs[(int)InputId.Shading].Eval(context).Value;",
        "            var DisplaceScaleX = inputs[(int)InputId.DisplaceScaleX].Eval(context).Value;",
        "            var DisplaceScaleY = inputs[(int)InputId.DisplaceScaleY].Eval(context).Value;",
        "            var DisplaceScale = new Vector2(DisplaceScaleX, DisplaceScaleY);",
        "            // <<< _params",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "                ",
        "                using (new PropertyStasher<OperatorPartContext>(context, \"Effect\", \"Renderer\"))",
        "                // >>> __setup",
        "                using (var DisplaceMapView = new ShaderResourceView(context.D3DDevice, DisplaceMap))",
        "                {                    ",
        "                    _effect.GetVariableByName(\"DisplaceMap\").AsShaderResource().SetResource(DisplaceMapView);",
        "                    _effect.GetVariableByName(\"TextureScale\").AsVector().Set(new Vector2(TextureScaleX, TextureScaleY));",
        "                    _effect.GetVariableByName(\"Rotate\").AsVector().Set(new Vector2(RotateAmount, RotateOffset));",
        "                    _effect.GetVariableByName(\"InitialScale\").AsVector().Set(new Vector2(InitialScaleX, InitialScaleY));",
        "                    _effect.GetVariableByName(\"DisplaceScale\").AsVector().Set(new Vector2(DisplaceScaleX, DisplaceScaleY));",
        "                    _effect.GetVariableByName(\"Shading\").AsScalar().Set(Shading);",
        "                // <<< __setup",
        "                ",
        "",
        "                context.Effect = _effect;",
        "                context.Renderer = _renderer;",
        "                Scene.Eval(context);",
        "            }",
        "            return context;",
        "        }",
        "",
        "        Renderer _renderer;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "63ec91cd-3a09-4d28-8cd3-9407789060bb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "692d4597-1bde-4803-af9d-f6838de2cc47",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dcc0ec87-3162-4578-b86c-824652e4630a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "135c0f04-5c6b-4f43-ba16-c9372705ae8b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f7589ec5-628c-4d9f-9f71-3184bd68a40f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c4556d5b-2e8d-41d8-a0bb-f603ac48d58f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ef3d477-2629-4858-b9be-4c79396e62f8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "43d7c939-c40d-477f-93f3-85d9d02035ad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "46dc47d3-aeaa-4ce6-958b-f5243af822de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "99366bd9-35e9-46eb-a5bb-4e48b147bd38",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0f548911-ebe1-4fc9-b031-0599a0cfde44",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dcae496f-3bc2-490d-887a-13c82713204a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0ada5484-3d1d-4bcc-b2b3-28bec8ffcfae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6b2677c-534c-4794-b410-c8c7c445d9b7"
    }
  ]
}