{
  "Name": "FetchURL",
  "_id": "fff293e0-30d0-4a46-a865-77452ccb2272",
  "Namespace": "lib.basic",
  "Description": "Extracts the Nth Element of an incoming generic String List\r\nhttp://www.google.com",
  "Inputs": [
    {
      "Name": "URL",
      "MetaInstanceID": "9c5c6efe-5a94-4c7c-a8ea-8f03861649fc",
      "DefaultValue": {
        "Type": "Text",
        "Value": "http://free.worldweatheronline.com/feed/weather.ashx?key=42b47d7e24175802120511&q=52.8,10&cc=no&num_of_days=5&format=csv"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriggerUpdate",
      "MetaInstanceID": "1c4613e0-8078-4499-933a-d2d9ac9e561c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Value",
      "MetaInstanceID": "a5f0d536-0ea3-4e95-99bf-c5f92387fe99",
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "a7e45a17-1fa3-4297-9eff-dfa480a5ad1c",
      "MetaID": "06d4d375-adbd-4a8c-9739-b84015578873",
      "Name": "FetchURLFunc",
      "Version": "01feeeb1-e597-4fba-8e49-c135047d7f0f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.Net;",
        "using System.IO;",
        "",
        "using System.Threading;",
        "using System.Threading.Tasks;",
        "//using System.Runtime.Serialization.Json;",
        "using System.Collections.Specialized;",
        "",
        "namespace Framefield.Core.ID06d4d375_adbd_4a8c_9739_b84015578873",
        "{",
        "    public class Class_CreateDynamic : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            URL = 0,",
        "            TriggerUpdate = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var URL = inputs[(int)InputId.URL].Eval(context).Text;",
        "            var TriggerUpdate = inputs[(int)InputId.TriggerUpdate].Eval(context).Value;",
        "            //<<< _params",
        "",
        "",
        "            if( URL != _oldURL || TriggerUpdate != _lastUpdate ) {",
        "                _content= \"...\";",
        "                _lastUpdate=TriggerUpdate;",
        "           ",
        "            ",
        "                Logger.Info(this,\"New URL\"+URL);",
        "                HttpWebRequest req = (HttpWebRequest)WebRequest.Create(URL);",
        "                req.Timeout = 10000;",
        "                req.ReadWriteTimeout = 10000;",
        "                try ",
        "                {",
        "                    using (WebResponse wr = req.GetResponse())",
        "                    {",
        "                        Logger.Info(this,\"A: \" + DateTime.Now.ToString(\" HH:mm:ss:fff\"));",
        "                        ",
        "                        using (StreamReader sr = new StreamReader(wr.GetResponseStream(), true))",
        "                        {",
        "                            Logger.Info(this,\"B: \" + DateTime.Now.ToString(\" HH:mm:ss:fff\"));",
        "                            _content = sr.ReadToEnd();",
        "                            Logger.Info(this,\"C: \" + DateTime.Now.ToString(\" HH:mm:ss:fff\"));",
        "                        }",
        "                    }",
        "                    _oldURL = URL;",
        "                }",
        "                catch (Exception)",
        "                {",
        "                    Logger.Error(this,\"Error requesting url '{0}'\", URL); ",
        "                }",
        "            }",
        "            ",
        "            /*",
        "            var postParameters = new NameValueCollection();",
        "            //postParameters.Add(\"data\", i.ToString());",
        "            HttpSocket.PostAsync(URL, postParameters, callbackState =>",
        "              {",
        "                Logger.Info(this,\"Something happened\");",
        "                if (callbackState.Exception != null)",
        "                  throw callbackState.Exception;",
        "                  //_content= HttpSocket.GetResponseText(callbackState.ResponseStream);",
        "                  Logger.Info(this,\"Finally fetched data from \" + URL);",
        "                  ",
        "              });",
        "            } ",
        "            */            ",
        "",
        "            //dynamic obj = new ExpandoObject();",
        "",
        "            //XmlDocument doc = new XmlDocument();",
        "            //doc.Load(FilePath);",
        "            //XmlElement root = doc.DocumentElement;",
        "",
        "            //var list = new List<string>();",
        "            //foreach (XmlNode item in root.GetElementsByTagName(\"item\")) {",
        "            //    var value = item[\"title\"].InnerText;",
        "            //    list.Add(value);",
        "            //}",
        "",
        "            //context.Dynamic = list;",
        "            context.Text= _content;",
        "            return context;",
        "        }",
        "        ",
        "        string _oldURL = \"\"; ",
        "        string _content =\"bla\";",
        "        float _lastUpdate = 0;",
        "    }",
        "    ",
        "",
        "  public static class HttpSocket",
        "  {",
        "    static HttpWebRequest CreateHttpWebRequest(string url, string httpMethod, string contentType)",
        "    {",
        "      var httpWebRequest = (HttpWebRequest)WebRequest.Create(url);",
        "      httpWebRequest.ContentType = contentType;",
        "      httpWebRequest.Method = httpMethod;",
        "      return httpWebRequest;",
        "    }",
        "",
        "    static byte[] GetRequestBytes(NameValueCollection postParameters)",
        "    {",
        "      if (postParameters == null || postParameters.Count == 0)",
        "        return new byte[0];",
        "      var sb = new StringBuilder();",
        "      foreach (var key in postParameters.AllKeys)",
        "        sb.Append(key + \"=\" + postParameters[key] + \"&\");",
        "      sb.Length = sb.Length - 1;",
        "      return Encoding.UTF8.GetBytes(sb.ToString());",
        "    }",
        "",
        "    static void BeginGetRequestStreamCallback(IAsyncResult asyncResult)",
        "    {",
        "      Stream requestStream = null;",
        "      HttpWebRequestAsyncState asyncState = null;",
        "      try",
        "      {",
        "        asyncState = (HttpWebRequestAsyncState)asyncResult.AsyncState;",
        "        requestStream = asyncState.HttpWebRequest.EndGetRequestStream(asyncResult);",
        "        requestStream.Write(asyncState.RequestBytes, 0, asyncState.RequestBytes.Length);",
        "        requestStream.Close();",
        "        asyncState.HttpWebRequest.BeginGetResponse(BeginGetResponseCallback,",
        "          new HttpWebRequestAsyncState",
        "          {",
        "            HttpWebRequest = asyncState.HttpWebRequest,",
        "            ResponseCallback = asyncState.ResponseCallback,",
        "            State = asyncState.State",
        "          });",
        "      }",
        "      catch (Exception ex)",
        "      {",
        "        if (asyncState != null)",
        "          asyncState.ResponseCallback(new HttpWebRequestCallbackState(ex));",
        "        else",
        "          throw;",
        "      }",
        "      finally",
        "      {",
        "        if (requestStream != null)",
        "          requestStream.Close();",
        "      }",
        "    }",
        "",
        "    static void BeginGetResponseCallback(IAsyncResult asyncResult)",
        "    {",
        "      WebResponse webResponse = null;",
        "      Stream responseStream = null;",
        "      HttpWebRequestAsyncState asyncState = null;",
        "      try",
        "      {",
        "        asyncState = (HttpWebRequestAsyncState)asyncResult.AsyncState;",
        "        webResponse = asyncState.HttpWebRequest.EndGetResponse(asyncResult);",
        "        responseStream = webResponse.GetResponseStream();",
        "        var webRequestCallbackState = new HttpWebRequestCallbackState(responseStream, asyncState.State);",
        "        asyncState.ResponseCallback(webRequestCallbackState);",
        "        responseStream.Close();",
        "        responseStream = null;",
        "        webResponse.Close();",
        "        webResponse = null;",
        "      }",
        "      catch (Exception ex)",
        "      {",
        "        if (asyncState != null)",
        "          asyncState.ResponseCallback(new HttpWebRequestCallbackState(ex));",
        "        else",
        "          throw;",
        "      }",
        "      finally",
        "      {",
        "        if (responseStream != null)",
        "          responseStream.Close();",
        "        if (webResponse != null)",
        "          webResponse.Close();",
        "      }",
        "    }",
        "",
        "    /// <summary>",
        "    /// If the response from a remote server is in text form",
        "    /// you can use this method to get the text from the ResponseStream",
        "    /// This method Disposes the stream before it returns",
        "    /// </summary>",
        "    /// <param name=\"responseStream\">The responseStream that was provided in the callback delegate's HttpWebRequestCallbackState parameter</param>",
        "    /// <returns></returns>",
        "    public static string GetResponseText(Stream responseStream)",
        "    {",
        "      using (var reader = new StreamReader(responseStream))",
        "      {",
        "        return reader.ReadToEnd();",
        "      }",
        "    }",
        "",
        "    /// <summary>",
        "    /// This method uses the DataContractJsonSerializer to",
        "    /// Deserialize the contents of a stream to an instance",
        "    /// of an object of type T.",
        "    /// This method disposes the stream before returning",
        "    /// </summary>",
        "    /// <typeparam name=\"T\"></typeparam>",
        "    /// <param name=\"stream\">A Stream. Typically the ResponseStream</param>",
        "    /// <returns>An instance of an object of type T</returns>",
        "/*    static T DeSerializeToJson<T>(Stream stream)",
        "    {",
        "      using (stream)",
        "      {",
        "        var deserializer = new DataContractJsonSerializer(typeof(T));",
        "        return (T)deserializer.ReadObject(stream);",
        "      }",
        "    }",
        "*/",
        "    /// <summary>",
        "    /// This method does an Http POST sending any post parameters to the url provided",
        "    /// </summary>",
        "    /// <param name=\"url\">The url to make an Http POST to</param>",
        "    /// <param name=\"postParameters\">The form parameters if any that need to be POSTed</param>",
        "    /// <param name=\"responseCallback\">The callback delegate that should be called when the response returns from the remote server</param>",
        "    /// <param name=\"state\">Any state information you need to pass along to be available in the callback method when it is called</param>",
        "    /// <param name=\"contentType\">The Content-Type of the Http request</param>",
        "    public static void PostAsync(string url, NameValueCollection postParameters,",
        "      Action<HttpWebRequestCallbackState> responseCallback, object state = null,",
        "      string contentType = \"application/x-www-form-urlencoded\")",
        "    {",
        "      var httpWebRequest = CreateHttpWebRequest(url, \"POST\", contentType);",
        "      var requestBytes = GetRequestBytes(postParameters);",
        "      httpWebRequest.ContentLength = requestBytes.Length;",
        "",
        "      httpWebRequest.BeginGetRequestStream(BeginGetRequestStreamCallback,",
        "        new HttpWebRequestAsyncState()",
        "        {",
        "          RequestBytes = requestBytes,",
        "          HttpWebRequest = httpWebRequest,",
        "          ResponseCallback = responseCallback,  ",
        "          State = state",
        "        });",
        "    }",
        "",
        "    /// <summary>",
        "    /// This method does an Http GET to the provided url and calls the responseCallback delegate",
        "    /// providing it with the response returned from the remote server.",
        "    /// </summary>",
        "    /// <param name=\"url\">The url to make an Http GET to</param>",
        "    /// <param name=\"responseCallback\">The callback delegate that should be called when the response returns from the remote server</param>",
        "    /// <param name=\"state\">Any state information you need to pass along to be available in the callback method when it is called</param>",
        "    /// <param name=\"contentType\">The Content-Type of the Http request</param>",
        "    public static void GetAsync(string url, Action<HttpWebRequestCallbackState> responseCallback,",
        "      object state = null, string contentType = \"application/x-www-form-urlencoded\")",
        "    {",
        "      var httpWebRequest = CreateHttpWebRequest(url, \"GET\", contentType);",
        "",
        "      httpWebRequest.BeginGetResponse(BeginGetResponseCallback,",
        "        new HttpWebRequestAsyncState()",
        "        {",
        "          HttpWebRequest = httpWebRequest,",
        "          ResponseCallback = responseCallback,",
        "          State = state",
        "        });",
        "    }",
        "",
        "    public static void PostAsyncTask(string url, NameValueCollection postParameters,",
        "      Action<HttpWebRequestCallbackState> responseCallback, object state = null,",
        "      string contentType = \"application/x-www-form-urlencoded\")",
        "    {",
        "      var httpWebRequest = CreateHttpWebRequest(url, \"POST\", contentType);",
        "      var requestBytes = GetRequestBytes(postParameters);",
        "      httpWebRequest.ContentLength = requestBytes.Length;",
        "",
        "      var asyncState = new HttpWebRequestAsyncState()",
        "      {",
        "        RequestBytes = requestBytes,",
        "        HttpWebRequest = httpWebRequest,",
        "        ResponseCallback = responseCallback,",
        "        State = state",
        "      };",
        "",
        "      Task.Factory.FromAsync<Stream>(httpWebRequest.BeginGetRequestStream,",
        "        httpWebRequest.EndGetRequestStream, asyncState, TaskCreationOptions.None)",
        "        .ContinueWith<HttpWebRequestAsyncState>(task =>",
        "        {",
        "          var asyncState2 = (HttpWebRequestAsyncState)task.AsyncState;",
        "          using (var requestStream = task.Result)",
        "          {",
        "            requestStream.Write(asyncState2.RequestBytes, 0, asyncState2.RequestBytes.Length);",
        "          }          ",
        "          return asyncState2;",
        "        })",
        "        .ContinueWith(task =>",
        "        {",
        "          var httpWebRequestAsyncState2 = (HttpWebRequestAsyncState)task.Result;",
        "          var hwr2 = httpWebRequestAsyncState2.HttpWebRequest;",
        "          Task.Factory.FromAsync<WebResponse>(hwr2.BeginGetResponse,",
        "            hwr2.EndGetResponse, httpWebRequestAsyncState2, TaskCreationOptions.None)",
        "            .ContinueWith(task2 =>",
        "            {",
        "              WebResponse webResponse = null;",
        "              Stream responseStream = null;",
        "              try",
        "              {",
        "                var asyncState3 = (HttpWebRequestAsyncState)task2.AsyncState;",
        "                webResponse = task2.Result;",
        "                responseStream = webResponse.GetResponseStream();",
        "                responseCallback(new HttpWebRequestCallbackState(responseStream, asyncState3));",
        "              }",
        "              finally",
        "              {",
        "                if (responseStream != null)",
        "                  responseStream.Close();",
        "                if (webResponse != null)",
        "                  webResponse.Close();",
        "              }",
        "            });",
        "        });",
        "    }",
        "",
        "    public static void GetAsyncTask(string url, Action<HttpWebRequestCallbackState> responseCallback,",
        "      object state = null, string contentType = \"application/x-www-form-urlencoded\")",
        "    {",
        "      var httpWebRequest = CreateHttpWebRequest(url, \"GET\", contentType);",
        "      Task.Factory.FromAsync<WebResponse>(httpWebRequest.BeginGetResponse,",
        "        httpWebRequest.EndGetResponse, null).ContinueWith(task =>",
        "          {",
        "            var webResponse = task.Result;",
        "            var responseStream = webResponse.GetResponseStream();",
        "            responseCallback(new HttpWebRequestCallbackState(webResponse.GetResponseStream(), state));",
        "            responseStream.Close();",
        "            webResponse.Close();",
        "          });",
        "    }",
        "  }",
        "",
        "  /// <summary>",
        "  /// This class is used to pass on \"state\" between each Begin/End call",
        "  /// It also carries the user supplied \"state\" object all the way till",
        "  /// the end where is then hands off the state object to the",
        "  /// HttpWebRequestCallbackState object.",
        "  /// </summary>",
        "  class HttpWebRequestAsyncState",
        "  {",
        "    public byte[] RequestBytes { get; set; }",
        "    public HttpWebRequest HttpWebRequest { get; set; }",
        "    public Action<HttpWebRequestCallbackState> ResponseCallback { get; set; }",
        "    public Object State { get; set; }",
        "  }",
        "",
        "  /// <summary>",
        "  /// This class is passed on to the user supplied callback method",
        "  /// as a parameter. If there was an exception during the process",
        "  /// then the Exception property will not be null and will hold",
        "  /// a reference to the Exception that was raised.",
        "  /// The ResponseStream property will be not null in the case of",
        "  /// a sucessful request/response cycle. Use this stream to",
        "  /// exctract the response.",
        "  /// </summary>",
        "  public class HttpWebRequestCallbackState",
        "  {",
        "    public Stream ResponseStream { get; private set; }",
        "    public Exception Exception { get; private set; }",
        "    public Object State { get; set; }",
        "",
        "    public HttpWebRequestCallbackState(Stream responseStream, object state)",
        "    {",
        "      ResponseStream = responseStream;",
        "      State = state;",
        "    }",
        "",
        "    public HttpWebRequestCallbackState(Exception exception)",
        "    {",
        "      Exception = exception;",
        "    }",
        "  }",
        "",
        "    ",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9c5c6efe-5a94-4c7c-a8ea-8f03861649fc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a7e45a17-1fa3-4297-9eff-dfa480a5ad1c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1c4613e0-8078-4499-933a-d2d9ac9e561c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a7e45a17-1fa3-4297-9eff-dfa480a5ad1c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7e45a17-1fa3-4297-9eff-dfa480a5ad1c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a5f0d536-0ea3-4e95-99bf-c5f92387fe99"
    }
  ]
}