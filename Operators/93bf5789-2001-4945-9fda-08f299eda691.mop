{
  "Name": "GodRaysFromLight",
  "_id": "93bf5789-2001-4945-9fda-08f299eda691",
  "Namespace": "lib.image.blur",
  "Description": "Radial blur with depth mask from a light position.\r\n\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "2fe814fc-ab7d-4864-8984-a1b020aa06ec",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> __parameters\r",
          "//godrays",
          "Texture2D Image;",
          "float Strength;",
          "float Rays;",
          "float ShiftDepth;",
          "float Size;",
          "float NumberOfSamples;",
          "float3 CenterInCamera;",
          "float3 CenterInView;\r",
          "float4 Color;\r",
          "\r",
          "//radial blur\r",
          "float Brightness;\r",
          "float Contrast;\r",
          "float NumberOfBlurSamples;\r",
          "float Offset;\r",
          "float BlurSize;\r",
          "//<<< __parameters\r",
          "\r",
          "Texture2D txDepth;\r",
          "float4x4 viewToCamera;\r",
          " \r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> VS \r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
          "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = input.texCoord;\r",
          "\r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "\r",
          "//>>> PSGodRays\r",
          "float4 psGodRays( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "    float depth = txDepth.SampleLevel(samLinear, input.texCoord, 0).r;\r",
          "    float4 viewTFragPos = float4(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0, depth, 1.0);\r",
          "    float4 cameraTFragPos = mul(viewTFragPos, viewToCamera);\r",
          "    cameraTFragPos /= cameraTFragPos.w;\r",
          "\r",
          "    float sampleStep = 1;\r",
          "    float2 sampleDir = viewTFragPos.xy - CenterInView.xy;\r",
          "    sampleDir.x = -sampleDir.x;\r",
          "    float2 dir = sampleStep*Size/NumberOfSamples*sampleDir;\r",
          "\r",
          "    float2 pos = dir;\r",
          "    float distanceToCenter;\r",
          "    for (int i = 0; i < NumberOfSamples; ++i)\r",
          "    {\r",
          "        float2 p = input.texCoord + pos;\r",
          "        \r",
          "        if (p.x > 0 && p.x < 1 && p.y > 0 && p.y < 1)\r",
          "        {\r",
          "            float depth2 = txDepth.SampleLevel(samLinear, p, 0).r;\r",
          "            if (depth2 > CenterInView.z + ShiftDepth/100)\r",
          "            {                \r",
          "                distanceToCenter = Strength/(length(pos)*10);\r",
          "                c += float4(1,1,1,1)*distanceToCenter+Rays;\r",
          "            }\r",
          "        }        \r",
          "        pos += dir;\r",
          "    }\r",
          "    c /= 100;\r",
          "    c*=Color;\r",
          "\r",
          "    return c;\r",
          "}\r",
          "//<<< PSGodRays\r",
          "\r",
          "//>>> PSRadialBlur\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "float4 psRadialBlur( PS_IN input ) : SV_Target\r",
          "{\r",
          "    //return txDiffuse.Sample(samLinear, input.texCoord);\r",
          "/*    \r",
          "    float2 r = input.texCoord - CenterInView;    \r",
          "    float2 r = sampleDir;    \r",
          "    float4 c = float4(0,0,0,0);\r",
          "    float totalWeight = 0;\r",
          "   \r",
          "    for (int i = 0; i < NumberOfBlurSamples; ++i) {\r",
          "        float ir = i/floor(NumberOfBlurSamples);\r",
          "        float weightIndex = (int)(abs(ir*2-1)*1 * (NUMWT-1));\r",
          "        float weight = lerp(Gauss[weightIndex], Gauss[(int)weightIndex + 1], frac(weightIndex));\r",
          "    \r",
          "        float f= max(0, (ir - 0.5 + Offset) * 0.01*BlurSize +1);\r",
          "        float2 p = CenterInView + f * r ;\r",
          "        //float2 p = input.texCoord + pos;\r",
          "        c += txDiffuse.Sample(samLinear, p)*weight;\r",
          "        totalWeight += weight;\r",
          "        //pos += sampleDir;\r",
          "    }\r",
          "    return float(Contrast) + c.rgba/totalWeight*Brightness;\r",
          "*/\r",
          "\r",
          "\r",
          "    float2 viewTFragPos = float2(input.texCoord.x*2.0 - 1.0, -input.texCoord.y*2.0 + 1.0);\r",
          "\r",
          "    float sampleStep = 1;\r",
          "    float2 sampleDir = viewTFragPos.xy - CenterInView.xy;\r",
          "    sampleDir.x = -sampleDir.x;\r",
          "    float2 dir = sampleStep*BlurSize/NumberOfSamples*sampleDir;\r",
          "\r",
          "    float4 c = float4(0, 0, 0, 0);\r",
          "    float totalWeight = 0;\r",
          "    float2 pos = dir - NumberOfBlurSamples*0.5*dir - dir*Offset;\r",
          "    float distanceToCenter;\r",
          "    for (int i = 0; i < NumberOfBlurSamples; ++i)\r",
          "    {\r",
          "        float2 p = input.texCoord + pos;\r",
          "        \r",
          "        if (p.x > 0 && p.x < 1 && p.y > 0 && p.y < 1)\r",
          "        {\r",
          "            float ir = i/floor(NumberOfBlurSamples);\r",
          "            float weightIndex = (int)(abs(ir*2-1)*1 * (NUMWT-1));\r",
          "            float weight = lerp(Gauss[weightIndex], Gauss[(int)weightIndex + 1], frac(weightIndex));\r",
          "            c += txDiffuse.Sample(samLinear, p)*weight;\r",
          "            totalWeight += weight;\r",
          "        }        \r",
          "        pos += dir;\r",
          "    }\r",
          "\r",
          "    return float(Contrast) + c.rgba/totalWeight*Brightness;\r",
          "}\r",
          "//<<< PSRadialBlur\r",
          "\r",
          "//>>> __technique\r",
          "technique10 GodRays",
          "{",
          "    pass GodRays",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, psGodRays() ) );",
          "    }",
          "}",
          "technique10 RadialBlur\r",
          "{\r",
          "    pass RadialBlur\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, psRadialBlur() ) );\r",
          "    }\r",
          "}\r",
          "//<<< __technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "eb520762-c801-46fd-aa4d-c620e03e42a0",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "aaafb93d-6c92-4226-8d4f-0dc8b8cf87c0",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Strength",
      "MetaInstanceID": "262c6493-b812-4116-a364-4e11c070bdd1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rays",
      "MetaInstanceID": "f16f33ac-6ab5-42bf-ab6b-7fdd21637066",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.25"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NumberOfSamples",
      "MetaInstanceID": "1b15370b-29cb-42c1-a709-10f76eec8409",
      "DefaultValue": {
        "Type": "Float",
        "Value": "23"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "9b24901a-f871-45af-ac30-8153d060236c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.4"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PointLight",
      "MetaInstanceID": "6107ad3a-5617-410d-a279-565f915bcf2b",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "084ef255-20cb-4ce4-8cfb-da0303fe2d7c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "8b4fe945-e166-47ff-8aca-3c71947674c0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "6e817317-218b-451c-8099-114b0ef7e230",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "82758fba-2bd7-4765-8a0c-2a8c0c393dbd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShiftDepth",
      "MetaInstanceID": "e597f573-afcd-4bf2-ae5c-cd74ca1c699e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.0001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Brigthness",
      "MetaInstanceID": "dffeb917-f5aa-43ce-aa06-3e7069efc0bb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Contrast",
      "MetaInstanceID": "2c24eb8d-d522-46b3-9f78-697540961fe5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NumberOfBlurSamples",
      "MetaInstanceID": "fb3b80be-a36d-4d91-98c7-1ebb820076d2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset",
      "MetaInstanceID": "401a2e32-f471-4182-b338-b983bd3cd679",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlurSize",
      "MetaInstanceID": "d2080d02-2e3d-4e9a-bc85-f473f062c6f0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Enabled",
      "MetaInstanceID": "6ecef0f0-8f64-4a2f-8cf4-7d69dc7612a7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "d45db054-c7a6-48e9-ac93-96a99a1e2d1b",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "72c81e29-4f16-416e-a2ba-1d53665ba46a",
      "MetaID": "ccf5e5de-d7eb-457e-9501-9e06626d90eb",
      "Name": "GodRaysFromLightFunc",
      "Version": "4bc0ad27-6bd1-4470-9bdc-cfc99bf4718f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "using SharpDX.D3DCompiler;",
        "using SharpDX.Direct3D; ",
        "using Framefield.Core.Rendering;",
        "using System.Dynamic;",
        "using Framefield.Core;",
        "",
        "namespace Framefield.Core.IDccf5e5de_d7eb_457e_9501_9e06626d90eb",
        "{",
        "    public class Class_GodRaysFromLight : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Camera = 2,",
        "            Strength = 3,",
        "            Rays = 4,",
        "            NumberOfSamples = 5,",
        "            Size = 6,",
        "            PointLight = 7,",
        "            ColorR = 8,",
        "            ColorG = 9,",
        "            ColorB = 10,",
        "            ColorA = 11,",
        "            ShiftDepth = 12,",
        "            Brigthness = 13,",
        "            Contrast = 14,",
        "            NumberOfBlurSamples = 15,",
        "            Offset = 16,",
        "            BlurSize = 17,",
        "            Enabled = 18",
        "        }",
        "        //<<< _inputids",
        "",
        "        protected override bool NeedsDepth { get { return false; } }",
        "",
        "        protected override bool BuildRenderTarget(SharpDX.DXGI.Format imageBufferFormat)",
        "        {",
        "            var pass1ResourceChanged = ResourceManager.ValidateRenderTargetResource(ref _pass1RenderTargetResource, OperatorPart, D3DDevice.Device,",
        "                                                                                    (int)_usedViewport.Width, (int)_usedViewport.Height);",
        "            if (pass1ResourceChanged)",
        "            {",
        "                Utilities.DisposeObj(ref _pass1RenderTargetView);",
        "                _pass1RenderTargetView = new RenderTargetView(D3DDevice.Device, _pass1RenderTargetResource.Texture);",
        "            }",
        "",
        "            return base.BuildRenderTarget(imageBufferFormat) || pass1ResourceChanged;",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            ResourceManager.Dispose(_pass1RenderTargetResource);",
        "            Utilities.DisposeObj(ref _pass1RenderTargetView);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> __params",
        "                var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "                var imageInput = inputs[(int)InputId.Image].Eval(context);",
        "                var Camera = inputs[(int)InputId.Camera].Eval(context).Dynamic;",
        "                var Strength = inputs[(int)InputId.Strength].Eval(context).Value;",
        "                var Rays = inputs[(int)InputId.Rays].Eval(context).Value;",
        "                var NumberOfSamples = inputs[(int)InputId.NumberOfSamples].Eval(context).Value;",
        "                var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "                var PointLight = inputs[(int)InputId.PointLight].Eval(context).Dynamic;",
        "                var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "                var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "                var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "                var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "                var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "                var ShiftDepth = inputs[(int)InputId.ShiftDepth].Eval(context).Value;",
        "                var Brigthness = inputs[(int)InputId.Brigthness].Eval(context).Value;",
        "                var Contrast = inputs[(int)InputId.Contrast].Eval(context).Value;",
        "                var NumberOfBlurSamples = inputs[(int)InputId.NumberOfBlurSamples].Eval(context).Value;",
        "                var Offset = inputs[(int)InputId.Offset].Eval(context).Value;",
        "                var BlurSize = inputs[(int)InputId.BlurSize].Eval(context).Value;",
        "                //<<< __params",
        "",
        "                var image = imageInput.Image;",
        "                var depthImage = imageInput.DepthImage;",
        "                if (image == null || depthImage == null || Camera == null || PointLight == null)",
        "                {",
        "                    Logger.Error(this, \"conditions not fulfilled\");",
        "                    return;",
        "                }",
        "                Framefield.Core.OperatorPartTraits.ICameraProvider camProvider = Camera.This as Framefield.Core.OperatorPartTraits.ICameraProvider;",
        "                if (camProvider == null)",
        "                {",
        "                    Logger.Error(this, \"camera not defined\");",
        "                    return;",
        "                }",
        "                Framefield.Core.IPointLight pointLight = PointLight.This as Framefield.Core.IPointLight;",
        "                if (pointLight == null)",
        "                {",
        "                    Logger.Error(this, \"pointlight not defined\");",
        "                    return;",
        "                }",
        "    ",
        "                if (_renderer2 == null)",
        "                {",
        "                     _renderer2 = new BaseRenderer();",
        "                }",
        "",
        "                var D3DDevice = context.D3DDevice;",
        "",
        "                var worldToCamera = camProvider.CalculateWorldToCamera(context);",
        "                var cameraToView = camProvider.CalculateCameraToView(context);",
        "                var viewToCamera = Matrix.Invert(cameraToView);",
        "                var worldToView = worldToCamera*cameraToView;",
        "",
        "                var shaderDesc = new ShaderResourceViewDescription();",
        "                shaderDesc.Format = Format.R32_Float;",
        "                shaderDesc.Dimension = ShaderResourceViewDimension.Texture2D;",
        "                shaderDesc.Texture2D.MipLevels = 1;",
        "",
        "                var pointLigthPos4InWorld = new Vector4(pointLight.Position.X, pointLight.Position.Y, pointLight.Position.Z, 1);",
        "                var pointLightPos4InCamera = Vector4.Transform(pointLigthPos4InWorld, worldToCamera);",
        "                var pointLightPos3InCamera = new Vector3(pointLightPos4InCamera.X, pointLightPos4InCamera.Y, pointLightPos4InCamera.Z);",
        "                pointLightPos3InCamera /= pointLightPos4InCamera.W;",
        "",
        "                var pointLightPos4InView = Vector4.Transform(pointLigthPos4InWorld, worldToView);",
        "                var pointLightPos3InView = new Vector3(pointLightPos4InView.X, pointLightPos4InView.Y, pointLightPos4InView.Z);",
        "                pointLightPos3InView /= pointLightPos4InView.W;",
        "",
        "                //pass 1: original godrays",
        "                using (var depthTexture = new ShaderResourceView(context.D3DDevice, depthImage, shaderDesc))",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, image))",
        "                {",
        "                    D3DDevice.ImmediateContext.ClearRenderTargetView(_pass1RenderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                    var pass1SubContext = new OperatorPartContext(context);",
        "                    pass1SubContext.DepthStencilView = null;",
        "                    pass1SubContext.RenderTargetView = _pass1RenderTargetView;",
        "                    pass1SubContext.Effect = _effect;",
        "                    pass1SubContext.Renderer = _renderer;",
        "                    pass1SubContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    pass1SubContext.CameraProjection = Matrix.OrthoLH(1, 1, -100, 100);",
        "                    pass1SubContext.WorldToCamera = Matrix.Identity;",
        "                    pass1SubContext.ObjectTWorld = Matrix.Identity;",
        "                    pass1SubContext.TextureMatrix = Matrix.Identity;",
        "",
        "                    pass1SubContext.Renderer.SetupEffect(pass1SubContext);",
        "",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Strength\").AsScalar().Set(Strength);",
        "                    _effect.GetVariableByName(\"Rays\").AsScalar().Set(Rays);",
        "                    _effect.GetVariableByName(\"ShiftDepth\").AsScalar().Set(ShiftDepth);",
        "                    _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                    _effect.GetVariableByName(\"NumberOfSamples\").AsScalar().Set(NumberOfSamples);",
        "                    _effect.GetVariableByName(\"Color\").AsVector().Set(Color);",
        "                    _effect.GetVariableByName(\"CenterInCamera\").AsVector().Set(pointLightPos3InCamera);",
        "                    _effect.GetVariableByName(\"CenterInView\").AsVector().Set(pointLightPos3InView);",
        "                    _effect.GetVariableByName(\"viewToCamera\").AsMatrix().SetMatrix(viewToCamera);",
        "                    _effect.GetVariableByName(\"txDepth\").AsShaderResource().SetResource(depthTexture);",
        "",
        "                    pass1SubContext.Renderer.Render(pass1SubContext.Renderer._screenQuadMesh, pass1SubContext, 0);",
        "                }",
        "                ",
        "",
        "                //pass 2 directional blur",
        "                using (var textureView = new ShaderResourceView(D3DDevice, _pass1RenderTargetResource.Texture))",
        "                {",
        "                    D3DDevice.ImmediateContext.ClearRenderTargetView(_renderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                    var pass2SubContext = new OperatorPartContext(context);",
        "                    pass2SubContext.DepthStencilView = null;",
        "                    pass2SubContext.RenderTargetView = _renderTargetView;",
        "                    pass2SubContext.Effect = _effect;",
        "                    pass2SubContext.Renderer = _renderer2;",
        "                    pass2SubContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    pass2SubContext.CameraProjection = Matrix.OrthoLH(1, 1, -100, 100);",
        "                    pass2SubContext.WorldToCamera = Matrix.Identity;",
        "                    pass2SubContext.ObjectTWorld = Matrix.Identity;",
        "                    pass2SubContext.TextureMatrix = Matrix.Identity;",
        "                    pass2SubContext.Texture0 = textureView;",
        "                    pass2SubContext.Renderer.SetupEffect(pass2SubContext);",
        "",
        "                    _effect.GetVariableByName(\"Brightness\").AsScalar().Set(Brigthness);",
        "                    _effect.GetVariableByName(\"Contrast\").AsScalar().Set(Contrast);",
        "                    _effect.GetVariableByName(\"NumberOfBlurSamples\").AsScalar().Set(NumberOfBlurSamples);",
        "                    _effect.GetVariableByName(\"Offset\").AsScalar().Set(Offset);",
        "                    _effect.GetVariableByName(\"BlurSize\").AsScalar().Set(BlurSize);",
        "",
        "                    pass2SubContext.Renderer.Render(pass2SubContext.Renderer._screenQuadMesh, pass2SubContext, 1);",
        "                }",
        "",
        "            });",
        "        }",
        "",
        "        BaseRenderer _renderer2;",
        "        Resource _pass1RenderTargetResource = null;",
        "        RenderTargetView _pass1RenderTargetView = null;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d45db054-c7a6-48e9-ac93-96a99a1e2d1b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2fe814fc-ab7d-4864-8984-a1b020aa06ec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eb520762-c801-46fd-aa4d-c620e03e42a0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "aaafb93d-6c92-4226-8d4f-0dc8b8cf87c0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "262c6493-b812-4116-a364-4e11c070bdd1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f16f33ac-6ab5-42bf-ab6b-7fdd21637066",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1b15370b-29cb-42c1-a709-10f76eec8409",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9b24901a-f871-45af-ac30-8153d060236c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6107ad3a-5617-410d-a279-565f915bcf2b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "084ef255-20cb-4ce4-8cfb-da0303fe2d7c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8b4fe945-e166-47ff-8aca-3c71947674c0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6e817317-218b-451c-8099-114b0ef7e230",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "82758fba-2bd7-4765-8a0c-2a8c0c393dbd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e597f573-afcd-4bf2-ae5c-cd74ca1c699e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dffeb917-f5aa-43ce-aa06-3e7069efc0bb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c24eb8d-d522-46b3-9f78-697540961fe5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fb3b80be-a36d-4d91-98c7-1ebb820076d2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "401a2e32-f471-4182-b338-b983bd3cd679",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d2080d02-2e3d-4e9a-bc85-f473f062c6f0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6ecef0f0-8f64-4a2f-8cf4-7d69dc7612a7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "72c81e29-4f16-416e-a2ba-1d53665ba46a"
    }
  ]
}