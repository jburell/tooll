{
  "Name": "RibbonEmitter",
  "_id": "eac99345-2cc4-4c2c-be97-74e9ff5c1673",
  "Namespace": "projects.parnassum.shaders",
  "Description": "Variation of [ParticleReplicator] that simulates emitting ribbons on a trigger. The actual ribbon geometry is provided through an input rectangle along x-axis.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "110ba97c-ac4a-48d9-8e60-ba962c718735",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "//>>> _parameters\r",
          "float MaxCount;",
          "float EmitCount;",
          "float LifeTime;",
          "float ResetTrigger;",
          "float EmitFrom;",
          "float3 EmitterSize;",
          "float LimitPositions;",
          "float3 Scatter;",
          "float EmitVelocity;",
          "float2 EmitAngleA;",
          "float2 EmitAngleB;",
          "float2 Size;",
          "float3 Stretch;",
          "float StrechByMotion;",
          "float2 ShrinkOverTime;",
          "float Orientation;",
          "float VelocityFriction;",
          "float3 Gravity;",
          "float4 Turbulence;",
          "float2 TextureCells;",
          "float4 ColorStart;",
          "float4 ColorVariation;",
          "float4 ColorEnd;",
          "float2 FadeWithAge;",
          "float2 Focus;",
          "float2 FadeTooClose;",
          "float RandomSeed;",
          "float3 EmitCenter;",
          "Texture2D NoiseTexture;",
          "float ParametersAffect;",
          "float Length;",
          "float3 UpVector;",
          "float TurbulenceFadeIn;",
          "float3 EmitDirection;",
          "float TurbulenceSplit;",
          "//<<< _parameters\r",
          "\r",
          "float Time;\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "struct VertexData\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "struct InstanceData\r",
          "{\r",
          "    float emitTime : EMIT_TIME;\r",
          "    float emitSize : EMIT_SIZE;\r",
          "    float3 emitPosition : EMIT_POSITION;\r",
          "    float3 emitVelocity : EMIT_VELOCITY;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    VertexData vertexData;\r",
          "    InstanceData instanceData;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float3 rgb2hsv(float3 c)\r",
          "{\r",
          "    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r",
          "    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));\r",
          "    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));\r",
          " \r",
          "    float d = q.x - min(q.w, q.y);\r",
          "    float e = 1.0e-10;\r",
          "    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r",
          "}\r",
          " \r",
          "[numthreads(512, 1, 1)]\r",
          "float3 hsv2rgb(float3 c)\r",
          "{\r",
          "    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r",
          "    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);\r",
          "    return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r",
          "}\r",
          "\r",
          "\r",
          "float3 getOffsetTexture(float3 p) {\r",
          "\r",
          "    float3 offset =float3(0,0,0);\r",
          "\r",
          "    // Noise Offset\r",
          "    float3 noise1 = (NoiseTexture.SampleLevel(samLinear, (p.xz + Turbulence.y*10 * float3(0.14,0.53,0.41) ) / Turbulence.z , 0).xyz - float3(0.5, 0.5, 0.5));    \r",
          "    float3 noise2 = (NoiseTexture.SampleLevel(samLinear, (p.yz + Turbulence.y*6 * float3(0.41,0.31,0.01) ) / Turbulence.z , 0).xyz - float3(0.5, 0.5, 0.5));    \r",
          "    float3 noise3 = (NoiseTexture.SampleLevel(samLinear, (p.yx + Turbulence.y*9 * float3(0.74,0.15,0.55) ) / Turbulence.z , 0).xyz - float3(0.5, 0.5, 0.5));    \r",
          "    float3 noiseCombined = noise1+noise2+noise3;\r",
          "    return noiseCombined;\r",
          "}\r",
          "\r",
          "\r",
          "float3 getPosition(float age, InstanceData particle) \r",
          "{   \r",
          "    float3 pos = particle.emitPosition;\r",
          "\r",
          "    pos += particle.emitVelocity * age /(1 + VelocityFriction * age);\r",
          "    pos += Gravity * age*age /2;\r",
          "    \r",
          "    if(Turbulence.x > 0) {\r",
          "        float turbulenceOverLifetime = clamp( smoothstep(0,1, age/LifeTime / TurbulenceFadeIn ) , 0,1);\r",
          "        //float3 offset1= getOffsetTexture(pos + particle.emitTime * Turbulence.w) * Turbulence.x * turbulenceOverLifetime;       \r",
          "        // + particle.emitPosition\r",
          "        float3 noiseLookupPosition =   particle.emitPosition * TurbulenceSplit + particle.emitPosition * age * Turbulence.w ;\r",
          "        float3 offset1 = getOffsetTexture( noiseLookupPosition )  * Turbulence.x * turbulenceOverLifetime;\r",
          "        //float3 p = float3(1, 0, 2) ;\r",
          "        //float3 offset1 = getOffsetTeture( p);        \r",
          "        //float3 offset1 = float3(1,2,3);\r",
          "        pos += offset1;\r",
          "    }\r",
          "    \r",
          "    return pos;    \r",
          "}\r",
          "\r",
          "\r",
          "//>>>> VS2\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "    \r",
          "    float3 p = input.vertexData.pos;\r",
          "    float ageRibbon = (Time - input.instanceData.emitTime);\r",
          "    float ageVertex = ageRibbon - p.x * Length - 0.5;\r",
          "    p.x=0;\r",
          "    if(ageVertex < 0) {\r",
          "        output.vertexColor= float4(1,0,0,0);\r",
          "            return output;\r",
          "    }\r",
          "    \r",
          "    float3 p1 = getPosition(ageVertex, input.instanceData);\r",
          "    //float3 p1a = getPosition(ageVertex, input.instanceData);\r",
          "    //float3 p1b = getPosition(ageVertex + Smooth, input.instanceData);\r",
          "    //float3 p1c = getPosition(ageVertex + Smooth *2 , input.instanceData);\r",
          "    //float3 p1 = (p1a+p1b) / 2;\r",
          "    \r",
          "    //float3 p2 = getPosition(age + 0.1, input.instanceData);\r",
          "    \r",
          "   \r",
          "\r",
          "    // Rotate to velocity     \r",
          "    float3 p2 = getPosition(ageVertex+0.1, input.instanceData);\r",
          "    \r",
          "    float3 dir = normalize(p1-p2);    \r",
          "    float3 helperDir = UpVector;// float3(1, 0, 0);\r",
          "    helperDir = float4(0,0,-1,1);\r",
          "\r",
          "    helperDir = mul(worldToCameraMatrix, helperDir);\r",
          "    \r",
          "     //  float3 extendVec = cross(p1-p2, float3(0,1,0));\r",
          "\r",
          "    //if( abs(dir.y) < 0.0001)\r",
          "    //    helperDir = float3(1,0,0);\r",
          "    float3 yAxis = normalize(cross(dir, helperDir));\r",
          "    float3 xAxis = normalize(cross(yAxis, dir));\r",
          "        \r",
          "    Matrix rotateToMotion = ( 1,0,0,0,   0,1,0,0,  0,0,1,0,  0,0,0,1 );\r",
          "    rotateToMotion._m00= xAxis.x;\r",
          "    rotateToMotion._m01= xAxis.y;\r",
          "    rotateToMotion._m02= xAxis.z;\r",
          "    rotateToMotion._m03= 0;\r",
          "\r",
          "    rotateToMotion._m10= yAxis.x;\r",
          "    rotateToMotion._m11= yAxis.y;\r",
          "    rotateToMotion._m12= yAxis.z;\r",
          "    rotateToMotion._m13= 0;\r",
          "\r",
          "    rotateToMotion._m20= dir.x;\r",
          "    rotateToMotion._m21= dir.y;\r",
          "    rotateToMotion._m22= dir.z;\r",
          "    rotateToMotion._m23= 0;\r",
          "    \r",
          "    rotateToMotion._m30=0;\r",
          "    rotateToMotion._m31=0;\r",
          "    rotateToMotion._m32=0;\r",
          "    rotateToMotion._m33=1;\r",
          "\r",
          "    float randomVec3 = NoiseTexture.SampleLevel(samLinear, (p.xz + Turbulence.y*10 * float3(0.14,0.53,0.41) ) / 0.1 , 0).xyz - float3(0.5, 0.5, 0.5);\r",
          "\r",
          "\r",
          "    // Scale down\r",
          "    //float size = Size.x + Size.y * Noise(input.instanceData.emitTime * 100, 200);\r",
          "    float size = Size.x + Size.y * randomVec3.x * input.instanceData.emitTime * 100;\r",
          "    float ageRatio = ageVertex/LifeTime;\r",
          "    float shrinkBeginning = smoothstep(1,0, LifeTime / ageVertex * ShrinkOverTime.x );\r",
          "    float shrinkEnd = clamp( 1- (ageRatio -1 + ShrinkOverTime.y)/ShrinkOverTime.y,  0,1);\r",
          "    size *= shrinkBeginning * shrinkEnd;\r",
          "        \r",
          "    p*= size;\r",
          "    p*= Stretch;\r",
          "        \r",
          "    p = mul(p, rotateToMotion);\r",
          "    p+= p1;\r",
          "    \r",
          "    p = mul(p, objectToWorldMatrix);\r",
          "        \r",
          "    output.posInWorld = float4(p.xyz,1);\r",
          "    output.pos = mul(output.posInWorld, worldToCameraMatrix);\r",
          "    \r",
          "    output.normal = mul(input.vertexData.normal, (float3x3)objectToWorldMatrix);\r",
          "    \r",
          "    output.fogFragCoord = abs(output.pos.z / input.vertexData.pos.w);\r",
          "    \r",
          "    \r",
          "    \r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = mul(float4(input.vertexData.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "    \r",
          "    \r",
          "    float4 color = lerp( ColorStart, ColorEnd, ageRatio);\r",
          "    \r",
          "    // Color and opacity\r",
          "    \r",
          "    float3 noise3a = NoiseTexture.SampleLevel(samLinear, input.instanceData.emitTime * float2(0.15141, 1.1241) % float2(13,14),1);    \r",
          "    float3 hsvStart= rgb2hsv(ColorStart.rgb);\r",
          "    float3 hsvEnd= rgb2hsv(ColorEnd.rgb);\r",
          "    hsvStart.xyz += (noise3a.xyz - float3(0,0.5,0.5)) * ColorVariation.xyz * float3(2,5,5);\r",
          "    hsvEnd.xyz   += (noise3a.xyz - float3(0,0.5,0.5)) * ColorVariation.xyz * float3(2,5,5);\r",
          "                \r",
          "    float4 colorStart = float4(hsv2rgb(hsvStart), ColorStart.a - noise3a.x * ColorVariation.a*2);\r",
          "    float4 colorEnd =   float4(hsv2rgb(hsvEnd),   ColorEnd.a - noise3a.x * ColorVariation.a*2);\r",
          "    \r",
          "    float lifeProgress = LifeTime / ageVertex * FadeWithAge.x;\r",
          "    color =lerp(colorStart, colorEnd, lifeProgress);\r",
          "    \r",
          "    float fadeAtBeginning = smoothstep(1,0, LifeTime / ageVertex * FadeWithAge.x );\r",
          "    float fadeAtEnd = clamp( 1- (ageRatio -1 + FadeWithAge.y)/FadeWithAge.y,  0,1);\r",
          "    float distance = output.pos.z;\r",
          "    float fadeTooClose = smoothstep(0,1, (distance  - FadeTooClose.x) / (FadeTooClose.y+0.001));    \r",
          "\r",
          "    color.a *= fadeAtBeginning * fadeAtEnd * fadeTooClose;\r",
          "    \r",
          "    float flash = clamp(1- ageRibbon * 2.3  ,0,1);\r",
          "    color.rgb += pow(flash,4) * 80;\r",
          "    \r",
          "    output.vertexColor =  color;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation * baseColor;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    if( input.vertexColor.a  <= 0.0001) {\r",
          "        discard;\r",
          "    }\r",
          "        \r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords) * input.vertexColor;\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "   \r",
          "    return clamp(float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a), 0, 1);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Geometry",
      "MetaInstanceID": "e8286dd3-9d70-4515-89bc-42f258c9eda6",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MaxCount",
      "MetaInstanceID": "3b20ae2e-11a0-4202-a029-3f4bbd740a42",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCount",
      "MetaInstanceID": "1e9847df-91d5-4eb2-ab20-c12a3eb7f82f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LifeTime",
      "MetaInstanceID": "73d0a852-5aa0-419d-b09f-ecd5e151c470",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResetTrigger",
      "MetaInstanceID": "8581ecbe-dddb-410b-bf8b-2d75cc569984",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitFrom",
      "MetaInstanceID": "bfeeb155-d4b4-44c9-bb85-bebfaabe2372",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Plane",
          "Value": "0"
        },
        {
          "Name": "Sphere",
          "Value": "1"
        },
        {
          "Name": "Ring",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "EmitterSize.Width",
      "MetaInstanceID": "3f9c477c-e400-4680-a8ce-1968757f0cf8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitterSize.Height",
      "MetaInstanceID": "1ea3bf59-4eaf-4157-8c71-3b8fc0a41df8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitterSize.Depth",
      "MetaInstanceID": "c86a0fa3-5f68-4a28-ac3a-8e5bc0d3b722",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LimitPositions",
      "MetaInstanceID": "0e93873f-87aa-4a37-bb8c-f802b120c69b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.X",
      "MetaInstanceID": "2800d2f2-c7c0-424f-b3b6-a4fb38879177",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Y",
      "MetaInstanceID": "37793bf5-7f0a-41dc-87c0-27a50bcee3b5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Z",
      "MetaInstanceID": "0cf2ecdd-ae3a-4ff1-b356-e7143674c8cf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitVelocity",
      "MetaInstanceID": "813b50f3-7b46-4e5b-aba9-5335218ecb7b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleA.Value",
      "MetaInstanceID": "c59826ae-4c67-4afc-9251-6109875a4416",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleA.Scatter",
      "MetaInstanceID": "2f1518cb-559c-4295-8c3e-19c94994c716",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleB.Value",
      "MetaInstanceID": "ddbeb1ea-469f-4427-a9a8-b59561e778e0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleB.Scatter",
      "MetaInstanceID": "9566c8b4-fe34-4348-802a-dc5187d08438",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Value",
      "MetaInstanceID": "b2513d28-6767-424c-8b13-c6063b112a42",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Random",
      "MetaInstanceID": "de4e32ca-636e-484a-955e-634c55377245",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.X",
      "MetaInstanceID": "2a1b8986-c6d9-44c8-8b53-0faa71815bb1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Y",
      "MetaInstanceID": "bb9a2d4f-4757-4df6-b081-cfb0dda5eabf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StrechByMotion",
      "MetaInstanceID": "e9fe1e97-df7c-4b9f-98dc-d58dc572b515",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShrinkOverTime.AtBeginning",
      "MetaInstanceID": "2a4aac3e-83ca-4dda-9eb9-474975783d1b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShrinkOverTime.AtEnd",
      "MetaInstanceID": "29018631-ab0a-4635-b42e-548eb21032c9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "f1b13200-161a-422d-908d-7dd3507aa701",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Billboard",
          "Value": "0"
        },
        {
          "Name": "Movement",
          "Value": "1"
        },
        {
          "Name": "Random",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "VelocityFriction",
      "MetaInstanceID": "63a3de76-d8d0-48ba-ad94-c58b42b2b68b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Gravity.X",
      "MetaInstanceID": "e71e8131-5316-40da-8f40-ac8331fcefed",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Gravity.Y",
      "MetaInstanceID": "f1a76f9b-103d-4bef-84b4-f3c3bad1be51",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Gravity.Z",
      "MetaInstanceID": "5407ca0e-d388-4ef4-90ef-98a232be962d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Turbulence.Amount",
      "MetaInstanceID": "bce9ca80-61a5-4964-a30b-e3a84b62dcca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Turbulence.Time",
      "MetaInstanceID": "cc953653-bb62-4060-ac1c-5ddc3dfd9ae7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Turbulence.VariationScale",
      "MetaInstanceID": "28cbe3ab-0ea3-4c8f-bda9-b8edeb557f3d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.X",
      "MetaInstanceID": "8bd6ad56-53ab-430c-94e5-954ef3c873d6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.Y",
      "MetaInstanceID": "45b3dd5c-734c-4763-bbb2-f13da80ad07a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.R",
      "MetaInstanceID": "a8a258f8-4e6e-4eee-9b8b-eeb1a3c0e8e8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.G",
      "MetaInstanceID": "55cef8f7-af6c-4930-be6c-475108b19f3f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.B",
      "MetaInstanceID": "35e18953-c18d-4ff2-94a3-cfccc268e3dc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.A",
      "MetaInstanceID": "aa5fcb1a-b2ef-4405-9df3-50f684099df2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Hue",
      "MetaInstanceID": "5ca12bde-e963-4ec2-bfb9-c6093f176fed",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Satuation",
      "MetaInstanceID": "5f7e8e30-b0a8-45c0-9abe-664ec2b00459",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Brightness",
      "MetaInstanceID": "ef20c309-063c-4d06-918e-71edd10dd867",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Alpha",
      "MetaInstanceID": "ba3f4bb8-c385-472c-b36a-143d73729cde",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.R",
      "MetaInstanceID": "addaae3f-e6eb-462b-be18-ecf6df8850ba",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.G",
      "MetaInstanceID": "d6457b0e-8256-449a-955c-e38aedaa7c1f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.B",
      "MetaInstanceID": "1159e3d1-448c-412d-9753-e8e551ffccf1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.A",
      "MetaInstanceID": "9c5acb2f-f5de-427c-9320-241d6c6b1e76",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeWithAge.AtBeginning",
      "MetaInstanceID": "61cc0703-adf1-4df8-928a-007741f805ee",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeWithAge.AtEnd",
      "MetaInstanceID": "6dcfbb13-a6fa-465d-94d6-a569ae5df967",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Focus.Center",
      "MetaInstanceID": "891b172e-cde5-4559-9eb5-1213f11d6c3e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Focus.Range",
      "MetaInstanceID": "5a25c934-a370-420f-8ec4-80a0134ed504",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeTooClose.Distance",
      "MetaInstanceID": "d2d9a55a-7605-4bcb-88ad-76300704843f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeTooClose.Smooth",
      "MetaInstanceID": "edd08df8-7abe-4701-b8e1-dce1eea55b49",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RandomSeed",
      "MetaInstanceID": "80e8beff-68cb-437a-8071-c0750a138c84",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCenter.X",
      "MetaInstanceID": "96fdf6cb-b471-44d8-8d7b-7157284b7ad4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCenter.Y",
      "MetaInstanceID": "34038c54-340a-4c99-b2ac-a9e0a38d666d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCenter.Z",
      "MetaInstanceID": "82f3934c-780b-4d1f-9a35-8eb59f3084f5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Z",
      "MetaInstanceID": "bb3471d8-7858-4262-9166-f5fc3805ead7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTexture",
      "MetaInstanceID": "74b2102e-82c6-4f63-8e1a-9c32466cf8f0",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ParametersAffect",
      "MetaInstanceID": "e2c67c9f-6a4c-4ba6-8068-c6268f4c24ff",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "AllParticles",
          "Value": "0"
        },
        {
          "Name": "OnlyNewParticle",
          "Value": "1"
        }
      ]
    },
    {
      "Name": "Turbulence.Variation",
      "MetaInstanceID": "cfe0c04a-9c5a-4fc5-b1a3-ccea0d8f7be7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Length",
      "MetaInstanceID": "4b41e315-f5d5-4356-b60b-05311479a52c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.X",
      "MetaInstanceID": "cc53286f-7e78-4fb7-a41c-9d95ad433b74",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Y",
      "MetaInstanceID": "f950ba1b-40fe-47f8-a1f3-5f2ed895924e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Z",
      "MetaInstanceID": "e7a981b5-50ee-4a20-8cfe-53a02d3083fb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TurbulenceFadeIn",
      "MetaInstanceID": "7d95997a-1aa8-4099-8c1f-d1f5b420a12f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitDirection.X",
      "MetaInstanceID": "131752e9-e4be-4143-8e7b-08b63524ff29",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitDirection.Y",
      "MetaInstanceID": "7b9938bd-12a5-4d86-8bca-dc0dfae7da24",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitDirection.Z",
      "MetaInstanceID": "13ebbdc0-83ce-44b1-b515-d24c62b680c9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TurbulenceSplit",
      "MetaInstanceID": "47d89185-89e6-459e-bb04-f7cf5e79255a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "37d9f9e6-968d-4b4b-a988-773f012a1222",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "af685250-25d7-4b29-9cc7-2277b29c647a",
      "MetaID": "30dfb013-0077-4eac-8244-09ad98ee2f34",
      "Name": "RibbonEmitterFunc",
      "Version": "6f5564bf-864d-40c6-9f38-59514fb7cfce",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID30dfb013_0077_4eac_8244_09ad98ee2f34",
        "{",
        "    public class Class_RibbonEmitter : FXSourceCodeFunction",
        "    {",
        "",
        "        #region Setup and Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc { get; set; }",
        "        }",
        "",
        "        public Class_RibbonEmitter()",
        "        {",
        "            _renderer = new Renderer() { ParentFunc = this };",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        private void CompileCodePartsOnFirstEvaluation()",
        "        {",
        "            if (!_firstEval)",
        "                return;",
        "",
        "            for (var i = 0; i < NumCodes(); ++i)",
        "            {",
        "                Compile(i);",
        "            }",
        "            _firstEval = false;",
        "            Changed = true;",
        "        }",
        "        #endregion",
        "",
        "        #region Parameters and inputs",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Geometry = 1,",
        "            MaxCount = 2,",
        "            EmitCount = 3,",
        "            LifeTime = 4,",
        "            ResetTrigger = 5,",
        "            EmitFrom = 6,",
        "            EmitterSizeWidth = 7,",
        "            EmitterSizeHeight = 8,",
        "            EmitterSizeDepth = 9,",
        "            LimitPositions = 10,",
        "            ScatterX = 11,",
        "            ScatterY = 12,",
        "            ScatterZ = 13,",
        "            EmitVelocity = 14,",
        "            EmitAngleAValue = 15,",
        "            EmitAngleAScatter = 16,",
        "            EmitAngleBValue = 17,",
        "            EmitAngleBScatter = 18,",
        "            SizeValue = 19,",
        "            SizeRandom = 20,",
        "            StretchX = 21,",
        "            StretchY = 22,",
        "            StrechByMotion = 23,",
        "            ShrinkOverTimeAtBeginning = 24,",
        "            ShrinkOverTimeAtEnd = 25,",
        "            Orientation = 26,",
        "            VelocityFriction = 27,",
        "            GravityX = 28,",
        "            GravityY = 29,",
        "            GravityZ = 30,",
        "            TurbulenceAmount = 31,",
        "            TurbulenceTime = 32,",
        "            TurbulenceVariationScale = 33,",
        "            TextureCellsX = 34,",
        "            TextureCellsY = 35,",
        "            ColorStartR = 36,",
        "            ColorStartG = 37,",
        "            ColorStartB = 38,",
        "            ColorStartA = 39,",
        "            ColorVariationHue = 40,",
        "            ColorVariationSatuation = 41,",
        "            ColorVariationBrightness = 42,",
        "            ColorVariationAlpha = 43,",
        "            ColorEndR = 44,",
        "            ColorEndG = 45,",
        "            ColorEndB = 46,",
        "            ColorEndA = 47,",
        "            FadeWithAgeAtBeginning = 48,",
        "            FadeWithAgeAtEnd = 49,",
        "            FocusCenter = 50,",
        "            FocusRange = 51,",
        "            FadeTooCloseDistance = 52,",
        "            FadeTooCloseSmooth = 53,",
        "            RandomSeed = 54,",
        "            EmitCenterX = 55,",
        "            EmitCenterY = 56,",
        "            EmitCenterZ = 57,",
        "            StretchZ = 58,",
        "            NoiseTexture = 59,",
        "            ParametersAffect = 60,",
        "            TurbulenceVariation = 61,",
        "            Length = 62,",
        "            UpVectorX = 63,",
        "            UpVectorY = 64,",
        "            UpVectorZ = 65,",
        "            TurbulenceFadeIn = 66,",
        "            EmitDirectionX = 67,",
        "            EmitDirectionY = 68,",
        "            EmitDirectionZ = 69,",
        "            TurbulenceSplit = 70",
        "        }",
        "        //<<< _inputids",
        "",
        "        enum EmitterShapeType",
        "        {",
        "            Plane = 0,",
        "            Sphere,",
        "            Ring",
        "        }",
        "",
        "        private OperatorPart _geometry;",
        "        private EmitterShapeType _emitterShape;",
        "        private float _emitCount;",
        "        private int _maxCount;",
        "        private float _lifeTime;",
        "        private bool _resetTrigger;",
        "        private Vector3 _emitterSize;",
        "        private float _limitPositions;",
        "        private Vector3 _scatter;",
        "        private float _emitVelocity;",
        "        private Vector2 _emitAngleA;",
        "        private Vector2 _emitAngleB;",
        "        private Vector2 _size;",
        "        private Vector3 _stretch;",
        "        private float _strechByMotion;",
        "        private Vector2 _shrinkOverTime;",
        "        private int _orientation;",
        "        private float  _velocityFriction;",
        "        private Vector3 _gravity;",
        "        private Vector4 _turbulence;",
        "        private Vector2 _textureCells;",
        "        private Color4 _colorStart;",
        "        private Vector4 _colorVariation;",
        "        private Color4 _colorEnd;",
        "        private Vector2 _fadeWithAge;",
        "        private Vector2 _focus;",
        "        private Vector2 _fadeTooClose;",
        "        private int _randomSeed;",
        "        private int _parameterMode;",
        "        private float _length;",
        "        private Vector3 _upVector;",
        "        private float _turbulenceFadeIn;",
        "        private Vector3 _emitDirection;",
        "        private float _turbulenceSplit;",
        "",
        "        private Vector3 _emitCenter;",
        "        ",
        "        private Vector3 _previousEmitCenter;",
        "",
        "        bool UpdateParametersFromInputs(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Geometry = inputs[(int)InputId.Geometry];",
        "            var MaxCount = inputs[(int)InputId.MaxCount].Eval(context).Value;",
        "            var EmitCount = inputs[(int)InputId.EmitCount].Eval(context).Value;",
        "            var LifeTime = inputs[(int)InputId.LifeTime].Eval(context).Value;",
        "            var ResetTrigger = inputs[(int)InputId.ResetTrigger].Eval(context).Value;",
        "            var EmitFrom = (int) inputs[(int)InputId.EmitFrom].Eval(context).Value;",
        "            var EmitterSizeWidth = inputs[(int)InputId.EmitterSizeWidth].Eval(context).Value;",
        "            var EmitterSizeHeight = inputs[(int)InputId.EmitterSizeHeight].Eval(context).Value;",
        "            var EmitterSizeDepth = inputs[(int)InputId.EmitterSizeDepth].Eval(context).Value;",
        "            var EmitterSize = new Vector3(EmitterSizeWidth, EmitterSizeHeight, EmitterSizeDepth);",
        "            var LimitPositions = inputs[(int)InputId.LimitPositions].Eval(context).Value;",
        "            var ScatterX = inputs[(int)InputId.ScatterX].Eval(context).Value;",
        "            var ScatterY = inputs[(int)InputId.ScatterY].Eval(context).Value;",
        "            var ScatterZ = inputs[(int)InputId.ScatterZ].Eval(context).Value;",
        "            var Scatter = new Vector3(ScatterX, ScatterY, ScatterZ);",
        "            var EmitVelocity = inputs[(int)InputId.EmitVelocity].Eval(context).Value;",
        "            var EmitAngleAValue = inputs[(int)InputId.EmitAngleAValue].Eval(context).Value;",
        "            var EmitAngleAScatter = inputs[(int)InputId.EmitAngleAScatter].Eval(context).Value;",
        "            var EmitAngleA = new Vector2(EmitAngleAValue, EmitAngleAScatter);",
        "            var EmitAngleBValue = inputs[(int)InputId.EmitAngleBValue].Eval(context).Value;",
        "            var EmitAngleBScatter = inputs[(int)InputId.EmitAngleBScatter].Eval(context).Value;",
        "            var EmitAngleB = new Vector2(EmitAngleBValue, EmitAngleBScatter);",
        "            var SizeValue = inputs[(int)InputId.SizeValue].Eval(context).Value;",
        "            var SizeRandom = inputs[(int)InputId.SizeRandom].Eval(context).Value;",
        "            var Size = new Vector2(SizeValue, SizeRandom);",
        "            var StretchX = inputs[(int)InputId.StretchX].Eval(context).Value;",
        "            var StretchY = inputs[(int)InputId.StretchY].Eval(context).Value;",
        "            var StretchZ = inputs[(int)InputId.StretchZ].Eval(context).Value;",
        "            var Stretch = new Vector3(StretchX, StretchY, StretchZ);",
        "            var StrechByMotion = inputs[(int)InputId.StrechByMotion].Eval(context).Value;",
        "            var ShrinkOverTimeAtBeginning = inputs[(int)InputId.ShrinkOverTimeAtBeginning].Eval(context).Value;",
        "            var ShrinkOverTimeAtEnd = inputs[(int)InputId.ShrinkOverTimeAtEnd].Eval(context).Value;",
        "            var ShrinkOverTime = new Vector2(ShrinkOverTimeAtBeginning, ShrinkOverTimeAtEnd);",
        "            var Orientation = (int) inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            var VelocityFriction = inputs[(int)InputId.VelocityFriction].Eval(context).Value;",
        "            var GravityX = inputs[(int)InputId.GravityX].Eval(context).Value;",
        "            var GravityY = inputs[(int)InputId.GravityY].Eval(context).Value;",
        "            var GravityZ = inputs[(int)InputId.GravityZ].Eval(context).Value;",
        "            var Gravity = new Vector3(GravityX, GravityY, GravityZ);",
        "            var TurbulenceAmount = inputs[(int)InputId.TurbulenceAmount].Eval(context).Value;",
        "            var TurbulenceTime = inputs[(int)InputId.TurbulenceTime].Eval(context).Value;",
        "            var TurbulenceVariationScale = inputs[(int)InputId.TurbulenceVariationScale].Eval(context).Value;",
        "            var TurbulenceVariation = inputs[(int)InputId.TurbulenceVariation].Eval(context).Value;",
        "            var Turbulence = new Vector4(TurbulenceAmount, TurbulenceTime, TurbulenceVariationScale, TurbulenceVariation);",
        "            var TextureCellsX = inputs[(int)InputId.TextureCellsX].Eval(context).Value;",
        "            var TextureCellsY = inputs[(int)InputId.TextureCellsY].Eval(context).Value;",
        "            var TextureCells = new Vector2(TextureCellsX, TextureCellsY);",
        "            var ColorStartR = inputs[(int)InputId.ColorStartR].Eval(context).Value;",
        "            var ColorStartG = inputs[(int)InputId.ColorStartG].Eval(context).Value;",
        "            var ColorStartB = inputs[(int)InputId.ColorStartB].Eval(context).Value;",
        "            var ColorStartA = inputs[(int)InputId.ColorStartA].Eval(context).Value;",
        "            var ColorStart = new Color4(ColorStartR, ColorStartG, ColorStartB, ColorStartA);",
        "            var ColorVariationHue = inputs[(int)InputId.ColorVariationHue].Eval(context).Value;",
        "            var ColorVariationSatuation = inputs[(int)InputId.ColorVariationSatuation].Eval(context).Value;",
        "            var ColorVariationBrightness = inputs[(int)InputId.ColorVariationBrightness].Eval(context).Value;",
        "            var ColorVariationAlpha = inputs[(int)InputId.ColorVariationAlpha].Eval(context).Value;",
        "            var ColorVariation = new Vector4(ColorVariationHue, ColorVariationSatuation, ColorVariationBrightness, ColorVariationAlpha);",
        "            var ColorEndR = inputs[(int)InputId.ColorEndR].Eval(context).Value;",
        "            var ColorEndG = inputs[(int)InputId.ColorEndG].Eval(context).Value;",
        "            var ColorEndB = inputs[(int)InputId.ColorEndB].Eval(context).Value;",
        "            var ColorEndA = inputs[(int)InputId.ColorEndA].Eval(context).Value;",
        "            var ColorEnd = new Color4(ColorEndR, ColorEndG, ColorEndB, ColorEndA);",
        "            var FadeWithAgeAtBeginning = inputs[(int)InputId.FadeWithAgeAtBeginning].Eval(context).Value;",
        "            var FadeWithAgeAtEnd = inputs[(int)InputId.FadeWithAgeAtEnd].Eval(context).Value;",
        "            var FadeWithAge = new Vector2(FadeWithAgeAtBeginning, FadeWithAgeAtEnd);",
        "            var FocusCenter = inputs[(int)InputId.FocusCenter].Eval(context).Value;",
        "            var FocusRange = inputs[(int)InputId.FocusRange].Eval(context).Value;",
        "            var Focus = new Vector2(FocusCenter, FocusRange);",
        "            var FadeTooCloseDistance = inputs[(int)InputId.FadeTooCloseDistance].Eval(context).Value;",
        "            var FadeTooCloseSmooth = inputs[(int)InputId.FadeTooCloseSmooth].Eval(context).Value;",
        "            var FadeTooClose = new Vector2(FadeTooCloseDistance, FadeTooCloseSmooth);",
        "            var RandomSeed = inputs[(int)InputId.RandomSeed].Eval(context).Value;",
        "            var EmitCenterX = inputs[(int)InputId.EmitCenterX].Eval(context).Value;",
        "            var EmitCenterY = inputs[(int)InputId.EmitCenterY].Eval(context).Value;",
        "            var EmitCenterZ = inputs[(int)InputId.EmitCenterZ].Eval(context).Value;",
        "            var EmitCenter = new Vector3(EmitCenterX, EmitCenterY, EmitCenterZ);",
        "            var NoiseTexture = inputs[(int)InputId.NoiseTexture].Eval(context).Image; // Needs to be checked for null!",
        "            var ParametersAffect = (int) inputs[(int)InputId.ParametersAffect].Eval(context).Value;",
        "            var Length = inputs[(int)InputId.Length].Eval(context).Value;",
        "            var UpVectorX = inputs[(int)InputId.UpVectorX].Eval(context).Value;",
        "            var UpVectorY = inputs[(int)InputId.UpVectorY].Eval(context).Value;",
        "            var UpVectorZ = inputs[(int)InputId.UpVectorZ].Eval(context).Value;",
        "            var UpVector = new Vector3(UpVectorX, UpVectorY, UpVectorZ);",
        "            var TurbulenceFadeIn = inputs[(int)InputId.TurbulenceFadeIn].Eval(context).Value;",
        "            var EmitDirectionX = inputs[(int)InputId.EmitDirectionX].Eval(context).Value;",
        "            var EmitDirectionY = inputs[(int)InputId.EmitDirectionY].Eval(context).Value;",
        "            var EmitDirectionZ = inputs[(int)InputId.EmitDirectionZ].Eval(context).Value;",
        "            var EmitDirection = new Vector3(EmitDirectionX, EmitDirectionY, EmitDirectionZ);",
        "            var TurbulenceSplit = inputs[(int)InputId.TurbulenceSplit].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            _geometry = Geometry;",
        "",
        "            var parameterChanged = false;",
        "",
        "            if (_maxCount != (int)MaxCount)",
        "            {",
        "                _maxCount = (int)MaxCount;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_resetTrigger != ResetTrigger > 0.5f)",
        "            {",
        "                _resetTrigger = ResetTrigger > 0.5f;",
        "                parameterChanged = true;",
        "            }",
        "",
        "",
        "            if (_lifeTime != LifeTime)",
        "            {",
        "                _lifeTime = LifeTime;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_emitterShape != (EmitterShapeType) EmitFrom)",
        "            {",
        "                _emitterShape = (EmitterShapeType) EmitFrom;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_emitCount != EmitCount)",
        "            {",
        "                _emitCount = EmitCount;",
        "                parameterChanged = true;",
        "            }",
        "            if (_emitterSize != EmitterSize)",
        "            {",
        "                _emitterSize = EmitterSize;",
        "                parameterChanged = true;",
        "            }",
        "            if (_limitPositions != LimitPositions)",
        "            {",
        "                _limitPositions = LimitPositions;",
        "                parameterChanged = true;",
        "            }",
        "            if (_scatter != Scatter)",
        "            {",
        "                _scatter = Scatter;",
        "                parameterChanged = true;",
        "            }",
        "            if (_emitVelocity != EmitVelocity)",
        "            {",
        "                _emitVelocity = EmitVelocity;",
        "                parameterChanged = true;",
        "            }",
        "            if (_emitAngleA != EmitAngleA)",
        "            {",
        "                _emitAngleA = EmitAngleA;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_emitAngleB != EmitAngleB)",
        "            {",
        "                _emitAngleB = EmitAngleB;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_randomSeed != (int)RandomSeed)",
        "            {",
        "                _randomSeed = (int)RandomSeed;",
        "                parameterChanged = true;",
        "            }",
        "            ",
        "            if (_emitCenter != EmitCenter)",
        "            {",
        "                _emitCenter = EmitCenter;",
        "                parameterChanged = true;",
        "            }",
        "            ",
        "            if (_emitDirection != EmitDirection)",
        "            {",
        "                _emitDirection = EmitDirection;",
        "                parameterChanged = true;",
        "            }",
        "            ",
        "            _size = Size;",
        "            _stretch = Stretch;",
        "            _strechByMotion = StrechByMotion;",
        "            _shrinkOverTime = ShrinkOverTime;",
        "            _orientation = Orientation;",
        "            _velocityFriction = VelocityFriction;",
        "            _gravity = Gravity;",
        "            _turbulence = Turbulence;",
        "            _textureCells = TextureCells;",
        "            _colorStart = ColorStart;",
        "            _colorVariation = ColorVariation;",
        "            _colorEnd = ColorEnd;",
        "            _fadeWithAge = FadeWithAge;",
        "            _focus = Focus;",
        "            _fadeTooClose = FadeTooClose;",
        "            _turbulenceFadeIn = TurbulenceFadeIn;",
        "            _upVector = UpVector;",
        "            _length = Length;",
        "            _previousEmitCenter = _emitCenter;",
        "            _turbulenceSplit = TurbulenceSplit;",
        "",
        "            ",
        "            if(_parameterMode != (int)ParametersAffect) {",
        "                _parameterMode = (int)ParametersAffect;",
        "                parameterChanged= true;",
        "            }",
        "            ",
        "            return parameterChanged;",
        "        }",
        "        #endregion",
        "",
        "        Vector3 GetScatterVector(Random rand)",
        "        {",
        "            return new Vector3((float)rand.NextDouble() - 0.5f,",
        "                                (float)rand.NextDouble() - 0.5f,",
        "                                (float)rand.NextDouble() - 0.5f);",
        "        }",
        "        ",
        "        private void ResetParticles () {",
        "            for(var i=0; i< _particles.Count(); ++i  ) {",
        "                _particles[i]= new Particle();",
        "            }",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            CompileCodePartsOnFirstEvaluation();            ",
        "            ",
        "            ",
        "            var parameterChanged = UpdateParametersFromInputs(context, inputs);",
        "            if(!parameterChanged) {",
        "            //Logger.Info(\"keep\");",
        "            }",
        "            ",
        "            if( _resetTrigger || context.Time < _lastEvalTime)",
        "                ResetParticles();",
        "",
        "            if (_geometry.Connections.Count == 0)",
        "                return context;",
        "",
        "            var numInstances = _maxCount;",
        "",
        "            var instancedMesh = GetMeshFromSceneInput(_geometry);",
        "            if (instancedMesh == null)",
        "                return context;",
        "",
        "            var rand = new Random(_randomSeed);",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "",
        "",
        "            // Initialize particle list",
        "            if (numInstances != _particles.Count())",
        "            {",
        "                _particles = new Particle[_maxCount];",
        "                _emitIndex = 0;",
        "                ",
        "            }",
        "            if(context.Time != _lastEvalTime) {",
        "                _lastEvalTime = context.Time;",
        "                ",
        "                //if( _parameterMode == 0 &&  (parameterChanged || _lastEmitTime > context.Time)) {",
        "                //    _lastEmitTime = context.Time - _maxCount / _emitCount;            ",
        "                //}",
        "    ",
        "                // Emit new Particles",
        "                //var emitPeriod = 1.0 / _emitCount;",
        "                //var lastParticleEmitTime = _lastEmitTime - (_lastEmitTime % emitPeriod);",
        "                //var emitTime = lastParticleEmitTime + emitPeriod;",
        "                //emitTime = context.Time;",
        "                ",
        "                ",
        "                ",
        "                //var emitCenterDelta = ( _emitCenter - _previousEmitCenter);",
        "                //if( emitTime < context.Time) {",
        "                //}",
        "                ",
        "                //var numberOfParticlesToEmit =  (int)_emitCount;",
        "                //var numberOfPartriclesEmitted = 0;",
        "                //if(numberOfParticlesToEmit <1) numberOfParticlesToEmit = 1;",
        "    ",
        "                //while (emitTime < context.Time)",
        "                //{",
        "                for(var emitIndex = 0; emitIndex < _emitCount ; ++emitIndex) {",
        "                    //Logger.Info(this, \"Emit index {0}\", _emitIndex);",
        "                    _lastEmitTime = context.Time;",
        "                    float emitBatchProgress =  (float)emitIndex / (float)_emitCount ;",
        "                    //numberOfPartriclesEmitted++;",
        "                    ",
        "                    Vector3 particleEmitCenter = _previousEmitCenter;",
        "                    Vector3 pos = particleEmitCenter; ",
        "                    ",
        "                    Vector3 emitDirection = Vector3.UnitY;",
        "                    Vector3 axisA = Vector3.UnitX;",
        "                    Vector3 axisB = Vector3.UnitZ;",
        "    ",
        "                    // Initialize Random",
        "                    int overallIndex = (int)(context.Time * 100  * _emitCount);",
        "                    rand = new Random((int)((overallIndex *1.245) % 721.2));",
        "                    rand = new Random((int)(rand.NextDouble() * 1000)+ overallIndex);",
        "                    ",
        "                    // Fetch some values to avoid patterns",
        "                    for(var randIndex=0;randIndex < overallIndex % 3;++randIndex) {",
        "                        rand.NextDouble();",
        "                    }",
        "                    ",
        "    ",
        "                    int indexForLimitedPositions = (int)(overallIndex % _limitPositions);",
        "    ",
        "                    switch (_emitterShape)",
        "                    {    ",
        "                        // Plane",
        "                        case EmitterShapeType.Plane:",
        "                            axisA = Vector3.UnitX;",
        "                            axisB = Vector3.UnitY;",
        "                            if (_limitPositions < 0.5f)",
        "                            {",
        "                                pos = new Vector3((float)(rand.NextDouble() - 0.5),",
        "                                                  (float)(rand.NextDouble() - 0.5),",
        "                                                  (float)(rand.NextDouble() - 0.5)) * _emitterSize + particleEmitCenter;",
        "                            }",
        "                            else",
        "                            {",
        "                                float ratio = _emitterSize.X / _emitterSize.Z;",
        "                                float columns = (int)(_limitPositions * ratio) + 1;",
        "                                float row = indexForLimitedPositions % columns;",
        "                                float col = indexForLimitedPositions - columns * row;",
        "                                pos = new Vector3(_emitterSize.X / columns * col, 0, _emitterSize.Z / columns * row);",
        "                            }",
        "                            ",
        "                            pos+= _scatter * GetScatterVector(new Random( indexForLimitedPositions ) );",
        "                            break;",
        "                        ",
        "                        // Sphere",
        "                        case EmitterShapeType.Sphere:",
        "                        {",
        "                            if (_limitPositions < 0.5f)",
        "                            {",
        "                                pos = new Vector3((float)(rand.NextDouble() - 0.5),",
        "                                                  (float)(rand.NextDouble() - 0.5),",
        "                                                  (float)(rand.NextDouble() - 0.5)) * _emitterSize;",
        "                                                  ",
        "                                var angX = (float)(rand.NextDouble() * Math.PI*2);    ",
        "                                var angY = (float)(rand.NextDouble() * Math.PI*2);",
        "                                var rot = Matrix.RotationAxis( Vector3.UnitX, angX)",
        "                                    * Matrix.RotationAxis( Vector3.UnitY, angY);",
        "                                    ",
        "                                pos= Vector3.Transform(Vector3.UnitZ , rot).ToVector3() * _emitterSize;",
        "                                axisA = Vector3.Transform(Vector3.UnitX, rot).ToVector3();",
        "                                axisB = Vector3.Transform(Vector3.UnitY, rot).ToVector3();",
        "                               ",
        "                                emitDirection = pos;",
        "                                emitDirection.Normalize();",
        "                                pos += particleEmitCenter;",
        "                                ",
        "                                ",
        "                            }",
        "                            else",
        "                            {",
        "                                var inc = Math.PI*(3 - Math.Sqrt(5));",
        "                                var off = 2.0f/(_limitPositions + 1.0f);",
        "                                var y = indexForLimitedPositions*off - 1.0f + (off/2.0f);",
        "                                var r = Math.Sqrt(1 - y*y);",
        "                                var Radius = 1;",
        "                                var phi = indexForLimitedPositions*inc;",
        "                                pos += new Vector3((float) (Math.Cos(phi)*r*Radius),",
        "                                                (float) (y*Radius),",
        "                                                (float) (Math.Sin(phi)*r*Radius)) * _emitterSize;",
        "                                                                            ",
        "                                emitDirection = pos;",
        "                                emitDirection.Normalize();",
        "    ",
        "                            }",
        "                            break;",
        "                            ",
        "                            ",
        "                        }",
        "                    }",
        "    ",
        "                    var rotA = Matrix.RotationAxis(axisA, _emitAngleA.X * TO_RAD + ((float)rand.NextDouble() - 0.5f) * _emitAngleA.Y * TO_RAD);",
        "                    var rotB = Matrix.RotationAxis(axisB, _emitAngleB.X * TO_RAD + ((float)rand.NextDouble() - 0.5f) * _emitAngleB.Y * TO_RAD);",
        "                    var randomRotation = rotA * rotB;",
        "",
        "                    ",
        "                    //emitDirection = Vector3.Transform(emitDirection, randomRotation).ToVector3();",
        "                    emitDirection = Vector3.Normalize(_emitDirection);",
        "                    emitDirection += _upVector;",
        "                    ",
        "                    _particles[_maxCount- ( _emitIndex % _maxCount)-1] = new Particle()",
        "                    {",
        "                        EmitTime = (float)context.Time,",
        "                        EmitPosition = pos,",
        "                        EmitVelocity = emitDirection * _emitVelocity,",
        "                        EmitSize = 1",
        "                    };;",
        "                    _emitIndex++;",
        "                    ",
        "                    //emitTime += emitPeriod;    ",
        "                }",
        "            }",
        "",
        "            // Set Parameters for shader",
        "            SetScalar(\"Time\", context.Time);",
        "            SetVector(\"Gravity\", _gravity);",
        "            SetVector2(\"Size\", _size);",
        "            SetVector2(\"ShrinkOverTime\", _shrinkOverTime);",
        "            float lifeTime = _lifeTime<=0 ? _maxCount / _emitCount  : _lifeTime;            ",
        "            SetScalar(\"LifeTime\", lifeTime);",
        "            SetVector(\"Stretch\", _stretch);",
        "            SetVector4(\"Turbulence\", _turbulence);",
        "            SetScalar(\"VelocityFriction\", _velocityFriction);",
        "            SetScalar(\"Orientation\", _orientation);",
        "            SetColor(\"ColorStart\", _colorStart);",
        "            SetColor(\"ColorEnd\", _colorEnd);",
        "            SetVector4(\"ColorVariation\", _colorVariation);",
        "            SetVector(\"UpVector\", _upVector);",
        "            SetVector2(\"FadeWithAge\", _fadeWithAge);",
        "            SetVector2(\"FadeTooClose\", _fadeTooClose);            ",
        "            SetScalar(\"Length\", _length);",
        "            SetScalar(\"TurbulenceFadeIn\", _turbulenceFadeIn);",
        "            SetVector(\"EmitDirection\", _emitDirection);",
        "            SetScalar(\"RandomSeed\", _randomSeed);",
        "            SetScalar(\"TurbulenceSplit\", _turbulenceSplit);",
        "            ",
        "            var noiseTexture = inputs[(int)InputId.NoiseTexture].Eval(context).Image; // Needs to be checked for null!",
        "            if(noiseTexture != null) {",
        "                var noiseTextureView = new ShaderResourceView(context.D3DDevice, noiseTexture);",
        "                _effect.GetVariableByName(\"NoiseTexture\").AsShaderResource().SetResource(noiseTextureView);",
        "            }",
        "            ",
        "",
        "            // Instance data buffer",
        "            var streamSize = numInstances * Particle.BLOCK_SIZE;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, Particle.BLOCK_SIZE);",
        "            }",
        "",
        "            // Render instances",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "                for (var i = 0; i < numInstances;  i++)",
        "                //for (var i = numInstances -1; i > 0; i--)",
        "                {",
        "                    var p = _particles[i];",
        "                    p.WriteToDataStream(instanceDataStream);",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "",
        "                if (context.DepthStencilState != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "",
        "                if (context.RasterizerState != null)",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewport(context.Viewport);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new[]",
        "                {",
        "                    instancedMesh.Vertices, ",
        "                    _instanceDataBuffer",
        "                },",
        "                new[]",
        "                {",
        "                    VERTEX_ATTRIBUTE_SIZE, ",
        "                    Particle.BLOCK_SIZE",
        "                },",
        "                new[] { 0, 0 });",
        "",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles * 3, numInstances, 0, 0);",
        "",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Replicate2 - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "",
        "            return context;",
        "        }",
        "",
        "",
        "",
        "        private Mesh GetMeshFromSceneInput(OperatorPart sceneInput)",
        "        {",
        "            _meshCollector.Clear();",
        "            sceneInput.TraverseWithFunction(_meshCollector, null);",
        "            var meshSupplier = _meshCollector.CollectedOpPartFunctions.FirstOrDefault();",
        "            if (meshSupplier == null)",
        "            {",
        "                Logger.Error(this, \"Found no mesh supplier, have you forgotten to add an input?\");",
        "                return null;",
        "            }",
        "            var meshes = new List<Mesh>();",
        "            meshSupplier.AddMeshesTo(meshes);",
        "            if (meshes.Count != 1)",
        "            {",
        "                Logger.Error(this, \"Found more or less than 1 mesh\");",
        "                return null;",
        "            }",
        "            var instancedMesh = meshes[0];",
        "",
        "            return instancedMesh;",
        "        }",
        "",
        "        #region Noise functions",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed * 137;",
        "            n = (n << 13) ^ n;",
        "            return (float)(1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t * (b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t * t * t * (t * (t * 6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t * 3.1415927f;",
        "            float f = (float)(1.0 - Math.Cos(ft)) * 0.5f;",
        "            return a * (1.0f - f) + b * f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            const int SEED = 0;",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime + 10000;",
        "",
        "",
        "            noiseSum = Lerp(Noise((int)value, SEED),",
        "                            Noise((int)value + 1, SEED),",
        "                            Fade(value - (float)Math.Floor(value)));",
        "            return noiseSum;",
        "        }",
        "",
        "        #endregion",
        "",
        "        private const float _frequency = 1;",
        "        private float _noiseTime;",
        "",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "",
        "        private double _lastEmitTime;",
        "        private double _lastEvalTime;",
        "        private bool _firstEval = true;",
        "        private int _emitIndex = 0;",
        "        private Particle[] _particles = new Particle[1];",
        "",
        "",
        "        internal struct Particle",
        "        {",
        "            public float EmitTime;",
        "            public float EmitSize;",
        "            public Vector3 EmitPosition;",
        "            public Vector3 EmitVelocity;",
        "",
        "            public void WriteToDataStream(DataStream instanceDataStream)",
        "            {",
        "                instanceDataStream.Write(EmitTime);",
        "                instanceDataStream.Write(EmitSize);",
        "                instanceDataStream.Write(EmitPosition);",
        "                instanceDataStream.Write(EmitVelocity);",
        "            }",
        "",
        "            public static int BLOCK_SIZE { get { return (1 + 1 + 3 + 3) * 4; } }",
        "        }",
        "",
        "        const int VERTEX_ATTRIBUTE_SIZE = 76;",
        "        const float TO_RAD = (float)(Math.PI / 180.0f);",
        "",
        "        private const int VERTEX_BUFFER_SLOT = 0;",
        "        private const int INSTANCE_BUFFER_SLOT = 1;",
        "",
        "        private readonly InputElement[] _instanceDataInputElements",
        "            = new[]",
        "            {",
        "                // Slot 1 - Vertex buffer",
        "                new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float,  0, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"NORMAL\",   0, SharpDX.DXGI.Format.R32G32B32_Float,    16, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"COLOR\",    0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float,       44, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"TANGENT\",  0, SharpDX.DXGI.Format.R32G32B32_Float,    52, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float,    64, VERTEX_BUFFER_SLOT),",
        "",
        "                // Slot 2 - Instance buffer",
        "                new InputElement(\"EMIT_TIME\",       0, SharpDX.DXGI.Format.R32_Float,       0*4   ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"EMIT_SIZE\",       0, SharpDX.DXGI.Format.R32_Float,       1*4   ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"EMIT_POSITION\",   0, SharpDX.DXGI.Format.R32G32B32_Float,  2*4  ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"EMIT_VELOCITY\",   0, SharpDX.DXGI.Format.R32G32B32_Float,  5*4  ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "            };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "110ba97c-ac4a-48d9-8e60-ba962c718735",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e8286dd3-9d70-4515-89bc-42f258c9eda6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3b20ae2e-11a0-4202-a029-3f4bbd740a42",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1e9847df-91d5-4eb2-ab20-c12a3eb7f82f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "73d0a852-5aa0-419d-b09f-ecd5e151c470",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8581ecbe-dddb-410b-bf8b-2d75cc569984",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bfeeb155-d4b4-44c9-bb85-bebfaabe2372",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3f9c477c-e400-4680-a8ce-1968757f0cf8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1ea3bf59-4eaf-4157-8c71-3b8fc0a41df8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c86a0fa3-5f68-4a28-ac3a-8e5bc0d3b722",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0e93873f-87aa-4a37-bb8c-f802b120c69b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2800d2f2-c7c0-424f-b3b6-a4fb38879177",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "37793bf5-7f0a-41dc-87c0-27a50bcee3b5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0cf2ecdd-ae3a-4ff1-b356-e7143674c8cf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "813b50f3-7b46-4e5b-aba9-5335218ecb7b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c59826ae-4c67-4afc-9251-6109875a4416",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2f1518cb-559c-4295-8c3e-19c94994c716",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ddbeb1ea-469f-4427-a9a8-b59561e778e0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9566c8b4-fe34-4348-802a-dc5187d08438",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b2513d28-6767-424c-8b13-c6063b112a42",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "de4e32ca-636e-484a-955e-634c55377245",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2a1b8986-c6d9-44c8-8b53-0faa71815bb1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bb9a2d4f-4757-4df6-b081-cfb0dda5eabf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e9fe1e97-df7c-4b9f-98dc-d58dc572b515",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2a4aac3e-83ca-4dda-9eb9-474975783d1b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "29018631-ab0a-4635-b42e-548eb21032c9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1b13200-161a-422d-908d-7dd3507aa701",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "63a3de76-d8d0-48ba-ad94-c58b42b2b68b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e71e8131-5316-40da-8f40-ac8331fcefed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1a76f9b-103d-4bef-84b4-f3c3bad1be51",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5407ca0e-d388-4ef4-90ef-98a232be962d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bce9ca80-61a5-4964-a30b-e3a84b62dcca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc953653-bb62-4060-ac1c-5ddc3dfd9ae7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "28cbe3ab-0ea3-4c8f-bda9-b8edeb557f3d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8bd6ad56-53ab-430c-94e5-954ef3c873d6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "45b3dd5c-734c-4763-bbb2-f13da80ad07a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a8a258f8-4e6e-4eee-9b8b-eeb1a3c0e8e8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "55cef8f7-af6c-4930-be6c-475108b19f3f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "35e18953-c18d-4ff2-94a3-cfccc268e3dc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "aa5fcb1a-b2ef-4405-9df3-50f684099df2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5ca12bde-e963-4ec2-bfb9-c6093f176fed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5f7e8e30-b0a8-45c0-9abe-664ec2b00459",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ef20c309-063c-4d06-918e-71edd10dd867",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba3f4bb8-c385-472c-b36a-143d73729cde",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "addaae3f-e6eb-462b-be18-ecf6df8850ba",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d6457b0e-8256-449a-955c-e38aedaa7c1f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1159e3d1-448c-412d-9753-e8e551ffccf1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9c5acb2f-f5de-427c-9320-241d6c6b1e76",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "61cc0703-adf1-4df8-928a-007741f805ee",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6dcfbb13-a6fa-465d-94d6-a569ae5df967",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "891b172e-cde5-4559-9eb5-1213f11d6c3e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5a25c934-a370-420f-8ec4-80a0134ed504",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d2d9a55a-7605-4bcb-88ad-76300704843f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "edd08df8-7abe-4701-b8e1-dce1eea55b49",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "80e8beff-68cb-437a-8071-c0750a138c84",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96fdf6cb-b471-44d8-8d7b-7157284b7ad4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "34038c54-340a-4c99-b2ac-a9e0a38d666d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "82f3934c-780b-4d1f-9a35-8eb59f3084f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bb3471d8-7858-4262-9166-f5fc3805ead7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "74b2102e-82c6-4f63-8e1a-9c32466cf8f0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e2c67c9f-6a4c-4ba6-8068-c6268f4c24ff",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cfe0c04a-9c5a-4fc5-b1a3-ccea0d8f7be7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4b41e315-f5d5-4356-b60b-05311479a52c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc53286f-7e78-4fb7-a41c-9d95ad433b74",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f950ba1b-40fe-47f8-a1f3-5f2ed895924e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e7a981b5-50ee-4a20-8cfe-53a02d3083fb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7d95997a-1aa8-4099-8c1f-d1f5b420a12f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "131752e9-e4be-4143-8e7b-08b63524ff29",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7b9938bd-12a5-4d86-8bca-dc0dfae7da24",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "13ebbdc0-83ce-44b1-b515-d24c62b680c9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "47d89185-89e6-459e-bb04-f7cf5e79255a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af685250-25d7-4b29-9cc7-2277b29c647a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "37d9f9e6-968d-4b4b-a988-773f012a1222"
    }
  ]
}