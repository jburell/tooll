{
  "Name": "ReplicateOnSpline",
  "_id": "f54159db-9092-4955-b558-fa354b095322",
  "Namespace": "projects.calcifer.helpers",
  "Description": "Simple Operator that replicates the incoming geometry along a spline defined by two points and its two tangents. This will later be used as a Gizmo for the TornadoScatter effect.\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "97acae59-97ee-4e12-a435-8041dded2104",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> VS2\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "//    float4x4 objToWorldMatrix = objectToWorldMatrix;\r",
          "//    objToWorldMatrix[3] = input.objToWorldRow3;\r",
          "    float4x4 instanceToWorldMatrix = float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "    output.posInWorld = mul(input.pos, instanceToWorldMatrix);\r",
          "    output.pos = mul(output.posInWorld, worldToCameraMatrix);\r",
          "    output.normal = mul(input.normal, (float3x3)instanceToWorldMatrix);\r",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "    output.vertexColor = input.col;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords);\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SceneInput",
      "MetaInstanceID": "9230a119-bd60-44ed-931c-9f6e93abf03a",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "3edeac31-52b7-4e17-8f06-be790f0b1fb7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionA.X",
      "MetaInstanceID": "7faf4238-fcb8-4594-9d96-c38e45c039ad",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionA.Y",
      "MetaInstanceID": "ae2f4997-3f6f-4533-8d2e-9ce05b7eafdf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionA.Z",
      "MetaInstanceID": "a4a50051-42f3-451e-9b4b-a76a641ab0c2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TangentA.X",
      "MetaInstanceID": "f209c92d-2d3e-4669-b224-f501f71b5346",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TangentA.Y",
      "MetaInstanceID": "a36126de-3633-4d3e-928c-4440a155a5c8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TangentA.Z",
      "MetaInstanceID": "bc96ac6b-2bb4-411d-8cf2-68b7fba8f1af",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionB.X",
      "MetaInstanceID": "6f2fc541-51b6-4659-aec3-2d4835a9bb93",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionB.Y",
      "MetaInstanceID": "6b347d01-b8a8-4842-90bd-159d84955a38",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionB.Z",
      "MetaInstanceID": "2ffda81a-66f7-47c3-a8a5-122c8d7b32ef",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TangentB.X",
      "MetaInstanceID": "416a8935-94a3-4351-81a2-c51a06517445",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TangentB.Y",
      "MetaInstanceID": "4c2c532a-50cc-4b31-ac79-3150e8a3685a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TangentB.Z",
      "MetaInstanceID": "91a6cba4-02cf-4ba2-ae19-235cc5a24a28",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "e0f3eb30-8457-4acf-a7b1-2cc640c5f31f",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f",
      "MetaID": "49539223-d3de-413f-8adf-0730efde5c34",
      "Name": "ReplicateOnSplineFunc",
      "Version": "61e98caf-7014-448a-8416-f39777eea535",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID49539223_d3de_413f_8adf_0730efde5c34",
        "{",
        "    public class Class_ReplicateOnSpline : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_ReplicateOnSpline()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            SceneInput = 1,",
        "            Count = 2,",
        "            PositionAX = 3,",
        "            PositionAY = 4,",
        "            PositionAZ = 5,",
        "            TangentAX = 6,",
        "            TangentAY = 7,",
        "            TangentAZ = 8,",
        "            PositionBX = 9,",
        "            PositionBY = 10,",
        "            PositionBZ = 11,",
        "            TangentBX = 12,",
        "            TangentBY = 13,",
        "            TangentBZ = 14",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var SceneInput = inputs[(int)InputId.SceneInput];",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            var PositionAX = inputs[(int)InputId.PositionAX].Eval(context).Value;",
        "            var PositionAY = inputs[(int)InputId.PositionAY].Eval(context).Value;",
        "            var PositionAZ = inputs[(int)InputId.PositionAZ].Eval(context).Value;",
        "            var PositionA = new Vector3(PositionAX, PositionAY, PositionAZ);",
        "            var TangentAX = inputs[(int)InputId.TangentAX].Eval(context).Value;",
        "            var TangentAY = inputs[(int)InputId.TangentAY].Eval(context).Value;",
        "            var TangentAZ = inputs[(int)InputId.TangentAZ].Eval(context).Value;",
        "            var TangentA = new Vector3(TangentAX, TangentAY, TangentAZ);",
        "            var PositionBX = inputs[(int)InputId.PositionBX].Eval(context).Value;",
        "            var PositionBY = inputs[(int)InputId.PositionBY].Eval(context).Value;",
        "            var PositionBZ = inputs[(int)InputId.PositionBZ].Eval(context).Value;",
        "            var PositionB = new Vector3(PositionBX, PositionBY, PositionBZ);",
        "            var TangentBX = inputs[(int)InputId.TangentBX].Eval(context).Value;",
        "            var TangentBY = inputs[(int)InputId.TangentBY].Eval(context).Value;",
        "            var TangentBZ = inputs[(int)InputId.TangentBZ].Eval(context).Value;",
        "            var TangentB = new Vector3(TangentBX, TangentBY, TangentBZ);",
        "            //<<< _params        ",
        "",
        "            if (SceneInput.Connections.Count == 0)",
        "            {",
        "                return context;",
        "            }",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "",
        "            //var meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "            _meshCollector.Clear();",
        "            SceneInput.TraverseWithFunction(_meshCollector, null);",
        "            var meshSupplier = _meshCollector.CollectedOpPartFunctions.FirstOrDefault();",
        "            if (meshSupplier == null)",
        "            {",
        "                Logger.Error(this,\"Found no mesh supplier, have you forgotten to add an input?\");",
        "                return context;",
        "            }",
        "            var meshes = new List<Mesh>();",
        "            meshSupplier.AddMeshesTo(meshes);",
        "            if (meshes.Count != 1)",
        "            {",
        "                Logger.Error(this,\"Found more or less than 1 mesh\");",
        "                return context;",
        "            }",
        "            var instancedMesh = meshes[0];",
        "",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            var numInstances = (int) Count;",
        "            var streamSize = numInstances * instanceDataSize;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                using (var stream = new DataStream(streamSize, true, true))",
        "                {",
        "                    _instanceDataBuffer = new Buffer(context.D3DDevice, stream, new BufferDescription",
        "                                                                                    {",
        "                                                                                        BindFlags = BindFlags.VertexBuffer,",
        "                                                                                        CpuAccessFlags = CpuAccessFlags.Write,",
        "                                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                                        SizeInBytes = streamSize,",
        "                                                                                        Usage = ResourceUsage.Dynamic",
        "                                                                                    });",
        "                }",
        "            }",
        "",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "",
        "                for (var i = 0; i < Count-1; ++i)",
        "                {",
        "                    ",
        "                    float f1= i/Count;",
        "                    float s1 =  Fade(f1);",
        "                    Vector3 t = (1-f1) * (PositionA + s1 * TangentA) ",
        "                    + f1 * (PositionB+ (1-s1) * TangentB);",
        "",
        "                    float f2= (i+1)/Count;",
        "                    float s2 =  Fade(f2);",
        "                    Vector3 t2 = (1-f2) * (PositionA + s2 * TangentA) ",
        "                    + f2 * (PositionB+ (1-s2) * TangentB);",
        "",
        "",
        "                    var transform = Matrix.Identity;",
        "",
        "                    // Rotation                    ",
        "                    var dir = t-t2;",
        "                    dir.Normalize();",
        "                    var helperDir = new Vector3(1, 0, 0);",
        "                    if (Math.Abs(dir.Y) < 0.1 && Math.Abs(dir.Z) < 0.1)",
        "                        helperDir = new Vector3(0, 1, 0);",
        "                    var yAxis = Vector3.Cross(dir, helperDir);",
        "                    yAxis.Normalize();",
        "                    var xAxis = Vector3.Cross(yAxis, dir);",
        "                    xAxis.Normalize();",
        "                    var m = Matrix.Identity;",
        "                    m.Row1 = new Vector4(xAxis, 0);",
        "                    m.Row2 = new Vector4(yAxis, 0);",
        "                    m.Row3 = new Vector4(dir, 0);",
        "                    transform *= m;",
        "",
        "                    transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                    transform *= context.ObjectTWorld;",
        " ",
        "                    instanceDataStream.Write(transform.Row1);",
        "                    instanceDataStream.Write(transform.Row2);",
        "                    instanceDataStream.Write(transform.Row3);",
        "                    instanceDataStream.Write(transform.Row4);",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            using (new PropertyStasher<OperatorPartContext>(context, \"Effect\", \"Renderer\"))",
        "            {",
        "                context.Effect = _effect;",
        "                context.Renderer = _renderer;",
        "",
        "                try",
        "                {",
        "                    _renderer.SetupEffect(context);",
        "",
        "                    if (context.DepthStencilView != null)",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                    else",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                    if (context.BlendState != null)",
        "                    {",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                    }",
        "",
        "                    if (context.DepthStencilState != null)",
        "                    {",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                    }",
        "",
        "                    if (context.RasterizerState != null)",
        "                    {",
        "                        context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                    }",
        "",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    var pass = technique.GetPassByIndex(0);",
        "",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.SetViewport(context.Viewport);",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { instancedMesh.Vertices, _instanceDataBuffer}, new [] {76, instanceDataSize}, new [] {0,0} );",
        "",
        "                    pass.Apply(context.D3DDevice.ImmediateContext);",
        "                    context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles*3, numInstances, 0, 0);",
        "                }",
        "                catch (Exception exception)",
        "                {",
        "                    Logger.Error(this,\"Replicate2 - An error occured during evaluation: {0}\", exception.Message);",
        "                }",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        #region helpers",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed*137;",
        "            n = (n << 13) ^ n;",
        "            return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t*(b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t*t*t*(t*(t*6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t*3.1415927f;",
        "            float f = (float) (1.0 - Math.Cos(ft))*0.5f;",
        "            return a*(1.0f - f) + b*f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime;",
        "",
        "",
        "            noiseSum = Lerp(Noise((int) value, SEED),",
        "                            Noise((int) value + 1, SEED),",
        "                            Fade(value - (float) Math.Floor(value)));",
        "            return noiseSum;",
        "        }",
        "",
        "        #endregion",
        "",
        "        private const int SEED = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements = new []",
        "                                                                {",
        "                                                                    new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                                                    new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                                                    new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                                                    new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                                                    new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                                                    new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "97acae59-97ee-4e12-a435-8041dded2104",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9230a119-bd60-44ed-931c-9f6e93abf03a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3edeac31-52b7-4e17-8f06-be790f0b1fb7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7faf4238-fcb8-4594-9d96-c38e45c039ad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae2f4997-3f6f-4533-8d2e-9ce05b7eafdf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a4a50051-42f3-451e-9b4b-a76a641ab0c2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f209c92d-2d3e-4669-b224-f501f71b5346",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a36126de-3633-4d3e-928c-4440a155a5c8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc96ac6b-2bb4-411d-8cf2-68b7fba8f1af",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f2fc541-51b6-4659-aec3-2d4835a9bb93",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6b347d01-b8a8-4842-90bd-159d84955a38",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ffda81a-66f7-47c3-a8a5-122c8d7b32ef",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "416a8935-94a3-4351-81a2-c51a06517445",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4c2c532a-50cc-4b31-ac79-3150e8a3685a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "91a6cba4-02cf-4ba2-ae19-235cc5a24a28",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3e26eb00-2fc5-40f2-863d-33d04e2cea3f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e0f3eb30-8457-4acf-a7b1-2cc640c5f31f"
    }
  ]
}