{
  "Name": "NoiseDistort2",
  "_id": "fef6c782-8732-4e9e-b7e8-f74698a5efd5",
  "Namespace": "projects.igravity.shaders",
  "Description": "A refined version of the nosie-distort operator that features less repition\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "f1e06c8f-508c-4f68-b636-afc32260d997",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "Texture2D RGBANoise;",
          "float uShift;",
          "float3 MeshOffset;",
          "float3 Direction;",
          "float2 DirectionRegion;",
          "float NoiseAmount;",
          "float2 NoiseRegion;",
          "float NoiseTime;",
          "float NoiseScale;",
          "float3 UpVector;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "float3 getOffset(float3 p) {\r",
          "\r",
          "    // Noise Offset\r",
          "    float3 noise1 = (RGBANoise.SampleLevel(samLinear, (p.x + NoiseTime ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noise2 = (RGBANoise.SampleLevel(samLinear, (p.y + NoiseTime ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noise3 = (RGBANoise.SampleLevel(samLinear, (p.z + NoiseTime ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "\r",
          "    float3 noiseCombined = noise1+noise2+noise3;\r",
          "    \r",
          "    return noiseCombined;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    \r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;      \r",
          "        float3 p2 = p + MeshOffset;        \r",
          "        //float3 tmp = p * Axis;\r",
          "        \r",
          "        //float lookUp =  tmp.x + tmp.y + tmp.z;\r",
          "        \r",
          "        // fade        \r",
          "        vertex.pos.xyz += getOffset(p2);\r",
          "        vertex.normal.xyz += getOffset(p2 + vertex.normal * 0.001);\r",
          "        \r",
          "        //float3 offsetA =  getOffset(p2 + );\r",
          "        //float3 offsetB =  getOffset(p2);                \r",
          "        //vertex.normal.xyz += dot(Axis, offsetA-offsetB);\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "be6eceb5-9a21-4aa8-bb68-d1eb01b2276b",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RGBANoise",
      "MetaInstanceID": "8523b0d5-c188-4eeb-811a-33ab55c9c519",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "uShift",
      "MetaInstanceID": "5dafb571-eaae-4318-956f-af7affe9010f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.X",
      "MetaInstanceID": "f89c0ed1-2801-47be-8d66-c5bb4a6b7917",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.Y",
      "MetaInstanceID": "b8523de0-b235-4695-9437-541dd28685f7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.Z",
      "MetaInstanceID": "eb928a95-afae-4227-bb34-bcd2e7807715",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.X",
      "MetaInstanceID": "ef6c498b-2343-444d-b373-723da4acd9d6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.Y",
      "MetaInstanceID": "f5400534-3389-4584-851c-0e22a51ff837",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.Z",
      "MetaInstanceID": "d55f2d8c-db1b-4c75-b24d-6c2fd42ae8f3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DirectionRegion.uStep",
      "MetaInstanceID": "ab91fe66-5089-4471-97e9-95e56e5a22fc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DirectionRegion.stepSmooth",
      "MetaInstanceID": "580fff46-16b4-454f-8825-53548103b98d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "0bce9d11-7430-4d24-9de3-9e7d802d6de6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRegion.uStep",
      "MetaInstanceID": "40d1abda-5d3e-4d9e-823a-ce3fde19b5a0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRegion.stepSmooth",
      "MetaInstanceID": "0befbba1-eed4-49e8-9c72-a4a106103ee2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "821d41d9-41dd-4b9b-99ae-e7b584db473c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "2ab6d0f2-9bd7-4ecb-9e48-b9351f7f9dd4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.X",
      "MetaInstanceID": "f2ebc24a-061c-4c0a-9b55-229c02013225",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Y",
      "MetaInstanceID": "afe4fcaf-0ed7-4fd4-8f8c-3ae0bec90dac",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Z",
      "MetaInstanceID": "18f99d03-5785-46b9-9941-8ef2f5b60de0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "3e5d4064-f273-4857-8f07-e9f9bf8986f4",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "b155d39a-5462-427f-ac3a-b7f6057b9d93",
      "MetaID": "e9d370d0-9699-4ea9-ba91-aa45b9bec781",
      "Name": "NoiseDistort2Func",
      "Version": "794017ac-0043-4781-b292-32192b37746d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDe9d370d0_9699_4ea9_ba91_aa45b9bec781",
        "{",
        "    public class Class_NoiseDistort2 : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            RGBANoise = 2,",
        "            uShift = 3,",
        "            MeshOffsetX = 4,",
        "            MeshOffsetY = 5,",
        "            MeshOffsetZ = 6,",
        "            DirectionX = 7,",
        "            DirectionY = 8,",
        "            DirectionZ = 9,",
        "            DirectionRegionUStep = 10,",
        "            DirectionRegionStepSmooth = 11,",
        "            NoiseAmount = 12,",
        "            NoiseRegionUStep = 13,",
        "            NoiseRegionStepSmooth = 14,",
        "            NoiseTime = 15,",
        "            NoiseScale = 16,",
        "            UpVectorX = 17,",
        "            UpVectorY = 18,",
        "            UpVectorZ = 19",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_NoiseDistort2()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> __params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var RGBANoise = inputs[(int)InputId.RGBANoise].Eval(context).Image; ",
        "            var uShift = inputs[(int)InputId.uShift].Eval(context).Value;",
        "            var MeshOffsetX = inputs[(int)InputId.MeshOffsetX].Eval(context).Value;",
        "            var MeshOffsetY = inputs[(int)InputId.MeshOffsetY].Eval(context).Value;",
        "            var MeshOffsetZ = inputs[(int)InputId.MeshOffsetZ].Eval(context).Value;",
        "            var MeshOffset = new Vector3(MeshOffsetX, MeshOffsetY, MeshOffsetZ);",
        "            var DirectionX = inputs[(int)InputId.DirectionX].Eval(context).Value;",
        "            var DirectionY = inputs[(int)InputId.DirectionY].Eval(context).Value;",
        "            var DirectionZ = inputs[(int)InputId.DirectionZ].Eval(context).Value;",
        "            var Direction = new Vector3(DirectionX, DirectionY, DirectionZ);",
        "            var DirectionRegionUStep = inputs[(int)InputId.DirectionRegionUStep].Eval(context).Value;",
        "            var DirectionRegionStepSmooth = inputs[(int)InputId.DirectionRegionStepSmooth].Eval(context).Value;",
        "            var DirectionRegion = new Vector2(DirectionRegionUStep, DirectionRegionStepSmooth);",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseRegionUStep = inputs[(int)InputId.NoiseRegionUStep].Eval(context).Value;",
        "            var NoiseRegionStepSmooth = inputs[(int)InputId.NoiseRegionStepSmooth].Eval(context).Value;",
        "            var NoiseRegion = new Vector2(NoiseRegionUStep, NoiseRegionStepSmooth);",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var UpVectorX = inputs[(int)InputId.UpVectorX].Eval(context).Value;",
        "            var UpVectorY = inputs[(int)InputId.UpVectorY].Eval(context).Value;",
        "            var UpVectorZ = inputs[(int)InputId.UpVectorZ].Eval(context).Value;",
        "            var UpVector = new Vector3(UpVectorX, UpVectorY, UpVectorZ);",
        "            //<<< __params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            var noiseTextureView = new ShaderResourceView(context.D3DDevice, RGBANoise);",
        "            _effect.GetVariableByName(\"RGBANoise\").AsShaderResource().SetResource(noiseTextureView);",
        "            ",
        "            _effect.GetVariableByName(\"uShift\").AsScalar().Set(uShift);",
        "            _effect.GetVariableByName(\"MeshOffset\").AsVector().Set(MeshOffset);",
        "            _effect.GetVariableByName(\"Direction\").AsVector().Set(Direction);",
        "            _effect.GetVariableByName(\"DirectionRegion\").AsVector().Set(DirectionRegion);",
        "             ",
        "            _effect.GetVariableByName(\"NoiseAmount\").AsScalar().Set(NoiseAmount);            ",
        "            _effect.GetVariableByName(\"NoiseRegion\").AsVector().Set(NoiseRegion);",
        "            _effect.GetVariableByName(\"NoiseTime\").AsScalar().Set(NoiseTime);",
        "            _effect.GetVariableByName(\"NoiseScale\").AsScalar().Set(NoiseScale);",
        "            ",
        "            _effect.GetVariableByName(\"UpVector\").AsVector().Set(UpVector);",
        "                        ",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3e5d4064-f273-4857-8f07-e9f9bf8986f4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1e06c8f-508c-4f68-b636-afc32260d997",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "be6eceb5-9a21-4aa8-bb68-d1eb01b2276b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8523b0d5-c188-4eeb-811a-33ab55c9c519",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5dafb571-eaae-4318-956f-af7affe9010f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f89c0ed1-2801-47be-8d66-c5bb4a6b7917",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b8523de0-b235-4695-9437-541dd28685f7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eb928a95-afae-4227-bb34-bcd2e7807715",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ef6c498b-2343-444d-b373-723da4acd9d6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f5400534-3389-4584-851c-0e22a51ff837",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d55f2d8c-db1b-4c75-b24d-6c2fd42ae8f3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ab91fe66-5089-4471-97e9-95e56e5a22fc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "580fff46-16b4-454f-8825-53548103b98d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0bce9d11-7430-4d24-9de3-9e7d802d6de6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40d1abda-5d3e-4d9e-823a-ce3fde19b5a0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0befbba1-eed4-49e8-9c72-a4a106103ee2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "821d41d9-41dd-4b9b-99ae-e7b584db473c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ab6d0f2-9bd7-4ecb-9e48-b9351f7f9dd4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f2ebc24a-061c-4c0a-9b55-229c02013225",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "afe4fcaf-0ed7-4fd4-8f8c-3ae0bec90dac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "18f99d03-5785-46b9-9941-8ef2f5b60de0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b155d39a-5462-427f-ac3a-b7f6057b9d93"
    }
  ]
}