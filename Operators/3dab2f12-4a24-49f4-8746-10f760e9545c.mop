{
  "Name": "Bokeh",
  "_id": "3dab2f12-4a24-49f4-8746-10f760e9545c",
  "Namespace": "lib.image.blur",
  "Description": "Loads an image.",
  "Inputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "73589db7-b520-44d8-9c4f-0c519104f881",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "GlowFactor",
      "MetaInstanceID": "2a065da9-712c-4792-af60-da5ec7db193c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offet",
      "MetaInstanceID": "e4b3e7b9-5846-47bc-844c-e166f8e077cb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10",
      "Max": "10",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "64cc4579-c9be-4be1-bef1-279cf82b0d32",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Intensity",
      "MetaInstanceID": "3d6b3afc-99f3-43f1-a4c1-71ca88f6ac82",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100",
      "Max": "100",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Threshold",
      "MetaInstanceID": "6aa37a3f-db57-43cc-95b2-a8d214aa1510",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Quality",
      "MetaInstanceID": "0c577b50-686d-4f43-86d2-d604f6f4411f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "6"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "1",
      "Max": "10",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "2f3ca932-e898-445f-b261-acadf3e95548",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "2bcbef16-b60a-4d0e-91aa-98bed7c91374",
      "MetaID": "8cc066ca-a65f-4b3a-bad7-cb143a567951",
      "Name": "BokehFunc",
      "Version": "af0b4231-0082-4998-81e5-11314394974e",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Runtime.InteropServices;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.D3DCompiler;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.DXGI;",
        "using SharpDX.Windows;",
        "",
        "namespace Framefield.Core.ID8cc066ca_a65f_4b3a_bad7_cb143a567951",
        "{",
        "    public class Class_Bokeh : OperatorPart.Function",
        "    {",
        "        public Class_Bokeh() {",
        "            try {",
        "                using (var bytecode = ShaderBytecode.CompileFromFile(\"assets-common/fx/BokehBlur.fx\", \"fx_5_0\", ShaderFlags.None, EffectFlags.None, null, null))",
        "                    _effect = new Effect(D3DDevice.Device, bytecode);",
        "            }",
        "            catch (Exception exception) {",
        "                Logger.Error(this,\"Load Effect error: {0}\", exception.Message);",
        "            }",
        "        }",
        "",
        "        private bool BuildRenderTarget() {",
        "            var resourceChanged = ResourceManager.ValidateRenderTargetResource(ref _renderTargetResource, OperatorPart, D3DDevice.Device,",
        "                                                                               (int)_usedViewport.Width, (int)_usedViewport.Height);",
        "            if (resourceChanged) {",
        "                Utilities.DisposeObj(ref _renderTargetView);",
        "                _renderTargetView = new RenderTargetView(D3DDevice.Device, _renderTargetResource.Texture);",
        "            }",
        "            return resourceChanged;",
        "        }",
        "",
        "        public override void Dispose() {",
        "            ResourceManager.Dispose(_renderTargetResource);",
        "            Utilities.DisposeObj(ref _renderTargetView);",
        "            Utilities.DisposeObj(ref _effect);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            var Image = inputs[0].Eval(context).Image;",
        "            var GlowFactor = inputs[1].Eval(context).Value;",
        "            var Offset = inputs[2].Eval(context).Value;",
        "            var Size = inputs[3].Eval(context).Value; ",
        "            var Intensity = inputs[4].Eval(context).Value;",
        "            var Threshold = inputs[5].Eval(context).Value;",
        "            var Quality = (int)inputs[6].Eval(context).Value;",
        "",
        "            if (context.Viewport.Width != _usedViewport.Width ||",
        "                context.Viewport.Height != _usedViewport.Height) ",
        "            {",
        "                _usedViewport = context.Viewport;",
        "                Changed = true;",
        "            }",
        "",
        "            if (BuildRenderTarget())",
        "                Changed = true;",
        "",
        "            if (Changed) {",
        "                var D3DDevice = context.D3DDevice;",
        "                var subContext = new OperatorPartContext(context);",
        "                subContext.DepthStencilView = null;",
        "                subContext.RenderTargetView = _renderTargetView;",
        "",
        "                D3DDevice.ImmediateContext.ClearRenderTargetView(_renderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                try {",
        "                    subContext.Effect = _effect;",
        "                    subContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    var proj = Matrix.OrthoLH(1, 1, -100, 100);",
        "                    subContext.CameraProjection = proj;",
        "                    using (var textureView = new ShaderResourceView(D3DDevice, Image)) {",
        "                        subContext.Texture0 = textureView;",
        "                        subContext.Renderer.SetupEffect(subContext);",
        "",
        "                        _effect.GetVariableByName(\"widthToHeight\").AsScalar().Set((float)_usedViewport.Width/_usedViewport.Height);",
        "                        _effect.GetVariableByName(\"glow\").AsScalar().Set(GlowFactor);",
        "                        _effect.GetVariableByName(\"offset\").AsScalar().Set(Offset);",
        "                        _effect.GetVariableByName(\"size\").AsScalar().Set(Size);",
        "                        _effect.GetVariableByName(\"intensity\").AsScalar().Set(Intensity);",
        "                        _effect.GetVariableByName(\"threshold\").AsScalar().Set(Threshold);",
        "",
        "                        //calculate hammersley point set in polar coordinates with uniform distribution for sampling ",
        "                        //positions also known as a binary (t, m, s)-net where t = 0, m = Quality, s = 2",
        "                        int numSamplePoints = 1 << Quality;",
        "                        _effect.GetVariableByName(\"numSamplePoints\").AsScalar().Set(numSamplePoints);",
        "",
        "                        for (int i = 0; i < numSamplePoints; ++i) {",
        "                            //sqrt is needed to create a uniform distribution wihtin the polar coordinate space",
        "                            double r = Math.Sqrt((double)i/numSamplePoints);",
        "                            double a = 2.0*Math.PI*(Reverse((ushort)i) >> (16-Quality))/numSamplePoints;",
        "                            SharpDX.Vector2 pos = new SharpDX.Vector2((float)Math.Cos(a), (float)Math.Sin(a));",
        "                            var varSamplePoint = _effect.GetVariableByName(\"samplePoints\").GetElement(i).AsVector();",
        "                            varSamplePoint.Set((float)r*pos);",
        "                        }",
        "",
        "                        subContext.Renderer.Render(subContext.Renderer._screenQuadMesh, subContext);",
        "                    }",
        "                }",
        "                catch (Exception exception) {",
        "                    Logger.Error(this,\"Load Effect error: {0}\", exception.Message);",
        "                }",
        "",
        "                Changed = false;",
        "            }",
        "",
        "            context.Image = _renderTargetResource.Texture;",
        "",
        "            return context;",
        "        }",
        "",
        "        private static ushort Reverse(ushort v) {",
        "            ushort r = v;",
        "            int s = 15;",
        "            for (v >>= 1; v != 0; v >>= 1) {",
        "                r <<= 1;",
        "                r |= (ushort)(v & 1);",
        "                --s;",
        "            }",
        "            r <<= s;",
        "            return r;",
        "        }",
        "",
        "        Resource _renderTargetResource = null;",
        "        RenderTargetView _renderTargetView = null;",
        "        Effect _effect;",
        "        ViewportF _usedViewport = new ViewportF(0, 0, 512, 512);",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2f3ca932-e898-445f-b261-acadf3e95548"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "73589db7-b520-44d8-9c4f-0c519104f881",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2a065da9-712c-4792-af60-da5ec7db193c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e4b3e7b9-5846-47bc-844c-e166f8e077cb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "64cc4579-c9be-4be1-bef1-279cf82b0d32",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3d6b3afc-99f3-43f1-a4c1-71ca88f6ac82",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6aa37a3f-db57-43cc-95b2-a8d214aa1510",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0c577b50-686d-4f43-86d2-d604f6f4411f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bcbef16-b60a-4d0e-91aa-98bed7c91374"
    }
  ]
}