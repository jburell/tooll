{
  "Name": "SplineDistort (2)",
  "_id": "86749053-42ec-4ccc-917f-1b1054e47013",
  "Namespace": "projects.igravity.shaders",
  "Description": "Super complicated displacement-shader inspired by Tooll1. Uses a function f(u) that defines a spline in space. u is derived from a x-position of the incoming mesh.  \r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "795be642-5a14-4d57-894c-516609a3433b",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "Texture2D RGBANoise;",
          "float uShift;",
          "float3 MeshOffset;",
          "float3 Direction;",
          "float2 DirectionRegion;",
          "float NoiseAmount;",
          "float2 NoiseRegion;",
          "float NoiseTime;",
          "float NoiseScale;",
          "float2 SpinRegion;",
          "float SpinLength;",
          "float SpinPhase;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "float smoothStep( float t, float step, float smooth) {\r",
          "    t = (t-step) / smooth;\r",
          "    t=  t * t * t * (t * (t * 6 - 15) + 10);    \r",
          "    return clamp(t,0,1);\r",
          "}\r",
          "\r",
          "matrix rotationMatrix(float3 axis, float angle)\r",
          "{\r",
          "    axis = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c = cos(angle);\r",
          "    float oc = 1.0 - c;\r",
          "    \r",
          "    return matrix(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\r",
          "                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\r",
          "                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\r",
          "                0.0,                                0.0,                                0.0,                                1.0);\r",
          "}\r",
          "\r",
          "float3 getOffset(float3 p) {\r",
          "\r",
          "    float3 offset =float3(0,0,0);\r",
          "\r",
          "    \r",
          "    float u = p.x * uShift;\r",
          "\r",
          "    // Directional offset\r",
          "    offset+= u * Direction * smoothStep( u , DirectionRegion.x, DirectionRegion.y); ;\r",
          "    \r",
          "    // Noise Offset\r",
          "    //float3 noise1 = (RGBANoise.SampleLevel(samLinear, (u+p.xz + float2(NoiseTime,u) * float2(0.14,0.53) ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noise2 = (RGBANoise.SampleLevel(samLinear, (u+p.yz + NoiseTime*11 * float2(0.41,0.31) ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noise3 = (RGBANoise.SampleLevel(samLinear, (u+p.yx + NoiseTime*12 * float2(0.74,0.15) ) / NoiseScale  / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "\r",
          "    float3 noise1 = (RGBANoise.SampleLevel(samLinear,  float2(u+ 0.14 + 0.32* NoiseTime, 0.21*u +0.53 + 0.11*NoiseTime)  / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount ;\r",
          "    float3 noise2 = (RGBANoise.SampleLevel(samLinear,  float2(u+1.3+ 0.14 + 0.32* NoiseTime, 0.21*u+12 +0.53 + 0.11*NoiseTime)  / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount ;\r",
          "    //float3 noise2 = (RGBANoise.SampleLevel(samLinear, (u * 0.5+ float2(0.74,0.23) ) / NoiseScale / 1000, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "        \r",
          "    //float3 noiseB1 = (RGBANoise.SampleLevel(samLinear, (p.xz + NoiseTime ) / NoiseScale / 30, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noiseB2 = (RGBANoise.SampleLevel(samLinear, (p.yz + NoiseTime ) / NoiseScale / 30, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noiseB3 = (RGBANoise.SampleLevel(samLinear, (p.yx + NoiseTime ) / NoiseScale / 30, 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "\r",
          "    float3 noiseCombined = (noise1 + noise2)/2;\r",
          "    //float3 noiseCombined = noise1;\r",
          "    //float3 noiseCombined = 3 *(noise1+noise2+noise3) +  (noiseB3 + noiseB2 + noiseB3 );\r",
          "    \r",
          "    offset+= noiseCombined * smoothStep( u , NoiseRegion.x, NoiseRegion.y); \r",
          "    return offset;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    \r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;      \r",
          "        float3 p0=  float3(0, p.y, p.z);\r",
          "        float3 p2 = p + MeshOffset;\r",
          "        \r",
          "        // fade        \r",
          "        float3 pOffset= getOffset(p2);\r",
          "        float3 pOffsetB1= getOffset(p2+10);\r",
          "        float3 pOffsetB2= getOffset(p2-0.01);\r",
          "        \r",
          "        //float3 direction= cross(pOffset - pOffsetB1, pOffset - pOffsetB2);\r",
          "        //float3 p00 = float3(p2.x,0, 0);\r",
          "        //float3 splineNormal = normalize(cross(pOffset - pOffsetB1, pOffset - pOffsetB2)); \r",
          "        //float3 axis = (p00+pOffset) - (p00+pOffsetB1);\r",
          "        //float3 axis = float3(1,1,0);// p2;// - pOffsetB1;\r",
          "        float3 axis = pOffset + pOffsetB1;\r",
          "        \r",
          "        //float angle = dot(splineNormal, normalize(UpVector));\r",
          "        //angle = p.x * 0.1;\r",
          "        float angle = (p2.x+1000) / SpinLength + SpinPhase;\r",
          "        float4 xxx = mul(rotationMatrix(axis, angle ) ,float4(0, p2.y, p2.z,1) );\r",
          "                               \r",
          "        //vertex.col.rgb = normalize(axis);\r",
          "        //vertex.col.rgb= float3(0.5,0.5,0.5);\r",
          "        vertex.pos.xyz = p0 + pOffset + xxx;\r",
          "        \r",
          "        float3 nOffset= getOffset(p2.xyz +vertex.normal.xyz *0.1);\r",
          "        vertex.normal.xyz +=  nOffset  - pOffset;\r",
          "        \r",
          "        \r",
          "        \r",
          "        //float3 P3= xxx + pOffset;\r",
          "        \r",
          "        //vertex.pos.xyz = P3; \r",
          "        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "96564e92-93af-4adc-9f25-c75f172434e1",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RGBANoise",
      "MetaInstanceID": "f56240e7-69c6-4101-9519-b03954addd28",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "uShift",
      "MetaInstanceID": "0080b10e-09a0-4d56-9a57-bfe6eb4d3e7e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.X",
      "MetaInstanceID": "88809574-8440-409e-aaf0-92e1bae780f5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.Y",
      "MetaInstanceID": "58c7ef5d-b194-461e-8a25-e0506016d18a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshOffset.Z",
      "MetaInstanceID": "f916deed-4a8c-4e43-8754-164b7010d8f8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.X",
      "MetaInstanceID": "36a8a5b1-c27a-4946-b8db-6897d7c069f6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.Y",
      "MetaInstanceID": "7beb8cca-4173-43ec-aded-d8ddae8285c6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Direction.Z",
      "MetaInstanceID": "550a79de-eac8-4f0b-9770-6aeedd5e68ce",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DirectionRegion.uStep",
      "MetaInstanceID": "3601f5cf-b47a-4974-bb12-1fcc111db868",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DirectionRegion.stepSmooth",
      "MetaInstanceID": "a7e23232-9663-45c2-b7b5-eff455cb7741",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "978d53d1-69be-466c-9866-9fb594eda053",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRegion.uStep",
      "MetaInstanceID": "d4ff6e30-0c33-446f-9de5-87a1878a16c1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseRegion.stepSmooth",
      "MetaInstanceID": "7f707c9e-5277-40f6-b17a-e7ddfd54a882",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "a0607777-908e-45c9-b83f-a390ce7d2ed2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "379c3ccb-6dce-4eef-bedd-f7ad710103c2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRegion.uStep",
      "MetaInstanceID": "55d93cb2-c391-492d-9039-6b3cb8b1d2c1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRegion.stepSmooth",
      "MetaInstanceID": "9bd38b57-f762-45f0-ae59-5192fc2138b1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinLength",
      "MetaInstanceID": "2d849e7d-d2cb-4b4b-a4fe-ed3d12939cd6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinPhase",
      "MetaInstanceID": "4827d7b5-fbb6-479a-b5b7-8a87e768ccab",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "0fa738fc-82e6-4d25-9515-d09e190fb71c",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "1226632c-a1a3-4de7-86fa-b18f9eca8937",
      "MetaID": "eac31069-7e4b-47d4-9b3b-7302ecfb2a6b",
      "Name": "SplineDistort (2)Func",
      "Version": "c3487780-6c43-4742-ac9e-d4be18ba0f43",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDeac31069_7e4b_47d4_9b3b_7302ecfb2a6b",
        "{",
        "    public class Class_SplineDistort__2_ : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            RGBANoise = 2,",
        "            uShift = 3,",
        "            MeshOffsetX = 4,",
        "            MeshOffsetY = 5,",
        "            MeshOffsetZ = 6,",
        "            DirectionX = 7,",
        "            DirectionY = 8,",
        "            DirectionZ = 9,",
        "            DirectionRegionUStep = 10,",
        "            DirectionRegionStepSmooth = 11,",
        "            NoiseAmount = 12,",
        "            NoiseRegionUStep = 13,",
        "            NoiseRegionStepSmooth = 14,",
        "            NoiseTime = 15,",
        "            NoiseScale = 16,",
        "            SpinRegionUStep = 17,",
        "            SpinRegionStepSmooth = 18,",
        "            SpinLength = 19,",
        "            SpinPhase = 20",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_SplineDistort__2_()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> __params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var RGBANoise = inputs[(int)InputId.RGBANoise].Eval(context).Image; //if (RGBANoise == null) return context;",
        "            var uShift = inputs[(int)InputId.uShift].Eval(context).Value;",
        "            var MeshOffsetX = inputs[(int)InputId.MeshOffsetX].Eval(context).Value;",
        "            var MeshOffsetY = inputs[(int)InputId.MeshOffsetY].Eval(context).Value;",
        "            var MeshOffsetZ = inputs[(int)InputId.MeshOffsetZ].Eval(context).Value;",
        "            var MeshOffset = new Vector3(MeshOffsetX, MeshOffsetY, MeshOffsetZ);",
        "            var DirectionX = inputs[(int)InputId.DirectionX].Eval(context).Value;",
        "            var DirectionY = inputs[(int)InputId.DirectionY].Eval(context).Value;",
        "            var DirectionZ = inputs[(int)InputId.DirectionZ].Eval(context).Value;",
        "            var Direction = new Vector3(DirectionX, DirectionY, DirectionZ);",
        "            var DirectionRegionUStep = inputs[(int)InputId.DirectionRegionUStep].Eval(context).Value;",
        "            var DirectionRegionStepSmooth = inputs[(int)InputId.DirectionRegionStepSmooth].Eval(context).Value;",
        "            var DirectionRegion = new Vector2(DirectionRegionUStep, DirectionRegionStepSmooth);",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseRegionUStep = inputs[(int)InputId.NoiseRegionUStep].Eval(context).Value;",
        "            var NoiseRegionStepSmooth = inputs[(int)InputId.NoiseRegionStepSmooth].Eval(context).Value;",
        "            var NoiseRegion = new Vector2(NoiseRegionUStep, NoiseRegionStepSmooth);",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var SpinRegionUStep = inputs[(int)InputId.SpinRegionUStep].Eval(context).Value;",
        "            var SpinRegionStepSmooth = inputs[(int)InputId.SpinRegionStepSmooth].Eval(context).Value;",
        "            var SpinRegion = new Vector2(SpinRegionUStep, SpinRegionStepSmooth);",
        "            var SpinLength = inputs[(int)InputId.SpinLength].Eval(context).Value;",
        "            var SpinPhase = inputs[(int)InputId.SpinPhase].Eval(context).Value;",
        "            //<<< __params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            var noiseTextureView = new ShaderResourceView(context.D3DDevice, RGBANoise);",
        "            _effect.GetVariableByName(\"RGBANoise\").AsShaderResource().SetResource(noiseTextureView);",
        "            ",
        "            _effect.GetVariableByName(\"uShift\").AsScalar().Set(uShift);",
        "            _effect.GetVariableByName(\"MeshOffset\").AsVector().Set(MeshOffset);",
        "            _effect.GetVariableByName(\"Direction\").AsVector().Set(Direction);",
        "            _effect.GetVariableByName(\"DirectionRegion\").AsVector().Set(DirectionRegion);",
        "             ",
        "            _effect.GetVariableByName(\"NoiseAmount\").AsScalar().Set(NoiseAmount);            ",
        "            _effect.GetVariableByName(\"NoiseRegion\").AsVector().Set(NoiseRegion);",
        "            _effect.GetVariableByName(\"NoiseTime\").AsScalar().Set(NoiseTime);",
        "            _effect.GetVariableByName(\"NoiseScale\").AsScalar().Set(NoiseScale);",
        "            ",
        "            _effect.GetVariableByName(\"SpinRegion\").AsVector().Set(SpinRegion);",
        "            _effect.GetVariableByName(\"SpinLength\").AsScalar().Set(SpinLength);",
        "            _effect.GetVariableByName(\"SpinPhase\").AsScalar().Set(SpinPhase);",
        "                        ",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0fa738fc-82e6-4d25-9515-d09e190fb71c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "795be642-5a14-4d57-894c-516609a3433b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96564e92-93af-4adc-9f25-c75f172434e1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f56240e7-69c6-4101-9519-b03954addd28",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0080b10e-09a0-4d56-9a57-bfe6eb4d3e7e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "88809574-8440-409e-aaf0-92e1bae780f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "58c7ef5d-b194-461e-8a25-e0506016d18a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f916deed-4a8c-4e43-8754-164b7010d8f8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "36a8a5b1-c27a-4946-b8db-6897d7c069f6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7beb8cca-4173-43ec-aded-d8ddae8285c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "550a79de-eac8-4f0b-9770-6aeedd5e68ce",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3601f5cf-b47a-4974-bb12-1fcc111db868",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7e23232-9663-45c2-b7b5-eff455cb7741",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "978d53d1-69be-466c-9866-9fb594eda053",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d4ff6e30-0c33-446f-9de5-87a1878a16c1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7f707c9e-5277-40f6-b17a-e7ddfd54a882",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a0607777-908e-45c9-b83f-a390ce7d2ed2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "379c3ccb-6dce-4eef-bedd-f7ad710103c2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "55d93cb2-c391-492d-9039-6b3cb8b1d2c1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9bd38b57-f762-45f0-ae59-5192fc2138b1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d849e7d-d2cb-4b4b-a4fe-ed3d12939cd6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4827d7b5-fbb6-479a-b5b7-8a87e768ccab",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1226632c-a1a3-4de7-86fa-b18f9eca8937"
    }
  ]
}