{
  "Name": "ZebraZPhongShader",
  "_id": "b5b14743-6d68-40d7-a4eb-0a4451d2d3ed",
  "Namespace": "projects.igravity.shaders",
  "Description": "Renders Geometry with a zebra-pattern defined by the distance to the camera-plane. The line-with is controlled by phong-shading.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "b883efc7-c8ec-44b1-b75c-30aa41f9be75",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 InverseProjectionMatrix;\r",
          "\r",
          "float4 ColorA;\r",
          "float4 ColorB;\r",
          "float2 Width;\r",
          "float Offset;\r",
          "float FalloffThreshold;\r",
          "\r",
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    sample float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "        \r",
          "\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    output.posInWorld = mul(input.pos, objectToWorldMatrix);\r",
          "    output.pos = mul(output.posInWorld, worldToCameraMatrix);\r",
          "    output.normal = mul(input.normal, (float3x3)objectToWorldMatrix);\r",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "    output.vertexColor = input.col;\r",
          "    return output;\r",
          "\r",
          "    //output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation;\r",
          "\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords) * input.vertexColor;\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    float4 shadedColor= float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "    \r",
          "\r",
          "    float4 colr=txDiffuse.Sample(samLinear, input.texCoord) * input.vertexColor;\r",
          "\r",
          "    float depth = mul(input.pos, InverseProjectionMatrix).z;\r",
          "\r",
          "    float sumWidth = Width.x + Width.y;\r",
          "    float mod= (depth+Offset) % sumWidth;\r",
          "    \r",
          "    colr *= mod > (shadedColor.r * sumWidth)   ? ColorA : ColorB;\r",
          "    float normalAngle = dot( normalize(input.fragPosToCamPos), normalize(input.normal));\r",
          "    normalAngle= abs(normalAngle);\r",
          "    if(normalAngle < FalloffThreshold) \r",
          "        return ColorA;\r",
          "    return  colr;\r",
          "}\r",
          "\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_5_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_5_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "12a38866-0465-41d7-94bf-6a66f764c59b",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorA.R",
      "MetaInstanceID": "cf0d67a5-2814-4a8c-9af1-bfd3e6781417",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorA.G",
      "MetaInstanceID": "ca5d3328-24d6-47b4-b578-df20efb6221f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorA.B",
      "MetaInstanceID": "2d304fa3-fd01-441e-bf2c-96be1fec115c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorA.A",
      "MetaInstanceID": "d202f56d-17e7-4de7-82d3-a0be6b7be283",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorB.R",
      "MetaInstanceID": "461e94b3-da85-4166-bfd3-313962c8f5e8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorB.G",
      "MetaInstanceID": "b4c68b2d-36e0-4bca-b632-92157836b899",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "0",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorB.B",
      "MetaInstanceID": "46032b6b-8fd3-4faa-b90b-68d63655d1fe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorB.A",
      "MetaInstanceID": "8366a00d-2b3a-48ed-86d9-aae2ef9335dc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Width.A",
      "MetaInstanceID": "01b8fd80-fda0-4352-827b-381b69ac95bd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Width.B",
      "MetaInstanceID": "d1d33c1f-9e24-4a2c-bb4f-23953f1b4e2f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset",
      "MetaInstanceID": "fa912c37-5c4c-4d28-82c0-d5fd139b81d4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FalloffThreshold",
      "MetaInstanceID": "b9b4e62c-6876-4882-8527-d917c03a6456",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "a23f8a6c-3278-47ad-8199-c69e6b3ec846",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "da055533-aa67-446e-85ec-49054177d539",
      "MetaID": "b276a240-66a3-4414-8d24-ef0b7ee2c99d",
      "Name": "ZebraZPhongShaderFunc",
      "Version": "ae12107d-991c-4e35-9079-fe20ca231f6f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Runtime.InteropServices;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDb276a240_66a3_4414_8d24_ef0b7ee2c99d",
        "{",
        "    public class Class_ZebraZPhongShader : FXSourceCodeFunction, IFXSceneSourceCode, IMaterial",
        "    {",
        "",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}",
        "        }",
        "        #endregion",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            ColorAR = 2,",
        "            ColorAG = 3,",
        "            ColorAB = 4,",
        "            ColorAA = 5,",
        "            ColorBR = 6,",
        "            ColorBG = 7,",
        "            ColorBB = 8,",
        "            ColorBA = 9,",
        "            WidthA = 10,",
        "            WidthB = 11,",
        "            Offset = 12,",
        "            FalloffThreshold = 13",
        "        }",
        "        //<<< _inputids",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var ColorAR = inputs[(int)InputId.ColorAR].Eval(context).Value;",
        "            var ColorAG = inputs[(int)InputId.ColorAG].Eval(context).Value;",
        "            var ColorAB = inputs[(int)InputId.ColorAB].Eval(context).Value;",
        "            var ColorAA = inputs[(int)InputId.ColorAA].Eval(context).Value;",
        "            var ColorA = new Color4(ColorAR, ColorAG, ColorAB, ColorAA);",
        "            var ColorBR = inputs[(int)InputId.ColorBR].Eval(context).Value;",
        "            var ColorBG = inputs[(int)InputId.ColorBG].Eval(context).Value;",
        "            var ColorBB = inputs[(int)InputId.ColorBB].Eval(context).Value;",
        "            var ColorBA = inputs[(int)InputId.ColorBA].Eval(context).Value;",
        "            var ColorB = new Color4(ColorBR, ColorBG, ColorBB, ColorBA);",
        "            var WidthA = inputs[(int)InputId.WidthA].Eval(context).Value;",
        "            var WidthB = inputs[(int)InputId.WidthB].Eval(context).Value;",
        "            var Width = new Vector2(WidthA, WidthB);",
        "            var Offset = inputs[(int)InputId.Offset].Eval(context).Value;",
        "            var FalloffThreshold = inputs[(int)InputId.FalloffThreshold].Eval(context).Value;",
        "            //<<< _params",
        "        ",
        "            if (_firstEval) {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "            ",
        "            //_effect.GetVariableByName(\"inverseProjMatrix\").AsMatrix().Set();",
        "            ",
        "            //Logger.Info(\"{}\", Matrix.Invert(context.CameraProjection));",
        "",
        "",
        "            _effect.GetVariableByName(\"ColorA\").AsVector().Set(new Vector4(ColorAR, ColorAG, ColorAB,ColorAA)); ",
        "            _effect.GetVariableByName(\"ColorB\").AsVector().Set(new Vector4(ColorBR, ColorBG, ColorBB,ColorBA)); ",
        "            _effect.GetVariableByName(\"Width\").AsVector().Set(new Vector2(WidthA, WidthB)); ",
        "            _effect.GetVariableByName(\"Offset\").AsScalar().Set(Offset); ",
        "            _effect.GetVariableByName(\"FalloffThreshold\").AsScalar().Set(FalloffThreshold); ",
        "            var v = _effect.GetVariableByName(\"InverseProjectionMatrix\").AsMatrix();",
        "            v.SetMatrix(Matrix.Invert(context.CameraProjection)); ",
        "            ",
        "",
        "            Scene.Eval(context);",
        "            ",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "",
        "            return context;",
        "        }",
        "",
        "        private Renderer _renderer = new Renderer();",
        "",
        "        public Color4 Ambient { get; private set; }",
        "        public Color4 Diffuse { get; private set; }",
        "        public Color4 Specular { get; private set; }",
        "        public Color4 Emission { get; private set; }",
        "        public float Shininess { get; private set; }",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "da055533-aa67-446e-85ec-49054177d539",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a23f8a6c-3278-47ad-8199-c69e6b3ec846"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b883efc7-c8ec-44b1-b75c-30aa41f9be75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "12a38866-0465-41d7-94bf-6a66f764c59b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cf0d67a5-2814-4a8c-9af1-bfd3e6781417",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ca5d3328-24d6-47b4-b578-df20efb6221f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d304fa3-fd01-441e-bf2c-96be1fec115c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d202f56d-17e7-4de7-82d3-a0be6b7be283",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "461e94b3-da85-4166-bfd3-313962c8f5e8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b4c68b2d-36e0-4bca-b632-92157836b899",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "46032b6b-8fd3-4faa-b90b-68d63655d1fe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8366a00d-2b3a-48ed-86d9-aae2ef9335dc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "01b8fd80-fda0-4352-827b-381b69ac95bd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1d33c1f-9e24-4a2c-bb4f-23953f1b4e2f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fa912c37-5c4c-4d28-82c0-d5fd139b81d4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b9b4e62c-6876-4882-8527-d917c03a6456",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da055533-aa67-446e-85ec-49054177d539"
    }
  ]
}