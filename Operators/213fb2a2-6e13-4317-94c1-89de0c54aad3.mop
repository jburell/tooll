{
  "Name": "Iterate",
  "_id": "213fb2a2-6e13-4317-94c1-89de0c54aad3",
  "Namespace": "lib.basic",
  "Description": "Iterates over a subtree for the defined range.\r\nUse [VariableValue] to read the index variable further down the subtree.\r\n\r\nExample: To create 10 Cubes you can do something like this:\r\n\r\n[ Iterate ]\r\n[ Transform_____________]\r\n[ Cube ]  [Multiply_______]\r\n              [ Read Variable ]\r\n\r\nTo connect the [Read Variable] to [Transform.Translate.X]...\r\n1. Select Transform, then \r\n2. Shift drag Output of [Read Variable] to Parameter View.",
  "Inputs": [
    {
      "Name": "Subtree",
      "MetaInstanceID": "06f69efe-8a67-4010-9d86-355406f83a3b",
      "DefaultValue": {
        "Type": "Generic",
        "Value": "Framefield.Core.Generic"
      },
      "MetaID": "9f831cf2-a1ec-41f4-ba80-cced9736af6b",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "Connection to the subtree to iterate over.",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Counter",
      "MetaInstanceID": "fa711194-df1c-4f92-8fd2-9edfb58405fd",
      "DefaultValue": {
        "Type": "Text",
        "Value": "i"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "Name of the index counter variable. Use [VariableValue] to read it further down the subtree.",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "c6674e87-3dc7-4373-bc2a-e3f019516ef2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "Iteration end when current index is less or equal than the Stop.",
      "Min": "0",
      "Max": "100000",
      "Scale": "10",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "IteratorOut",
      "MetaInstanceID": "7bd3d32e-a465-4a27-a534-03acd0b8aea3",
      "MetaID": "9f831cf2-a1ec-41f4-ba80-cced9736af6b"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "47e8cd75-9389-4a89-80ef-4457e00bb654",
      "MetaID": "b8d99d67-67ab-4daf-ac08-7bf6bbdd83d5",
      "Name": "IterateFunc",
      "Version": "12eaef65-a63b-48d8-b2a6-6e487134b0aa",
      "Type": "Generic",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "",
        "namespace Framefield.Core.IDb8d99d67_67ab_4daf_ac08_7bf6bbdd83d5",
        "{",
        "    public class Class_Iterate : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Subtree = 0,",
        "            Counter = 1,",
        "            Count = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        //OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IVariableAccessor> _collector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IVariableAccessor>();",
        "        //List<OperatorPart.Function> _variableAccessorOpPartFunctions = new List<OperatorPart.Function>();",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Subtree = inputs[(int)InputId.Subtree];",
        "            var Counter = inputs[(int)InputId.Counter].Eval(context).Text;",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            OperatorPart.ChangedPropagationEnabled = false;",
        "",
        "            //collect all ops within the Subtree that access the Counter variable",
        "            /*",
        "            _collector.Clear();",
        "            Subtree.TraverseWithFunction(_collector, null);",
        "            _variableAccessorOpPartFunctions.Clear();",
        "",
        "            foreach (var possibleOpPartFunction in _collector.CollectedOpPartFunctions) {",
        "                if (possibleOpPartFunction.VariableName == Counter)",
        "                    _variableAccessorOpPartFunctions.Add(possibleOpPartFunction as OperatorPart.Function);",
        "            }",
        "            */",
        "",
        "            var invalidator = new OperatorPart.InvalidateVariableAccessors(Counter);",
        "            for (var i = 0;  i < Count; i += 1)",
        "            {",
        "                if (context.Variables.ContainsKey(Counter))",
        "                    context.Variables[Counter] = i;",
        "                else",
        "                    context.Variables.Add(Counter, i);",
        "",
        "                //foreach (var opPartFunc in _variableAccessorOpPartFunctions)",
        "                //    opPartFunc.OperatorPart.EmitChangedEvent();",
        "                ",
        "                //invalidate all variable accessors",
        "                invalidator.Clear();",
        "                Subtree.TraverseWithFunctionUseSpecificBehavior(null, invalidator);                ",
        "                ",
        "                Subtree.Eval(context);",
        "            }",
        "",
        "            OperatorPart.ChangedPropagationEnabled = true;",
        "",
        "            return context;",
        "        }",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "06f69efe-8a67-4010-9d86-355406f83a3b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "47e8cd75-9389-4a89-80ef-4457e00bb654"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fa711194-df1c-4f92-8fd2-9edfb58405fd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "47e8cd75-9389-4a89-80ef-4457e00bb654"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c6674e87-3dc7-4373-bc2a-e3f019516ef2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "47e8cd75-9389-4a89-80ef-4457e00bb654"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "47e8cd75-9389-4a89-80ef-4457e00bb654",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bd3d32e-a465-4a27-a534-03acd0b8aea3"
    }
  ]
}